
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.reproductorapp.analizadores;

import com.example.reproductorapp.objects.*;

import java.util.List;
import java_cup.runtime.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserSolicitud extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserSolicitud() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserSolicitud(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserSolicitud(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\011\000\002\004\012\000\002\005\003" +
    "\000\002\005\003\000\002\006\011\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\006\002\uffff\004\004\001\002\000\004\010" +
    "\010\001\002\000\004\002\000\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\005\011\001" +
    "\002\000\004\004\013\001\002\000\004\006\034\001\002" +
    "\000\004\011\014\001\002\000\004\005\015\001\002\000" +
    "\006\012\017\013\020\001\002\000\004\006\021\001\002" +
    "\000\004\006\ufffc\001\002\000\004\006\ufffb\001\002\000" +
    "\004\011\022\001\002\000\004\005\023\001\002\000\006" +
    "\004\024\006\ufff9\001\002\000\004\007\026\001\002\000" +
    "\004\006\ufffd\001\002\000\004\005\027\001\002\000\004" +
    "\014\030\001\002\000\004\006\031\001\002\000\004\007" +
    "\032\001\002\000\004\005\033\001\002\000\004\006\ufffa" +
    "\001\002\000\004\010\035\001\002\000\004\005\036\001" +
    "\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

    OptionConexion tipoSolicitud;
    String nombreSol = "";
    

 /* Connect this parser to a scanner!*/
	public ParserSolicitud(LexerSolicitud analizadorLexico) {
		super(analizadorLexico);
	}



      public OptionConexion getTipoSolicitud(){
        if (tipoSolicitud == OptionConexion.PISTAS_COMPLETAS){
            if (nombreSol != ""){
                tipoSolicitud = OptionConexion.PISTAS_NOMBRE;
            }
        }else{
            if (nombreSol != ""){
                tipoSolicitud = OptionConexion.LISTAS_NOMBRE;
            }
        }
        return tipoSolicitud;
      }

      public String getNombreSol() {
        return nombreSol;
    }

        @Override
        public void syntax_error(Symbol tok) {
                String esperado = "Terminales de sentencias:  > ;";
	    try{
                List<Integer> lista=expected_token_ids();
                if(!lista.isEmpty()){
                       if(lista.get(0)<=50){
                               esperado = sym.terminalNames[lista.get(0)];
                        } 
                }
	        Token token = (Token) tok.value;
                report_error("",null);
                ErrorSingleton.getInstance().getErrores().add(new Errores("No pertenece a la gramatica, en su lugar se esperaba: " + esperado, TipoError.SINTACTICO, token));

            }catch(Exception e){
                Token token = (Token) tok.value;
                report_error("-----------",null);
                ErrorSingleton.getInstance().getErrores().add(new Errores("No pertenece a la gramatica, en su lugar se esperaba: " + esperado, TipoError.SINTACTICO, token));
	    }	
	}

         @Override
        public List<Integer> expected_token_ids() {
                return super.expected_token_ids();
        }


    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            ErrorSingleton.getInstance().getErrores().add(new Errores("Posiblemente no se encontro un > para la recuperacion adecuada", TipoError.SINTACTICO, new Token("No recuperado", 1, 1)));
        }else{
             Token token = (Token) cur_token.value;
             report_error("-----------",null);
            ErrorSingleton.getInstance().getErrores().add(new Errores("Token no pertenece a la gramatica y su recuperacion es incierta", TipoError.SINTACTICO, new Token("No recuperado", 1, 1)));

        }
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final ParserSolicitud parser;

  /** Constructor */
  CUP$parser$actions(ParserSolicitud parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= def_solicitud 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // def_solicitud ::= BRACKETA SOLICITUD BRACKETC estruc_solicitud BRACKET_TERMINAL SOLICITUD BRACKETC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_solicitud",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estruc_solicitud ::= BRACKETA TIPO BRACKETC tipo_solicitud BRACKET_TERMINAL TIPO BRACKETC nombre_opcional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estruc_solicitud",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipo_solicitud ::= LISTA 
            {
              Object RESULT =null;
		tipoSolicitud = OptionConexion.LISTAS_COMPLETAS;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo_solicitud ::= PISTA 
            {
              Object RESULT =null;
		tipoSolicitud = OptionConexion.PISTAS_COMPLETAS;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_solicitud",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nombre_opcional ::= BRACKETA NOMBRE BRACKETC CONT_CADENA BRACKET_TERMINAL NOMBRE BRACKETC 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		nombreSol = name.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_opcional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nombre_opcional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_opcional",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
