Pista algo1 {
    var entero algo, otro = 2+5*7-1;
    var cadena cade = "hola mundo "+algo;
    var boolean conditi = verdadero;
    var entero arreglo arr10,arr20,arr30 [][]={{5,10,15},{20,25,30}};

    Principal() {
        algo();
        arr10[1][1] = 30+5;
    }
    algo (){
        otro = 5;
        var cadena cades = "hola Elvis";
        var cadena cadess = "Adios Elvis";
        Mensaje("la sentencia es: "+ (5 >= otro) +"  por lo tanto; ");
        si(5 >= otro) {
            cade = cades;
            var entero iter = 0;
            hacer {
                Mensaje(cade);
                iter++;
                Mensaje(iter);
            }mientras(2>iter);
            var entero rest = sum(5,2,1) + sum(2,1,1);
            Mensaje("El resultado de la operacion es: "+ rest );
            Reproducir(Do,5, 1000,5);
            Reproducir(Re,4, 1500,3);
            Esperar(200,5);
            Reproducir(Re,4, 1500,3);
            Reproducir(Mi,6, 3500,5);
            Reproducir(Sol,7, 1500,2);
            Esperar(200,3);
            Reproducir(Fa,5, 500,3);
        } sino {
            cade = cadess;
            algo = 28;
            Mensaje(cade);
        }
    } 
    entero sum(entero num1, entero num2, entero num3){
        retorna num1+num2+num3;
    } 
} 

Pista pistaSwicht{
    var cadena cadena1 = "hola";
    Principal() {
        switch(cadena1) {
            caso "hol":
            Mensaje("valor de la cadena no es: "+ cadena1);
            salir
            caso "hola":
            Mensaje("valor de la cadena es : "+ cadena1);
            salir
            default:
             Mensaje("salir: "+ cadena1);
            salir
        }
    }
}


Pista pistaRecirsiva{
    var entero num = 4;
    Principal() {
        var entero res = factorial(4);
        Mensaje("El resultado de la operacion es: "+ res );
    }

    entero factorial(entero num){
        si(num == 1 || num == 0){
            retorna 1;
        }sino{
            retorna factorial(num-1);
        }
    }
}


Pista algo1 {
    var entero algo, otro = 2+5*7-1;
    var cadena cade = "hola mundo "+algo;
    otro = 5;
    var boolean conditi = verdadero;
    var entero arreglo arr10,arr20,arr30 [][]={{5,10,15},{20,25,30}};

    Principal() {
         arr10[1][1] = 30+5;
        algo();
        
    }
    algo (){
        var cadena cades = "hola Elvis";
        var cadena cadess = "Adios Elvis";
        Mensaje("la sentencia es: "+ (5 > otro) +"  por lo tanto; ");
        si(5 > otro) {
            cade = cades;
           var entero iter = 0;
           mientras(2>iter){
                Mensaje(cade+" "+iter);
                iter++;
                Mensaje(iter);
            }
            var entero rest = sum(arr10[1][1] ,2) + sum(2,1);
            Mensaje("El resultado de la operacion es: "+ rest );
        } sino si(5==otro) {
            var entero iter = 0;
            hacer {
                Mensaje(cade);
                iter++;
                Mensaje(iter);
            }mientras(2>iter);
            var entero rest = sum(arr10[1][1]-3,2) + sum(algo-5,5);
            Mensaje("El resultado de la operacion es: "+ rest );
            cade = cadess;
            algo = 28;
            Mensaje(cade);
        }sino {
            Mensaje("El resultado de la operacion es: adiso fdsfsadf" );
        }
    } 
    entero sum(entero num1, entero num2){
        retorna num1+num2;
    } 
}  
Pista algo2 {
    var entero algo, otro = 2+5*7-1;
    var cadena cade = "hola mundo "+algo;
    otro = 5;
    var boolean conditi = verdadero;
    var entero arreglo arr10,arr20,arr30 [][]={{5,10,15},{20,25,30}};

    Principal() {
        Para(Var Entero i = 0; i < 3; i++){
            Reproducir(Do, 2 * (i+1), 500, i);
            Reproducir(Sol, 2 * (i+1), 500, i);
            Reproducir(Sol, 2 * (i+1), 500, i);
            Reproducir(La, 2 * (i+1), 500, i);
            Reproducir(La, 2 * (i+1), 500, i);
            Reproducir(Sol, 2 * (i+1), 500, i);
            Reproducir(Fa, 2 * (i+1), 500, i);
            Reproducir(Fa, 2 * (i+1), 500, i);
            Reproducir(Mi, 2 * (i+1), 500, i);
            Reproducir(Mi, 2 * (i+1), 500, i);
            Reproducir(Re, 2 * (i+1), 500, i);
            Reproducir(Re, 2 * (i+1), 500, i);
            Reproducir(Do, 2 * (i+1), 500, i);

            Reproducir(Sol, 2 * (i+1), 500, i);
            Reproducir(Sol, 2 * (i+1), 500, i);
            Reproducir(Fa, 2 * (i+1), 500, i);
            Reproducir(Fa, 2 * (i+1), 500, i);
            Reproducir(Mi, 2 * (i+1), 500, i);
            Reproducir(Mi, 2 * (i+1), 500, i);
            Reproducir(Re, 2 * (i+1), 500, i);
            Si(2*(i+1)<5){
                Reproducir(Sol, 2 * (i+1), 500, i);
                Reproducir(Sol, 2 * (i+1), 500, i);
                Reproducir(Fa, 2 * (i+1), 500, i);
                Reproducir(Fa, 2 * (i+1), 500, i);
                Reproducir(Mi, 2 * (i+1), 500, i);
                Reproducir(Mi, 2 * (i+1), 500, i);
                Reproducir(Re, 2 * (i+1), 500, i);

                Reproducir(Do, 2 * (i+1), 500, i);
                Reproducir(Do, 2 * (i+1), 500, i);
                Reproducir(Sol, 2 * (i+1), 500, i);
                Reproducir(Sol, 2 * (i+1), 500, i);
                Reproducir(La, 2 * (i+1), 500, i);
                Reproducir(La, 2 * (i+1), 500, i);
                Reproducir(Sol, 2 * (i+1), 500, i);
                Reproducir(Fa, 2 * (i+1), 500, i);
                Reproducir(Fa, 2 * (i+1), 500, i);
                Reproducir(Mi, 2 * (i+1), 500, i);
                Reproducir(Mi, 2 * (i+1), 500, i);
                Reproducir(Re, 2 * (i+1), 500, i);
                Reproducir(Re, 2 * (i+1), 500, i);
                Reproducir(Do, 2 * (i+1), 500, i);
            }
        }
    }
    
    entero sum(entero num1, entero num2){
        retorna num1+num2;
    } 
} 



   
         
Pista eexti extiende algo1, nuevaPistas{



    Principal() {
        arr10[1][1] = 30+5;
        algo();
        Mensaje(ejecutarCancion());
    }

}

Pista nuevaPistas {

    Var Cadena texto = "Finnn";

    

    Cadena ejecutarCancion(){
        Para(Var Entero i = 0; i < 3; i = i +1 ){
            Reproducir(Do, 2 * (i+1), 500, i);
            Reproducir(Sol, 2 * (i+1), 500, i);
            Reproducir(Sol, 2 * (i+1), 500, i);
            Reproducir(La, 2 * (i+1), 500, i);
            Reproducir(La, 2 * (i+1), 500, i);
            Reproducir(Sol, 2 * (i+1), 500, i);
            Esperar(500, i);

            Reproducir(Fa, 2 * (i+1), 500, i);
            Reproducir(Fa, 2 * (i+1), 500, i);
            Reproducir(Mi, 2 * (i+1), 500, i);
            Reproducir(Mi, 2 * (i+1), 500, i);
            Reproducir(Re, 2 * (i+1), 500, i);
            Reproducir(Re, 2 * (i+1), 500, i);
            Reproducir(Do, 2 * (i+1), 500, i);
            Esperar(500, i);

            Reproducir(Sol, 2 * (i+1), 500, i);
            Reproducir(Sol, 2 * (i+1), 500, i);
            Reproducir(Fa, 2 * (i+1), 500, i);
            Reproducir(Fa, 2 * (i+1), 500, i);
            Reproducir(Mi, 2 * (i+1), 500, i);
            Reproducir(Mi, 2 * (i+1), 500, i);
            Reproducir(Re, 2 * (i+1), 500, i);
            Esperar(500, i);

            Si(2*(i+1)<5){
                Reproducir(Sol, 2 * (i+1), 500, i);
                Reproducir(Sol, 2 * (i+1), 500, i);
                Reproducir(Fa, 2 * (i+1), 500, i);
                Reproducir(Fa, 2 * (i+1), 500, i);
                Reproducir(Mi, 2 * (i+1), 500, i);
                Reproducir(Mi, 2 * (i+1), 500, i);
                Reproducir(Re, 2 * (i+1), 500, i);
                Esperar(500, i);

                Reproducir(Do, 2 * (i+1), 500, i);
                Reproducir(Do, 2 * (i+1), 500, i);
                Reproducir(Sol, 2 * (i+1), 500, i);
                Reproducir(Sol, 2 * (i+1), 500, i);
                Reproducir(La, 2 * (i+1), 500, i);
                Reproducir(La, 2 * (i+1), 500, i);
                Reproducir(Sol, 2 * (i+1), 500, i);
                Esperar(500, i);

                Reproducir(Fa, 2 * (i+1), 500, i);
                Reproducir(Fa, 2 * (i+1), 500, i);
                Reproducir(Mi, 2 * (i+1), 500, i);
                Reproducir(Mi, 2 * (i+1), 500, i);
                Reproducir(Re, 2 * (i+1), 500, i);
                Reproducir(Re, 2 * (i+1), 500, i);
                Reproducir(Do, 2 * (i+1), 500, i);
            }
        }

        Retorna texto;
    }

    Principal(){
        Mensaje(ejecutarCancion());
    }

}

Pista algo1ss {
    var entero algo, otro = 2+5*7-1;
    var cadena cade = "hola mundo "+algo;
    var boolean conditi = verdadero;
    var entero arreglo arr10,arr20,arr30 [][]={{5,10,15},{20,25,30}};

    Principal() {
        algo();
       reproducirMelodia(6,1000,3,1000);
        arr10[1][1] = 30+5;
    }
    algo (){
        otro = 5;
        var cadena cades = "hola Elvis";
        var cadena cadess = "Adios Elvis";
        Mensaje("la sentencia es: "+ (5 >= otro) +"  por lo tanto; ");
        si(5 >= otro) {
            cade = cades;
            var entero iter = 0;
            hacer {
                Mensaje(cade);
                iter++;
                Mensaje(iter);
            }mientras(2>iter);
            var entero rest = sum(5,2,1) + sum(2,1,1);
            Mensaje("El resultado de la operacion es: "+ rest );
            Reproducir(Do,5, 1000,5);
            Reproducir(Re,4, 1500,3);
            Esperar(200,5);
            Reproducir(Re,4, 1500,3);
            Reproducir(Mi,6, 3500,5);
            Reproducir(Sol,7, 1500,2);
            Esperar(200,3);
            Reproducir(Fa,5, 500,3);
        } sino {
            cade = cadess;
            algo = 28;
            Mensaje(cade);
        }
    } 
    entero sum(entero num1, entero num2, entero num3){
        retorna num1+num2+num3;
    } 
	keep entero reproducirMelodia(entero octava, entero tiempo, entero canal, entero espera) {
		Reproducir(Si,octava, tiempo,canal);
		Reproducir(Si,octava, tiempo,canal);
		Reproducir(La,octava, tiempo,canal);
		Reproducir(Sol,octava, tiempo,canal);
		Reproducir(Si,octava, tiempo,canal);
		Reproducir(La,octava, tiempo,canal);
		Reproducir(Sol,octava, tiempo,canal);
		Reproducir(Mi,octava, tiempo,canal);
		Esperar(espera, canal);
		Reproducir(Si,octava, tiempo,canal);
		Reproducir(Si,octava, tiempo,canal);
		Reproducir(La,octava, tiempo,canal);
		Reproducir(Sol,octava, tiempo,canal);
		Reproducir(Si,octava, tiempo,canal);
		Reproducir(La,octava, tiempo,canal);
		Reproducir(Sol,octava, tiempo,canal);
		Reproducir(Re,octava, tiempo,canal);
		Esperar(espera, canal);
		Reproducir(La,octava, tiempo,canal);
		Reproducir(Sol,octava, tiempo,canal);
		Reproducir(Fa,octava, tiempo,canal);
		Reproducir(La,octava, tiempo,canal);
		Reproducir(Sol,octava, tiempo,canal);
		Reproducir(Fa,octava, tiempo,canal);
		Reproducir(Re,octava, tiempo,canal);
		Esperar(espera, canal);
		Reproducir(La,octava, tiempo,canal);
		Reproducir(Sol,octava, tiempo,canal);
		Reproducir(Fa,octava, tiempo,canal);
		Reproducir(Sol,octava, tiempo,canal);
		Reproducir(Fa,octava, tiempo,canal);
		Reproducir(Sol,octava, tiempo,canal);
		Reproducir(Mi,octava, tiempo,canal);
		Esperar(espera, canal);
retorna 5;
	}
}

{
    lista:
    {
        nombre: "fiesta",
        pistas: [algo1, algo2, nuevaPistas]
    }
}


<solicitud>
    <tipo>Lista</tipo>
    <nombre>"fiesta"</nombre>
</solicitud>

<solicitud>
    <tipo>Pista</tipo>
</solicitud>

<solicitud>
    <tipo>Pista</tipo>
    <nombre>"nuevaPistas"</nombre>
</solicitud>