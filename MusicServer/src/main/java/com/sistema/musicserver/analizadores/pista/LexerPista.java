// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexerPista.jflex

/*primer seccion codigo de usuario*/
//package ;
package com.sistema.musicserver.analizadores.pista;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerPista implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CADE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\2\36\1\40\1\41"+
    "\1\42\1\36\1\43\1\44\1\36\1\45\1\46\1\47"+
    "\1\36\1\50\4\36\1\51\1\0\1\52\1\53\1\36"+
    "\1\0\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\40\1\66\1\67\1\70\1\71"+
    "\1\72\1\36\1\73\1\74\1\75\1\76\1\50\1\77"+
    "\1\100\1\36\1\101\1\102\1\103\1\104\7\0\1\1"+
    "\32\0\1\1\120\0\1\36\u018e\0\1\1\177\0\13\1"+
    "\35\0\2\1\5\0\1\1\57\0\1\1\240\0\1\1"+
    "\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\21\23\1\24\1\25\1\26"+
    "\6\23\1\27\1\2\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\1\0\1\35\1\36\2\0\1\37\1\40\1\41"+
    "\2\0\1\42\1\43\1\44\1\45\26\23\1\46\12\23"+
    "\1\46\1\47\1\50\1\51\2\52\1\53\2\0\2\45"+
    "\7\23\1\0\1\54\4\23\1\0\1\55\3\23\1\0"+
    "\1\56\2\23\1\57\5\23\1\0\1\60\3\23\1\61"+
    "\5\23\1\62\1\23\4\0\1\45\4\23\1\63\2\23"+
    "\1\64\4\23\1\65\2\23\1\66\1\67\4\23\1\70"+
    "\2\23\1\71\3\23\1\72\1\0\1\73\2\23\1\74"+
    "\1\23\1\45\1\0\6\23\1\75\3\23\1\76\1\77"+
    "\4\23\1\100\3\23\1\101\1\102\3\23\3\0\2\23"+
    "\1\103\3\23\1\104\12\23\1\105\1\23\1\0\1\106"+
    "\1\107\2\23\1\110\1\111\2\23\1\112\1\23\1\113"+
    "\2\23\1\114\2\23\1\115\1\23\1\116\1\117\1\120"+
    "\4\23\1\121\1\122\1\23\1\123\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\212\0\317\0\212\0\212\0\u0114"+
    "\0\u0159\0\212\0\212\0\212\0\u019e\0\212\0\u01e3\0\212"+
    "\0\u0228\0\212\0\212\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381"+
    "\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\212"+
    "\0\212\0\212\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a"+
    "\0\212\0\u096f\0\212\0\212\0\212\0\212\0\u09b4\0\212"+
    "\0\u09f9\0\212\0\212\0\u0a3e\0\u0a83\0\212\0\212\0\212"+
    "\0\u0ac8\0\u0b0d\0\212\0\212\0\212\0\u0b52\0\u0b97\0\u0bdc"+
    "\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04"+
    "\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c"+
    "\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254"+
    "\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c"+
    "\0\u04da\0\212\0\212\0\212\0\u0a3e\0\u0ac8\0\u14c1\0\u1506"+
    "\0\212\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9"+
    "\0\u172e\0\u1773\0\212\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc"+
    "\0\212\0\u1911\0\u1956\0\u199b\0\u19e0\0\212\0\u1a25\0\u1a6a"+
    "\0\212\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\212"+
    "\0\u1c4d\0\u1c92\0\u1cd7\0\212\0\u1d1c\0\u1d61\0\u1da6\0\u1deb"+
    "\0\u1e30\0\u04da\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1eff"+
    "\0\u1fce\0\u2013\0\u2058\0\u209d\0\u04da\0\u20e2\0\u2127\0\212"+
    "\0\u216c\0\u21b1\0\u21f6\0\u223b\0\212\0\u2280\0\u22c5\0\u04da"+
    "\0\212\0\u230a\0\u234f\0\u2394\0\u23d9\0\u04da\0\u241e\0\u2463"+
    "\0\212\0\u24a8\0\u24ed\0\u2532\0\u04da\0\u2577\0\212\0\u25bc"+
    "\0\u2601\0\u04da\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f"+
    "\0\u27e4\0\u2829\0\u286e\0\u04da\0\u28b3\0\u28f8\0\u293d\0\u04da"+
    "\0\u04da\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u04da\0\u2a96\0\u2adb"+
    "\0\u2b20\0\u04da\0\212\0\u2b65\0\u2baa\0\u2bef\0\u268b\0\u2c34"+
    "\0\u2c79\0\u2cbe\0\u2d03\0\u04da\0\u2d48\0\u2d8d\0\u2dd2\0\u04da"+
    "\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa"+
    "\0\u303f\0\u3084\0\u04da\0\u30c9\0\u310e\0\u04da\0\u04da\0\u3153"+
    "\0\u3198\0\u04da\0\u04da\0\u31dd\0\u3222\0\u04da\0\u3267\0\u04da"+
    "\0\u32ac\0\u32f1\0\u04da\0\u3336\0\u337b\0\u04da\0\u33c0\0\u04da"+
    "\0\u04da\0\u04da\0\u3405\0\u344a\0\u348f\0\u34d4\0\u04da\0\u04da"+
    "\0\u3519\0\u04da\0\u04da";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\3\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\27\1\30\1\31\1\53\1\33\1\54"+
    "\1\35\1\36\2\35\1\55\1\56\1\35\1\42\1\43"+
    "\1\57\1\60\1\46\4\35\1\61\1\62\1\63\5\64"+
    "\1\65\77\64\111\0\1\66\3\0\1\67\15\0\1\70"+
    "\54\0\1\71\11\0\1\72\72\0\1\73\1\0\6\74"+
    "\1\75\76\74\15\0\1\76\10\0\1\77\75\0\1\100"+
    "\105\0\1\101\1\0\1\21\101\0\1\102\6\0\1\103"+
    "\104\0\1\104\104\0\1\105\1\106\105\0\21\35\3\0"+
    "\17\35\1\107\6\35\1\0\1\35\31\0\21\35\3\0"+
    "\15\35\1\110\10\35\1\0\1\35\31\0\21\35\3\0"+
    "\1\111\14\35\1\112\10\35\1\0\1\35\31\0\21\35"+
    "\3\0\4\35\1\113\10\35\1\114\10\35\1\0\1\35"+
    "\31\0\21\35\3\0\14\35\1\115\3\35\1\116\3\35"+
    "\1\117\1\35\1\0\1\35\31\0\21\35\3\0\1\120"+
    "\25\35\1\0\1\35\31\0\21\35\3\0\26\35\1\0"+
    "\1\35\31\0\21\35\3\0\1\121\25\35\1\0\1\35"+
    "\31\0\21\35\3\0\4\35\1\122\21\35\1\0\1\35"+
    "\31\0\21\35\3\0\1\123\14\35\1\124\10\35\1\0"+
    "\1\35\31\0\21\35\3\0\4\35\1\125\3\35\1\126"+
    "\15\35\1\0\1\35\31\0\21\35\3\0\17\35\1\127"+
    "\6\35\1\0\1\35\31\0\21\35\3\0\1\130\7\35"+
    "\1\131\6\35\1\132\6\35\1\0\1\35\31\0\21\35"+
    "\3\0\4\35\1\133\21\35\1\0\1\35\31\0\21\35"+
    "\3\0\1\134\7\35\1\135\4\35\1\136\4\35\1\137"+
    "\1\140\2\35\1\0\1\35\31\0\21\35\3\0\17\35"+
    "\1\141\6\35\1\0\1\35\31\0\21\35\3\0\1\142"+
    "\3\35\1\143\21\35\1\0\1\35\31\0\21\35\3\0"+
    "\4\35\1\113\10\35\1\144\10\35\1\0\1\35\31\0"+
    "\21\35\3\0\1\145\25\35\1\0\1\35\31\0\21\35"+
    "\3\0\15\35\1\124\10\35\1\0\1\35\31\0\21\35"+
    "\3\0\4\35\1\125\3\35\1\146\15\35\1\0\1\35"+
    "\31\0\21\35\3\0\4\35\1\147\21\35\1\0\1\35"+
    "\31\0\21\35\3\0\1\134\7\35\1\150\11\35\1\137"+
    "\1\140\2\35\1\0\1\35\31\0\21\35\3\0\26\35"+
    "\1\0\1\151\11\0\1\152\177\0\1\153\12\0\1\154"+
    "\73\0\11\74\1\155\73\74\22\0\1\156\62\0\14\157"+
    "\1\0\2\157\1\160\65\157\2\106\1\161\1\162\101\106"+
    "\30\0\21\35\3\0\17\35\1\163\6\35\1\0\1\35"+
    "\31\0\21\35\3\0\15\35\1\164\10\35\1\0\1\35"+
    "\31\0\21\35\3\0\3\35\1\165\13\35\1\166\1\167"+
    "\5\35\1\0\1\35\31\0\21\35\3\0\14\35\1\170"+
    "\11\35\1\0\1\35\31\0\21\35\3\0\5\35\1\171"+
    "\20\35\1\0\1\35\7\0\1\172\17\0\1\173\1\0"+
    "\21\35\3\0\1\35\1\174\24\35\1\0\1\35\31\0"+
    "\21\35\3\0\21\35\1\175\4\35\1\0\1\35\31\0"+
    "\21\35\3\0\16\35\1\176\7\35\1\0\1\35\31\0"+
    "\21\35\3\0\21\35\1\177\4\35\1\0\1\35\7\0"+
    "\1\200\17\0\1\201\1\0\21\35\3\0\12\35\1\202"+
    "\13\35\1\0\1\35\31\0\21\35\3\0\2\35\1\203"+
    "\23\35\1\0\1\35\31\0\21\35\3\0\4\35\1\204"+
    "\21\35\1\0\1\35\7\0\1\205\17\0\1\206\1\0"+
    "\21\35\3\0\26\35\1\0\1\35\31\0\21\35\3\0"+
    "\14\35\1\207\11\35\1\0\1\35\31\0\21\35\3\0"+
    "\14\35\1\210\11\35\1\0\1\35\27\0\1\211\1\0"+
    "\21\35\3\0\4\35\1\212\21\35\1\0\1\35\31\0"+
    "\21\35\3\0\3\35\1\213\22\35\1\0\1\35\31\0"+
    "\21\35\3\0\17\35\1\214\6\35\1\0\1\35\31\0"+
    "\21\35\3\0\20\35\1\215\5\35\1\0\1\35\31\0"+
    "\21\35\3\0\10\35\1\216\15\35\1\0\1\35\7\0"+
    "\1\217\17\0\1\220\1\0\21\35\3\0\16\35\1\221"+
    "\2\35\1\222\4\35\1\0\1\35\31\0\21\35\3\0"+
    "\12\35\1\223\13\35\1\0\1\35\27\0\1\224\1\0"+
    "\21\35\3\0\14\35\1\225\11\35\1\0\1\35\31\0"+
    "\21\35\3\0\12\35\1\226\13\35\1\0\1\35\31\0"+
    "\21\35\3\0\13\35\1\227\12\35\1\0\1\35\31\0"+
    "\21\35\3\0\10\35\1\230\15\35\1\0\1\35\31\0"+
    "\21\35\3\0\22\35\1\231\3\35\1\0\1\35\31\0"+
    "\21\35\3\0\17\35\1\232\6\35\1\0\1\35\31\0"+
    "\21\35\3\0\17\35\1\233\6\35\1\0\1\35\31\0"+
    "\21\35\3\0\1\35\1\174\24\35\1\0\1\35\31\0"+
    "\21\35\3\0\12\35\1\202\13\35\1\0\1\35\31\0"+
    "\21\35\3\0\4\35\1\212\21\35\1\0\1\35\31\0"+
    "\21\35\3\0\16\35\1\221\2\35\1\222\4\35\1\0"+
    "\1\35\31\0\21\35\3\0\14\35\1\225\11\35\1\0"+
    "\1\35\1\0\17\157\1\234\65\157\14\235\1\157\2\235"+
    "\1\236\5\235\1\237\1\235\1\240\55\235\2\0\1\161"+
    "\132\0\21\35\3\0\4\35\1\241\21\35\1\0\1\35"+
    "\31\0\21\35\3\0\12\35\1\242\13\35\1\0\1\35"+
    "\31\0\21\35\3\0\4\35\1\243\21\35\1\0\1\35"+
    "\31\0\21\35\3\0\1\244\25\35\1\0\1\35\31\0"+
    "\21\35\3\0\15\35\1\245\10\35\1\0\1\35\31\0"+
    "\21\35\3\0\21\35\1\246\4\35\1\0\1\35\31\0"+
    "\21\35\3\0\1\247\25\35\1\0\1\35\27\0\1\250"+
    "\106\0\21\35\3\0\12\35\1\251\13\35\1\0\1\35"+
    "\31\0\21\35\3\0\4\35\1\252\21\35\1\0\1\35"+
    "\31\0\21\35\3\0\4\35\1\253\21\35\1\0\1\35"+
    "\31\0\21\35\3\0\10\35\1\254\15\35\1\0\1\35"+
    "\27\0\1\255\106\0\21\35\3\0\20\35\1\256\5\35"+
    "\1\0\1\35\31\0\21\35\3\0\4\35\1\257\21\35"+
    "\1\0\1\35\31\0\21\35\3\0\16\35\1\260\7\35"+
    "\1\0\1\35\27\0\1\261\106\0\21\35\3\0\6\35"+
    "\1\262\17\35\1\0\1\35\31\0\21\35\3\0\20\35"+
    "\1\263\5\35\1\0\1\35\31\0\21\35\3\0\14\35"+
    "\1\264\11\35\1\0\1\35\31\0\21\35\3\0\4\35"+
    "\1\265\21\35\1\0\1\35\31\0\21\35\3\0\1\266"+
    "\25\35\1\0\1\35\31\0\21\35\3\0\21\35\1\267"+
    "\4\35\1\0\1\35\31\0\21\35\3\0\14\35\1\270"+
    "\11\35\1\0\1\35\27\0\1\271\106\0\21\35\3\0"+
    "\17\35\1\272\6\35\1\0\1\35\31\0\21\35\3\0"+
    "\15\35\1\273\10\35\1\0\1\35\31\0\21\35\3\0"+
    "\10\35\1\274\15\35\1\0\1\35\31\0\21\35\3\0"+
    "\15\35\1\275\10\35\1\0\1\35\7\0\1\276\17\0"+
    "\1\277\1\0\21\35\3\0\26\35\1\0\1\35\31\0"+
    "\21\35\3\0\1\300\25\35\1\0\1\35\31\0\21\35"+
    "\3\0\21\35\1\301\4\35\1\0\1\35\31\0\21\35"+
    "\3\0\4\35\1\302\21\35\1\0\1\35\31\0\21\35"+
    "\3\0\3\35\1\303\22\35\1\0\1\35\1\0\17\157"+
    "\1\234\7\157\1\161\55\157\14\235\1\157\2\235\1\236"+
    "\5\235\1\237\73\235\1\157\2\235\1\236\5\235\1\237"+
    "\1\235\1\304\71\235\1\157\2\235\1\305\5\235\1\237"+
    "\57\235\30\0\21\35\3\0\6\35\1\306\17\35\1\0"+
    "\1\35\31\0\21\35\3\0\4\35\1\307\21\35\1\0"+
    "\1\35\31\0\21\35\3\0\14\35\1\310\11\35\1\0"+
    "\1\35\31\0\21\35\3\0\2\35\1\311\23\35\1\0"+
    "\1\35\31\0\21\35\3\0\10\35\1\312\15\35\1\0"+
    "\1\35\31\0\21\35\3\0\22\35\1\313\3\35\1\0"+
    "\1\35\31\0\21\35\3\0\4\35\1\314\21\35\1\0"+
    "\1\35\31\0\21\35\3\0\17\35\1\315\6\35\1\0"+
    "\1\35\31\0\21\35\3\0\17\35\1\316\6\35\1\0"+
    "\1\35\31\0\21\35\3\0\4\35\1\317\21\35\1\0"+
    "\1\35\31\0\21\35\3\0\4\35\1\320\10\35\1\320"+
    "\10\35\1\0\1\35\31\0\21\35\3\0\17\35\1\321"+
    "\6\35\1\0\1\35\31\0\21\35\3\0\10\35\1\322"+
    "\15\35\1\0\1\35\31\0\21\35\3\0\1\323\25\35"+
    "\1\0\1\35\31\0\21\35\3\0\21\35\1\324\4\35"+
    "\1\0\1\35\31\0\21\35\3\0\14\35\1\325\11\35"+
    "\1\0\1\35\31\0\21\35\3\0\1\326\25\35\1\0"+
    "\1\35\31\0\21\35\3\0\2\35\1\327\23\35\1\0"+
    "\1\35\31\0\21\35\3\0\15\35\1\330\10\35\1\0"+
    "\1\35\31\0\21\35\3\0\17\35\1\331\6\35\1\0"+
    "\1\35\31\0\21\35\3\0\17\35\1\332\6\35\1\0"+
    "\1\35\27\0\1\333\106\0\21\35\3\0\17\35\1\334"+
    "\6\35\1\0\1\35\31\0\21\35\3\0\2\35\1\335"+
    "\23\35\1\0\1\35\31\0\21\35\3\0\1\336\25\35"+
    "\1\0\1\35\1\0\14\337\1\0\2\337\1\340\5\337"+
    "\1\341\57\337\17\235\1\305\5\235\1\237\1\235\1\304"+
    "\55\235\30\0\21\35\3\0\12\35\1\342\13\35\1\0"+
    "\1\35\31\0\21\35\3\0\1\343\25\35\1\0\1\35"+
    "\31\0\21\35\3\0\1\344\25\35\1\0\1\35\31\0"+
    "\21\35\3\0\21\35\1\345\4\35\1\0\1\35\31\0"+
    "\21\35\3\0\14\35\1\346\11\35\1\0\1\35\31\0"+
    "\21\35\3\0\12\35\1\347\13\35\1\0\1\35\31\0"+
    "\21\35\3\0\15\35\1\350\10\35\1\0\1\35\31\0"+
    "\21\35\3\0\1\351\25\35\1\0\1\35\31\0\21\35"+
    "\3\0\14\35\1\352\11\35\1\0\1\35\31\0\21\35"+
    "\3\0\21\35\1\353\4\35\1\0\1\35\31\0\21\35"+
    "\3\0\11\35\1\354\14\35\1\0\1\35\31\0\21\35"+
    "\3\0\17\35\1\355\6\35\1\0\1\35\31\0\21\35"+
    "\3\0\1\356\25\35\1\0\1\35\31\0\21\35\3\0"+
    "\10\35\1\357\15\35\1\0\1\35\31\0\21\35\3\0"+
    "\3\35\1\360\22\35\1\0\1\35\31\0\21\35\3\0"+
    "\14\35\1\361\11\35\1\0\1\35\31\0\21\35\3\0"+
    "\10\35\1\362\15\35\1\0\1\35\31\0\21\35\3\0"+
    "\7\35\1\363\16\35\1\0\1\35\31\0\21\35\3\0"+
    "\3\35\1\364\22\35\1\0\1\35\1\0\14\337\1\0"+
    "\2\337\1\340\5\337\1\341\1\337\1\304\71\337\1\0"+
    "\2\337\1\365\5\337\1\341\57\337\30\0\21\35\3\0"+
    "\15\35\1\366\10\35\1\0\1\35\31\0\21\35\3\0"+
    "\14\35\1\367\11\35\1\0\1\35\31\0\21\35\3\0"+
    "\4\35\1\370\21\35\1\0\1\35\31\0\21\35\3\0"+
    "\22\35\1\371\3\35\1\0\1\35\31\0\21\35\3\0"+
    "\21\35\1\372\4\35\1\0\1\35\31\0\21\35\3\0"+
    "\17\35\1\373\6\35\1\0\1\35\31\0\21\35\3\0"+
    "\3\35\1\374\22\35\1\0\1\35\31\0\21\35\3\0"+
    "\22\35\1\375\3\35\1\0\1\35\31\0\21\35\3\0"+
    "\4\35\1\376\21\35\1\0\1\35\31\0\21\35\3\0"+
    "\1\377\25\35\1\0\1\35\31\0\21\35\3\0\17\35"+
    "\1\u0100\6\35\1\0\1\35\31\0\21\35\3\0\16\35"+
    "\1\u0101\7\35\1\0\1\35\31\0\21\35\3\0\22\35"+
    "\1\u0102\3\35\1\0\1\35\31\0\21\35\3\0\1\u0103"+
    "\25\35\1\0\1\35\31\0\21\35\3\0\25\35\1\u0104"+
    "\1\0\1\35\31\0\21\35\3\0\4\35\1\u0105\21\35"+
    "\1\0\1\35\1\0\17\337\1\365\5\337\1\341\1\337"+
    "\1\304\55\337\30\0\21\35\3\0\17\35\1\u0106\6\35"+
    "\1\0\1\35\31\0\21\35\3\0\1\u0107\25\35\1\0"+
    "\1\35\31\0\21\35\3\0\4\35\1\u0108\21\35\1\0"+
    "\1\35\31\0\21\35\3\0\3\35\1\u0109\22\35\1\0"+
    "\1\35\31\0\21\35\3\0\20\35\1\u010a\5\35\1\0"+
    "\1\35\31\0\21\35\3\0\1\u010b\25\35\1\0\1\35"+
    "\31\0\21\35\3\0\2\35\1\u010c\23\35\1\0\1\35"+
    "\31\0\21\35\3\0\1\u010d\25\35\1\0\1\35\31\0"+
    "\21\35\3\0\17\35\1\u010e\6\35\1\0\1\35\31\0"+
    "\21\35\3\0\17\35\1\u010f\6\35\1\0\1\35\31\0"+
    "\21\35\3\0\12\35\1\u0110\13\35\1\0\1\35\31\0"+
    "\21\35\3\0\10\35\1\u0111\15\35\1\0\1\35\31\0"+
    "\21\35\3\0\17\35\1\u0112\6\35\1\0\1\35\31\0"+
    "\21\35\3\0\15\35\1\302\10\35\1\0\1\35\31\0"+
    "\21\35\3\0\17\35\1\u0113\6\35\1\0\1\35\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13662];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\2\11\2\1\3\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\24\1\3\11\6\1\1\11"+
    "\1\1\4\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\2\0\3\11\44\1\3\11\2\1\2\0\1\11\10\1"+
    "\1\0\1\11\4\1\1\0\1\11\3\1\1\0\1\11"+
    "\2\1\1\11\5\1\1\0\1\11\3\1\1\11\7\1"+
    "\4\0\10\1\1\11\4\1\1\11\3\1\1\11\7\1"+
    "\1\11\4\1\1\0\1\11\5\1\1\0\25\1\1\11"+
    "\3\1\3\0\23\1\1\0\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  
    private Symbol symbol(int type, String lexema) {
        return new Symbol(type, new Token(lexema, yyline + 1, yycolumn + 1));
    }
    private String cadena ="";

    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerPista(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
   System.out.println("LLegue al final desde flex");
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("error lexico "+ yytext());
            }
            // fall through
          case 85: break;
          case 2:
            { /* ignoramos */
            }
            // fall through
          case 86: break;
          case 3:
            { return symbol(sym.NOT,yytext());
            }
            // fall through
          case 87: break;
          case 4:
            { cadena = ""; yybegin(CADE);
            }
            // fall through
          case 88: break;
          case 5:
            { return symbol(sym.MODULO,yytext());
            }
            // fall through
          case 89: break;
          case 6:
            { return symbol(sym.PARENTESISA,yytext());
            }
            // fall through
          case 90: break;
          case 7:
            { return symbol(sym.PARENTESISC,yytext());
            }
            // fall through
          case 91: break;
          case 8:
            { return symbol(sym.POR,yytext());
            }
            // fall through
          case 92: break;
          case 9:
            { return symbol(sym.MAS,yytext());
            }
            // fall through
          case 93: break;
          case 10:
            { return symbol(sym.COMA,yytext());
            }
            // fall through
          case 94: break;
          case 11:
            { return symbol(sym.MENOS,yytext());
            }
            // fall through
          case 95: break;
          case 12:
            { return symbol(sym.DIVISION,yytext());
            }
            // fall through
          case 96: break;
          case 13:
            { return symbol(sym.NUM_ENTERO,yytext());
            }
            // fall through
          case 97: break;
          case 14:
            { return symbol(sym.DOPUNTO,yytext());
            }
            // fall through
          case 98: break;
          case 15:
            { return symbol(sym.PUNTOCOMA,yytext());
            }
            // fall through
          case 99: break;
          case 16:
            { return symbol(sym.MENORQ,yytext());
            }
            // fall through
          case 100: break;
          case 17:
            { return symbol(sym.IGUAL,yytext());
            }
            // fall through
          case 101: break;
          case 18:
            { return symbol(sym.MAYORQ,yytext());
            }
            // fall through
          case 102: break;
          case 19:
            { return symbol(sym.ID,yytext());
            }
            // fall through
          case 103: break;
          case 20:
            { return symbol(sym.CORCHETA,yytext());
            }
            // fall through
          case 104: break;
          case 21:
            { return symbol(sym.CORCHETC,yytext());
            }
            // fall through
          case 105: break;
          case 22:
            { return symbol(sym.POTENCIA,yytext());
            }
            // fall through
          case 106: break;
          case 23:
            { return symbol(sym.LLAVEA,yytext());
            }
            // fall through
          case 107: break;
          case 24:
            { return symbol(sym.LLAVEC,yytext());
            }
            // fall through
          case 108: break;
          case 25:
            { cadena+=yytext();
            }
            // fall through
          case 109: break;
          case 26:
            { yybegin(YYINITIAL); return symbol(sym.CONT_CADENA, cadena);
            }
            // fall through
          case 110: break;
          case 27:
            { return symbol(sym.ISNULO,yytext());
            }
            // fall through
          case 111: break;
          case 28:
            { return symbol(sym.NOTEQUALS,yytext());
            }
            // fall through
          case 112: break;
          case 29:
            { return symbol(sym.AND,yytext());
            }
            // fall through
          case 113: break;
          case 30:
            { return symbol(sym.ISNXORULO,yytext());
            }
            // fall through
          case 114: break;
          case 31:
            { return symbol(sym.INCREMENT,yytext());
            }
            // fall through
          case 115: break;
          case 32:
            { return symbol(sym.SUMA_IMPLICITA,yytext());
            }
            // fall through
          case 116: break;
          case 33:
            { return symbol(sym.DECREMENT,yytext());
            }
            // fall through
          case 117: break;
          case 34:
            { return symbol(sym.MENOROI,yytext());
            }
            // fall through
          case 118: break;
          case 35:
            { return symbol(sym.EQUALS,yytext());
            }
            // fall through
          case 119: break;
          case 36:
            { return symbol(sym.MAYOROI,yytext());
            }
            // fall through
          case 120: break;
          case 37:
            { /*return symbol(sym.COMMET,yytext());*/
            }
            // fall through
          case 121: break;
          case 38:
            { return symbol(sym.SI,yytext());
            }
            // fall through
          case 122: break;
          case 39:
            { return symbol(sym.OR,yytext());
            }
            // fall through
          case 123: break;
          case 40:
            { return symbol(sym.NAND,yytext());
            }
            // fall through
          case 124: break;
          case 41:
            { return symbol(sym.NOR,yytext());
            }
            // fall through
          case 125: break;
          case 42:
            { return symbol(sym.CONT_CARACTER,yytext());
            }
            // fall through
          case 126: break;
          case 43:
            { return symbol(sym.DECIMAL,yytext());
            }
            // fall through
          case 127: break;
          case 44:
            { return symbol(sym.NOTA_DO,yytext());
            }
            // fall through
          case 128: break;
          case 45:
            { return symbol(sym.NOTA_FA,yytext());
            }
            // fall through
          case 129: break;
          case 46:
            { return symbol(sym.NOTA_LA,yytext());
            }
            // fall through
          case 130: break;
          case 47:
            { return symbol(sym.NOTA_MI,yytext());
            }
            // fall through
          case 131: break;
          case 48:
            { return symbol(sym.NOTA_RE,yytext());
            }
            // fall through
          case 132: break;
          case 49:
            { return symbol(sym.NOTA_SI,yytext());
            }
            // fall through
          case 133: break;
          case 50:
            { return symbol(sym.VAR,yytext());
            }
            // fall through
          case 134: break;
          case 51:
            { return symbol(sym.CASO,yytext());
            }
            // fall through
          case 135: break;
          case 52:
            { return symbol(sym.NOTA_DO_S,yytext());
            }
            // fall through
          case 136: break;
          case 53:
            { return symbol(sym.NOTA_FA_S,yytext());
            }
            // fall through
          case 137: break;
          case 54:
            { return symbol(sym.KEEP,yytext());
            }
            // fall through
          case 138: break;
          case 55:
            { return symbol(sym.NOTA_LA_S,yytext());
            }
            // fall through
          case 139: break;
          case 56:
            { return symbol(sym.PARA,yytext());
            }
            // fall through
          case 140: break;
          case 57:
            { return symbol(sym.NOTA_RE_S,yytext());
            }
            // fall through
          case 141: break;
          case 58:
            { return symbol(sym.SINO,yytext());
            }
            // fall through
          case 142: break;
          case 59:
            { return symbol(sym.NOTA_SOL,yytext());
            }
            // fall through
          case 143: break;
          case 60:
            { return symbol(sym.VERDADERO,yytext());
            }
            // fall through
          case 144: break;
          case 61:
            { return symbol(sym.DOBLE,yytext());
            }
            // fall through
          case 145: break;
          case 62:
            { return symbol(sym.FALSO,yytext());
            }
            // fall through
          case 146: break;
          case 63:
            { return symbol(sym.HACER,yytext());
            }
            // fall through
          case 147: break;
          case 64:
            { return symbol(sym.PISTA,yytext());
            }
            // fall through
          case 148: break;
          case 65:
            { return symbol(sym.SALIR,yytext());
            }
            // fall through
          case 149: break;
          case 66:
            { return symbol(sym.NOTA_SOL_S,yytext());
            }
            // fall through
          case 150: break;
          case 67:
            { return symbol(sym.CADENA,yytext());
            }
            // fall through
          case 151: break;
          case 68:
            { return symbol(sym.ENTERO,yytext());
            }
            // fall through
          case 152: break;
          case 69:
            { return symbol(sym.SWITCH,yytext());
            }
            // fall through
          case 153: break;
          case 70:
            { return symbol(sym.ARREGLO,yytext());
            }
            // fall through
          case 154: break;
          case 71:
            { return symbol(sym.BOOLEAN,yytext());
            }
            // fall through
          case 155: break;
          case 72:
            { return symbol(sym.DEFAULT,yytext());
            }
            // fall through
          case 156: break;
          case 73:
            { return symbol(sym.ESPERAR,yytext());
            }
            // fall through
          case 157: break;
          case 74:
            { return symbol(sym.MENSAJE,yytext());
            }
            // fall through
          case 158: break;
          case 75:
            { return symbol(sym.ORDENAR,yytext());
            }
            // fall through
          case 159: break;
          case 76:
            { return symbol(sym.RETORNA,yytext());
            }
            // fall through
          case 160: break;
          case 77:
            { return symbol(sym.CARACTER,yytext());
            }
            // fall through
          case 161: break;
          case 78:
            { return symbol(sym.EXTIENDE,yytext());
            }
            // fall through
          case 162: break;
          case 79:
            { return symbol(sym.LONGITUD,yytext());
            }
            // fall through
          case 163: break;
          case 80:
            { return symbol(sym.MIENTRAS,yytext());
            }
            // fall through
          case 164: break;
          case 81:
            { return symbol(sym.CONTINUAR,yytext());
            }
            // fall through
          case 165: break;
          case 82:
            { return symbol(sym.PRINCIPAL,yytext());
            }
            // fall through
          case 166: break;
          case 83:
            { return symbol(sym.SUMARIZAR,yytext());
            }
            // fall through
          case 167: break;
          case 84:
            { return symbol(sym.REPRODUCIR,yytext());
            }
            // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
