
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.sistema.musicserver.analizadores.pista;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.sistema.musicserver.pista.Pista;
import com.sistema.musicserver.tablaSimbol.TablaSimbol;
import com.sistema.musicserver.instrucciones.declaracionAsignacion.*;
import com.sistema.musicserver.errors.*;
import com.sistema.musicserver.tablaSimbol.Variable;
import com.sistema.musicserver.instrucciones.funciones.*;
import com.sistema.musicserver.instrucciones.Instruccions;
import com.sistema.musicserver.instrucciones.bifurcaciones.*;
import com.sistema.musicserver.instrucciones.music.SentenciaReproducir;
import com.sistema.musicserver.instrucciones.declaracionAsignacion.funcionesArreglos.*;
import com.sistema.musicserver.analizadores.Token;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\342\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\006\000\002\004\004\000\002\004\005" +
    "\000\002\005\005\000\002\006\005\000\002\006\002\000" +
    "\002\007\004\000\002\007\002\000\002\007\004\000\002" +
    "\007\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\003" +
    "\000\002\011\004\000\002\012\005\000\002\014\004\000" +
    "\002\015\005\000\002\015\004\000\002\015\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\021\006\000\002\016\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\004" +
    "\000\002\017\004\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\003\000\002\017\005\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\026" +
    "\006\000\002\022\007\000\002\022\006\000\002\022\006" +
    "\000\002\022\005\000\002\025\004\000\002\025\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\023\003\000\002\023" +
    "\005\000\002\024\004\000\002\035\004\000\002\035\002" +
    "\000\002\035\004\000\002\035\004\000\002\027\003\000" +
    "\002\027\003\000\002\027\004\000\002\027\004\000\002" +
    "\027\003\000\002\027\005\000\002\027\003\000\002\027" +
    "\004\000\002\027\004\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\004\000\002\027\004\000" +
    "\002\027\003\000\002\027\004\000\002\027\003\000\002" +
    "\031\006\000\002\030\005\000\002\033\004\000\002\034" +
    "\005\000\002\034\004\000\002\034\003\000\002\032\005" +
    "\000\002\032\004\000\002\032\004\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\037\006\000\002" +
    "\040\005\000\002\040\003\000\002\040\002\000\002\063" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\045\003\000" +
    "\002\044\003\000\002\044\004\000\002\044\004\000\002" +
    "\043\011\000\002\042\006\000\002\041\004\000\002\041" +
    "\005\000\002\041\005\000\002\052\011\000\002\051\005" +
    "\000\002\051\002\000\002\050\006\000\002\050\005\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\113\004\000\002\113\002\000\002\113\004" +
    "\000\002\113\004\000\002\114\003\000\002\114\003\000" +
    "\002\114\004\000\002\114\004\000\002\114\003\000\002" +
    "\114\005\000\002\114\003\000\002\114\004\000\002\114" +
    "\004\000\002\114\003\000\002\114\003\000\002\114\003" +
    "\000\002\114\004\000\002\114\004\000\002\114\004\000" +
    "\002\114\003\000\002\056\011\000\002\055\007\000\002" +
    "\054\007\000\002\054\007\000\002\054\005\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\053\004" +
    "\000\002\053\004\000\002\057\011\000\002\060\013\000" +
    "\002\065\007\000\002\064\010\000\002\066\006\000\002" +
    "\070\011\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\071\010\000\002\100\007\000\002\100\005\000\002\077" +
    "\007\000\002\101\005\000\002\101\003\000\002\076\006" +
    "\000\002\076\004\000\002\075\005\000\002\075\003\000" +
    "\002\074\005\000\002\074\005\000\002\073\007\000\002" +
    "\073\005\000\002\072\005\000\002\072\003\000\002\102" +
    "\007\000\002\105\005\000\002\104\007\000\002\103\005" +
    "\000\002\103\003\000\002\106\010\000\002\107\005\000" +
    "\002\110\010\000\002\111\003\000\002\111\003\000\002" +
    "\111\003\000\002\111\003\000\002\111\003\000\002\112" +
    "\006\000\002\115\006\000\002\115\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b4\000\006\002\uffff\004\005\001\002\000\004\007" +
    "\021\001\002\000\004\005\011\001\002\000\004\002\010" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002\000\006\006\012\007\ufffd\001\002\000\004\005\014" +
    "\001\002\000\004\007\ufffc\001\002\000\006\007\ufff9\011" +
    "\015\001\002\000\004\005\017\001\002\000\004\007\ufffb" +
    "\001\002\000\006\007\ufff9\011\015\001\002\000\004\007" +
    "\ufffa\001\002\000\030\003\041\005\030\010\ufff7\036\043" +
    "\037\036\040\032\041\023\042\033\045\046\046\022\104" +
    "\035\001\002\000\020\005\u01ae\036\043\037\036\040\032" +
    "\041\023\042\033\045\u01ad\001\002\000\004\005\uffb4\001" +
    "\002\000\030\003\ufff1\005\ufff1\010\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\045\ufff1\046\ufff1\104\ufff1\001" +
    "\002\000\042\005\077\012\117\014\115\015\071\016\113" +
    "\017\121\020\102\021\074\047\110\056\072\075\u017c\077" +
    "\120\101\106\102\114\105\112\106\107\001\002\000\030" +
    "\003\ufff4\005\ufff4\010\ufff4\036\ufff4\037\ufff4\040\ufff4\041" +
    "\ufff4\042\ufff4\045\ufff4\046\ufff4\104\ufff4\001\002\000\030" +
    "\003\uffef\005\uffef\010\uffef\036\uffef\037\uffef\040\uffef\041" +
    "\uffef\042\uffef\045\uffef\046\uffef\104\uffef\001\002\000\006" +
    "\012\u01a3\043\u01a2\001\002\000\004\005\u0197\001\002\000" +
    "\004\005\uffb5\001\002\000\004\005\uffb3\001\002\000\004" +
    "\010\u0196\001\002\000\004\012\u0191\001\002\000\004\005" +
    "\uffb6\001\002\000\004\007\267\001\002\000\030\003\ufff2" +
    "\005\ufff2\010\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\045\ufff2\046\ufff2\104\ufff2\001\002\000\006\010\265" +
    "\044\266\001\002\000\030\003\ufff3\005\ufff3\010\ufff3\036" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\045\ufff3\046\ufff3" +
    "\104\ufff3\001\002\000\004\005\uffb7\001\002\000\030\003" +
    "\ufff0\005\ufff0\010\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\045\ufff0\046\ufff0\104\ufff0\001\002\000\030\003" +
    "\041\005\030\010\ufff7\036\043\037\036\040\032\041\023" +
    "\042\033\045\046\046\022\104\035\001\002\000\014\036" +
    "\053\037\047\040\052\041\054\042\051\001\002\000\006" +
    "\005\uffe7\076\uffe7\001\002\000\006\005\055\076\057\001" +
    "\002\000\006\005\uffe4\076\uffe4\001\002\000\006\005\uffe6" +
    "\076\uffe6\001\002\000\006\005\uffe8\076\uffe8\001\002\000" +
    "\006\005\uffe5\076\uffe5\001\002\000\010\011\065\043\067" +
    "\044\070\001\002\000\030\003\uffed\005\uffed\010\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\045\uffed\046\uffed" +
    "\104\uffed\001\002\000\004\005\060\001\002\000\006\011" +
    "\063\074\uff3a\001\002\000\004\074\062\001\002\000\042" +
    "\005\uff3c\012\uff3c\014\uff3c\015\uff3c\016\uff3c\017\uff3c\020" +
    "\uff3c\021\uff3c\047\uff3c\056\uff3c\075\uff3c\077\uff3c\101\uff3c" +
    "\102\uff3c\105\uff3c\106\uff3c\001\002\000\004\005\060\001" +
    "\002\000\004\074\uff3b\001\002\000\004\005\055\001\002" +
    "\000\030\003\uffec\005\uffec\010\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\042\uffec\045\uffec\046\uffec\104\uffec\001\002" +
    "\000\040\005\077\012\117\014\115\015\071\016\113\017" +
    "\121\020\102\021\074\047\110\056\072\077\120\101\106" +
    "\102\114\105\112\106\107\001\002\000\030\003\uffe9\005" +
    "\uffe9\010\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\045\uffe9\046\uffe9\104\uffe9\001\002\000\056\010\uffc9\011" +
    "\uffc9\013\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\044\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9" +
    "\075\uffc9\001\002\000\040\005\077\012\117\014\115\015" +
    "\071\016\113\017\121\020\102\021\074\047\110\056\072" +
    "\077\120\101\106\102\114\105\112\106\107\001\002\000" +
    "\056\010\uffc2\011\uffc2\013\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\044\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\075\uffc2\001\002\000\056\010\uffc5\011" +
    "\uffc5\013\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\044\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\075\uffc5\001\002\000\056\010\uffc1\011\uffc1\013\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\044\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\075\uffc1\001\002" +
    "\000\004\044\261\001\002\000\062\010\uffcc\011\uffcc\012" +
    "\244\013\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\044\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\074\245\075\uffcc\001\002\000\056\010\uffe2\011\uffe2\013" +
    "\uffe2\022\151\023\131\024\140\025\133\026\136\027\134" +
    "\030\144\031\137\032\146\033\141\034\143\035\142\044" +
    "\uffe2\051\132\052\147\053\135\054\130\055\145\075\uffe2" +
    "\001\002\000\056\010\uffce\011\uffce\013\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\044\uffce\051\uffce\052" +
    "\uffce\053\uffce\054\uffce\055\uffce\075\uffce\001\002\000\056" +
    "\010\uffc6\011\uffc6\013\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\044\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\075\uffc6\001\002\000\056\010\uffc3\011\uffc3" +
    "\013\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\044\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\075" +
    "\uffc3\001\002\000\056\010\uffcb\011\uffcb\013\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\044\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\055\uffcb\075\uffcb\001\002\000" +
    "\056\010\uffc4\011\uffc4\013\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\044\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\075\uffc4\001\002\000\004\012\232\001" +
    "\002\000\004\012\204\001\002\000\040\005\077\012\117" +
    "\014\115\015\071\016\113\017\121\020\102\021\074\047" +
    "\110\056\072\077\120\101\106\102\114\105\112\106\107" +
    "\001\002\000\056\010\uffc0\011\uffc0\013\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\044\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\075\uffc0\001\002\000\004" +
    "\012\200\001\002\000\056\010\uffc8\011\uffc8\013\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\044\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\075\uffc8\001\002" +
    "\000\004\012\173\001\002\000\056\010\uffca\011\uffca\013" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\044" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\075\uffca" +
    "\001\002\000\056\010\uffbf\011\uffbf\013\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\044\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\075\uffbf\001\002\000\040" +
    "\005\077\012\117\014\115\015\071\016\113\017\121\020" +
    "\102\021\074\047\110\056\072\077\120\101\106\102\114" +
    "\105\112\106\107\001\002\000\004\012\122\001\002\000" +
    "\056\010\uffc7\011\uffc7\013\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\044\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\075\uffc7\001\002\000\040\005\077\012" +
    "\117\014\115\015\071\016\113\017\121\020\102\021\074" +
    "\047\110\056\072\077\120\101\106\102\114\105\112\106" +
    "\107\001\002\000\004\011\124\001\002\000\040\005\077" +
    "\012\117\014\115\015\071\016\113\017\121\020\102\021" +
    "\074\047\110\056\072\077\120\101\106\102\114\105\112" +
    "\106\107\001\002\000\004\013\126\001\002\000\056\010" +
    "\uff3f\011\uff3f\013\uff3f\022\uff3f\023\uff3f\024\uff3f\025\uff3f" +
    "\026\uff3f\027\uff3f\030\uff3f\031\uff3f\032\uff3f\033\uff3f\034" +
    "\uff3f\035\uff3f\044\uff3f\051\uff3f\052\uff3f\053\uff3f\054\uff3f" +
    "\055\uff3f\075\uff3f\001\002\000\046\013\150\022\151\023" +
    "\131\024\140\025\133\026\136\027\134\030\144\031\137" +
    "\032\146\033\141\034\143\035\142\051\132\052\147\053" +
    "\135\054\130\055\145\001\002\000\040\005\077\012\117" +
    "\014\115\015\071\016\113\017\121\020\102\021\074\047" +
    "\110\056\072\077\120\101\106\102\114\105\112\106\107" +
    "\001\002\000\040\005\077\012\117\014\115\015\071\016" +
    "\113\017\121\020\102\021\074\047\110\056\072\077\120" +
    "\101\106\102\114\105\112\106\107\001\002\000\040\005" +
    "\077\012\117\014\115\015\071\016\113\017\121\020\102" +
    "\021\074\047\110\056\072\077\120\101\106\102\114\105" +
    "\112\106\107\001\002\000\040\005\077\012\117\014\115" +
    "\015\071\016\113\017\121\020\102\021\074\047\110\056" +
    "\072\077\120\101\106\102\114\105\112\106\107\001\002" +
    "\000\040\005\077\012\117\014\115\015\071\016\113\017" +
    "\121\020\102\021\074\047\110\056\072\077\120\101\106" +
    "\102\114\105\112\106\107\001\002\000\040\005\077\012" +
    "\117\014\115\015\071\016\113\017\121\020\102\021\074" +
    "\047\110\056\072\077\120\101\106\102\114\105\112\106" +
    "\107\001\002\000\040\005\077\012\117\014\115\015\071" +
    "\016\113\017\121\020\102\021\074\047\110\056\072\077" +
    "\120\101\106\102\114\105\112\106\107\001\002\000\040" +
    "\005\077\012\117\014\115\015\071\016\113\017\121\020" +
    "\102\021\074\047\110\056\072\077\120\101\106\102\114" +
    "\105\112\106\107\001\002\000\040\005\077\012\117\014" +
    "\115\015\071\016\113\017\121\020\102\021\074\047\110" +
    "\056\072\077\120\101\106\102\114\105\112\106\107\001" +
    "\002\000\040\005\077\012\117\014\115\015\071\016\113" +
    "\017\121\020\102\021\074\047\110\056\072\077\120\101" +
    "\106\102\114\105\112\106\107\001\002\000\040\005\077" +
    "\012\117\014\115\015\071\016\113\017\121\020\102\021" +
    "\074\047\110\056\072\077\120\101\106\102\114\105\112" +
    "\106\107\001\002\000\040\005\077\012\117\014\115\015" +
    "\071\016\113\017\121\020\102\021\074\047\110\056\072" +
    "\077\120\101\106\102\114\105\112\106\107\001\002\000" +
    "\040\005\077\012\117\014\115\015\071\016\113\017\121" +
    "\020\102\021\074\047\110\056\072\077\120\101\106\102" +
    "\114\105\112\106\107\001\002\000\040\005\077\012\117" +
    "\014\115\015\071\016\113\017\121\020\102\021\074\047" +
    "\110\056\072\077\120\101\106\102\114\105\112\106\107" +
    "\001\002\000\040\005\077\012\117\014\115\015\071\016" +
    "\113\017\121\020\102\021\074\047\110\056\072\077\120" +
    "\101\106\102\114\105\112\106\107\001\002\000\040\005" +
    "\077\012\117\014\115\015\071\016\113\017\121\020\102" +
    "\021\074\047\110\056\072\077\120\101\106\102\114\105" +
    "\112\106\107\001\002\000\056\010\uffcd\011\uffcd\013\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\044\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\075\uffcd\001" +
    "\002\000\040\005\077\012\117\014\115\015\071\016\113" +
    "\017\121\020\102\021\074\047\110\056\072\077\120\101" +
    "\106\102\114\105\112\106\107\001\002\000\056\010\uffe1" +
    "\011\uffe1\013\uffe1\022\uffe1\023\uffe1\024\140\025\133\026" +
    "\136\027\134\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\044\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055" +
    "\uffe1\075\uffe1\001\002\000\056\010\uffcf\011\uffcf\013\uffcf" +
    "\022\151\023\131\024\140\025\133\026\136\027\134\030" +
    "\144\031\137\032\146\033\141\034\143\035\142\044\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\130\055\145\075\uffcf\001" +
    "\002\000\056\010\uffd9\011\uffd9\013\uffd9\022\151\023\131" +
    "\024\140\025\133\026\136\027\134\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\044\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\075\uffd9\001\002\000\056\010" +
    "\uffd1\011\uffd1\013\uffd1\022\151\023\131\024\140\025\133" +
    "\026\136\027\134\030\144\031\137\032\146\033\141\034" +
    "\143\035\142\044\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\075\uffd1\001\002\000\056\010\uffdb\011\uffdb\013" +
    "\uffdb\022\151\023\131\024\140\025\133\026\136\027\134" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\044" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\075\uffdb" +
    "\001\002\000\056\010\uffd7\011\uffd7\013\uffd7\022\151\023" +
    "\131\024\140\025\133\026\136\027\134\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\044\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\075\uffd7\001\002\000\056" +
    "\010\uffd6\011\uffd6\013\uffd6\022\151\023\131\024\140\025" +
    "\133\026\136\027\134\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\044\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\075\uffd6\001\002\000\056\010\uffd8\011\uffd8" +
    "\013\uffd8\022\151\023\131\024\140\025\133\026\136\027" +
    "\134\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\044\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\075" +
    "\uffd8\001\002\000\056\010\uffdf\011\uffdf\013\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\134\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\044\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\054\uffdf\055\uffdf\075\uffdf\001\002\000" +
    "\056\010\uffda\011\uffda\013\uffda\022\151\023\131\024\140" +
    "\025\133\026\136\027\134\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\044\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\075\uffda\001\002\000\056\010\uffdd\011" +
    "\uffdd\013\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\134\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\044\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\075\uffdd\001\002\000\056\010\uffd0\011\uffd0\013\uffd0\022" +
    "\151\023\131\024\140\025\133\026\136\027\134\030\144" +
    "\031\137\032\146\033\141\034\143\035\142\044\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\130\055\145\075\uffd0\001\002" +
    "\000\056\010\uffdc\011\uffdc\013\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\044\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\075\uffdc\001\002\000\056\010\uffde" +
    "\011\uffde\013\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\134\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\044\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055" +
    "\uffde\075\uffde\001\002\000\056\010\uffd3\011\uffd3\013\uffd3" +
    "\022\151\023\131\024\140\025\133\026\136\027\134\030" +
    "\144\031\137\032\146\033\141\034\143\035\142\044\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\130\055\145\075\uffd3\001" +
    "\002\000\056\010\uffe0\011\uffe0\013\uffe0\022\uffe0\023\uffe0" +
    "\024\140\025\133\026\136\027\134\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\044\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\075\uffe0\001\002\000\056\010" +
    "\uffd2\011\uffd2\013\uffd2\022\151\023\131\024\140\025\133" +
    "\026\136\027\134\030\144\031\137\032\146\033\141\034" +
    "\143\035\142\044\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\075\uffd2\001\002\000\006\005\174\017\175\001" +
    "\002\000\004\013\177\001\002\000\004\013\176\001\002" +
    "\000\056\010\uff20\011\uff20\013\uff20\022\uff20\023\uff20\024" +
    "\uff20\025\uff20\026\uff20\027\uff20\030\uff20\031\uff20\032\uff20" +
    "\033\uff20\034\uff20\035\uff20\044\uff20\051\uff20\052\uff20\053" +
    "\uff20\054\uff20\055\uff20\075\uff20\001\002\000\056\010\uff21" +
    "\011\uff21\013\uff21\022\uff21\023\uff21\024\uff21\025\uff21\026" +
    "\uff21\027\uff21\030\uff21\031\uff21\032\uff21\033\uff21\034\uff21" +
    "\035\uff21\044\uff21\051\uff21\052\uff21\053\uff21\054\uff21\055" +
    "\uff21\075\uff21\001\002\000\004\005\201\001\002\000\004" +
    "\013\202\001\002\000\056\010\uff22\011\uff22\013\uff22\022" +
    "\uff22\023\uff22\024\uff22\025\uff22\026\uff22\027\uff22\030\uff22" +
    "\031\uff22\032\uff22\033\uff22\034\uff22\035\uff22\044\uff22\051" +
    "\uff22\052\uff22\053\uff22\054\uff22\055\uff22\075\uff22\001\002" +
    "\000\056\010\uffd5\011\uffd5\013\uffd5\022\151\023\131\024" +
    "\140\025\133\026\136\027\134\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\044\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\075\uffd5\001\002\000\032\062\221" +
    "\107\220\110\214\111\207\112\217\113\222\114\216\115" +
    "\205\116\211\117\210\120\215\121\212\001\002\000\004" +
    "\011\uff45\001\002\000\004\011\224\001\002\000\004\011" +
    "\uff49\001\002\000\004\011\uff43\001\002\000\004\011\uff44" +
    "\001\002\000\004\011\uff41\001\002\000\004\013\223\001" +
    "\002\000\004\011\uff4a\001\002\000\004\011\uff42\001\002" +
    "\000\004\011\uff46\001\002\000\004\011\uff48\001\002\000" +
    "\004\011\uff4b\001\002\000\004\011\uff40\001\002\000\004" +
    "\011\uff47\001\002\000\056\010\uff4d\011\uff4d\013\uff4d\022" +
    "\uff4d\023\uff4d\024\uff4d\025\uff4d\026\uff4d\027\uff4d\030\uff4d" +
    "\031\uff4d\032\uff4d\033\uff4d\034\uff4d\035\uff4d\044\uff4d\051" +
    "\uff4d\052\uff4d\053\uff4d\054\uff4d\055\uff4d\075\uff4d\001\002" +
    "\000\040\005\077\012\117\014\115\015\071\016\113\017" +
    "\121\020\102\021\074\047\110\056\072\077\120\101\106" +
    "\102\114\105\112\106\107\001\002\000\004\011\226\001" +
    "\002\000\040\005\077\012\117\014\115\015\071\016\113" +
    "\017\121\020\102\021\074\047\110\056\072\077\120\101" +
    "\106\102\114\105\112\106\107\001\002\000\004\011\230" +
    "\001\002\000\040\005\077\012\117\014\115\015\071\016" +
    "\113\017\121\020\102\021\074\047\110\056\072\077\120" +
    "\101\106\102\114\105\112\106\107\001\002\000\004\013" +
    "\uff4c\001\002\000\004\005\233\001\002\000\004\011\234" +
    "\001\002\000\014\122\236\123\241\124\235\125\242\126" +
    "\237\001\002\000\004\013\uff25\001\002\000\004\013\uff27" +
    "\001\002\000\004\013\uff23\001\002\000\004\013\243\001" +
    "\002\000\004\013\uff26\001\002\000\004\013\uff24\001\002" +
    "\000\056\010\uff28\011\uff28\013\uff28\022\uff28\023\uff28\024" +
    "\uff28\025\uff28\026\uff28\027\uff28\030\uff28\031\uff28\032\uff28" +
    "\033\uff28\034\uff28\035\uff28\044\uff28\051\uff28\052\uff28\053" +
    "\uff28\054\uff28\055\uff28\075\uff28\001\002\000\042\005\077" +
    "\012\117\013\uff8b\014\115\015\071\016\113\017\121\020" +
    "\102\021\074\047\110\056\072\077\120\101\106\102\114" +
    "\105\112\106\107\001\002\000\040\005\077\012\117\014" +
    "\115\015\071\016\113\017\121\020\102\021\074\047\110" +
    "\056\072\077\120\101\106\102\114\105\112\106\107\001" +
    "\002\000\004\075\250\001\002\000\056\010\uff29\011\uff29" +
    "\013\uff29\022\uff29\023\uff29\024\uff29\025\uff29\026\uff29\027" +
    "\uff29\030\uff29\031\uff29\032\uff29\033\uff29\034\uff29\035\uff29" +
    "\044\uff29\051\uff29\052\uff29\053\uff29\054\uff29\055\uff29\075" +
    "\uff29\001\002\000\062\010\uff38\011\uff38\013\uff38\022\uff38" +
    "\023\uff38\024\uff38\025\uff38\026\uff38\027\uff38\030\uff38\031" +
    "\uff38\032\uff38\033\uff38\034\uff38\035\uff38\043\uff38\044\uff38" +
    "\051\uff38\052\uff38\053\uff38\054\uff38\055\uff38\074\251\075" +
    "\uff38\001\002\000\040\005\077\012\117\014\115\015\071" +
    "\016\113\017\121\020\102\021\074\047\110\056\072\077" +
    "\120\101\106\102\114\105\112\106\107\001\002\000\060" +
    "\010\uff39\011\uff39\013\uff39\022\uff39\023\uff39\024\uff39\025" +
    "\uff39\026\uff39\027\uff39\030\uff39\031\uff39\032\uff39\033\uff39" +
    "\034\uff39\035\uff39\043\uff39\044\uff39\051\uff39\052\uff39\053" +
    "\uff39\054\uff39\055\uff39\075\uff39\001\002\000\006\011\uff8a" +
    "\013\uff8a\001\002\000\004\013\260\001\002\000\006\011" +
    "\256\013\uff8c\001\002\000\042\005\077\012\117\013\uff8b" +
    "\014\115\015\071\016\113\017\121\020\102\021\074\047" +
    "\110\056\072\077\120\101\106\102\114\105\112\106\107" +
    "\001\002\000\004\013\uff8d\001\002\000\056\010\uff8e\011" +
    "\uff8e\013\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e" +
    "\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035" +
    "\uff8e\044\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e" +
    "\075\uff8e\001\002\000\030\003\uffeb\005\uffeb\010\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\045\uffeb\046\uffeb" +
    "\104\uffeb\001\002\000\056\010\uffd4\011\uffd4\013\uffd4\022" +
    "\151\023\131\024\140\025\133\026\136\027\134\030\144" +
    "\031\137\032\146\033\141\034\143\035\142\044\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\075\uffd4\001\002" +
    "\000\030\003\uffea\005\uffea\010\uffea\036\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\045\uffea\046\uffea\104\uffea\001\002" +
    "\000\004\010\ufff8\001\002\000\004\010\ufff6\001\002\000" +
    "\004\010\ufff5\001\002\000\046\003\315\005\311\010\uffae" +
    "\045\330\050\303\062\275\065\320\066\313\071\325\072" +
    "\324\073\316\077\120\100\273\101\106\102\114\103\305" +
    "\105\112\106\107\001\002\000\046\003\uffa1\005\uffa1\010" +
    "\uffa1\045\uffa1\050\uffa1\062\uffa1\065\uffa1\066\uffa1\071\uffa1" +
    "\072\uffa1\073\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103" +
    "\uffa1\105\uffa1\106\uffa1\001\002\000\042\005\077\012\117" +
    "\014\115\015\071\016\113\017\121\020\102\021\074\047" +
    "\110\056\072\075\u017c\077\120\101\106\102\114\105\112" +
    "\106\107\001\002\000\046\003\uff88\005\uff88\010\uff88\045" +
    "\uff88\050\uff88\062\uff88\065\uff88\066\uff88\071\uff88\072\uff88" +
    "\073\uff88\077\uff88\100\uff88\101\uff88\102\uff88\103\uff88\105" +
    "\uff88\106\uff88\001\002\000\004\012\u0177\001\002\000\046" +
    "\003\uffa7\005\uffa7\010\uffa7\045\uffa7\050\uffa7\062\uffa7\065" +
    "\uffa7\066\uffa7\071\uffa7\072\uffa7\073\uffa7\077\uffa7\100\uffa7" +
    "\101\uffa7\102\uffa7\103\uffa7\105\uffa7\106\uffa7\001\002\000" +
    "\004\012\u0171\001\002\000\046\003\uff87\005\uff87\010\uff87" +
    "\045\uff87\050\uff87\062\uff87\065\uff87\066\uff87\071\uff87\072" +
    "\uff87\073\uff87\077\uff87\100\uff87\101\uff87\102\uff87\103\uff87" +
    "\105\uff87\106\uff87\001\002\000\004\044\u0170\001\002\000" +
    "\004\044\u016f\001\002\000\004\044\u016e\001\002\000\046" +
    "\003\uffab\005\uffab\010\uffab\045\uffab\050\uffab\062\uffab\065" +
    "\uffab\066\uffab\071\uffab\072\uffab\073\uffab\077\uffab\100\uffab" +
    "\101\uffab\102\uffab\103\uffab\105\uffab\106\uffab\001\002\000" +
    "\004\012\u0168\001\002\000\046\003\uff89\005\uff89\010\uff89" +
    "\045\uff89\050\uff89\062\uff89\065\uff89\066\uff89\071\uff89\072" +
    "\uff89\073\uff89\077\uff89\100\uff89\101\uff89\102\uff89\103\uff89" +
    "\105\uff89\106\uff89\001\002\000\046\003\uff9d\005\uff9d\010" +
    "\uff9d\045\uff9d\050\uff9d\062\uff9d\065\uff9d\066\uff9d\071\uff9d" +
    "\072\uff9d\073\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\103" +
    "\uff9d\105\uff9d\106\uff9d\001\002\000\046\003\uff85\005\uff85" +
    "\010\uff85\045\uff85\050\uff85\062\uff85\065\uff85\066\uff85\071" +
    "\uff85\072\uff85\073\uff85\077\uff85\100\uff85\101\uff85\102\uff85" +
    "\103\uff85\105\uff85\106\uff85\001\002\000\046\003\uff86\005" +
    "\uff86\010\uff86\045\uff86\050\uff86\062\uff86\065\uff86\066\uff86" +
    "\071\uff86\072\uff86\073\uff86\077\uff86\100\uff86\101\uff86\102" +
    "\uff86\103\uff86\105\uff86\106\uff86\001\002\000\004\044\u0167" +
    "\001\002\000\016\012\244\043\u0159\057\u015c\060\u015a\061" +
    "\u0158\074\u015b\001\002\000\004\010\u0157\001\002\000\046" +
    "\003\uff9b\005\uff9b\010\uff9b\045\uff9b\050\uff9b\062\uff9b\065" +
    "\uff9b\066\uff9b\071\uff9b\072\uff9b\073\uff9b\077\uff9b\100\uff9b" +
    "\101\uff9b\102\uff9b\103\uff9b\105\uff9b\106\uff9b\001\002\000" +
    "\050\003\uff83\005\uff83\010\uff83\045\uff83\050\uff83\062\uff83" +
    "\063\u014f\065\uff83\066\uff83\071\uff83\072\uff83\073\uff83\077" +
    "\uff83\100\uff83\101\uff83\102\uff83\103\uff83\105\uff83\106\uff83" +
    "\001\002\000\006\010\u014c\044\u014d\001\002\000\040\005" +
    "\077\012\117\014\115\015\071\016\113\017\121\020\102" +
    "\021\074\047\110\056\072\077\120\101\106\102\114\105" +
    "\112\106\107\001\002\000\046\003\uffa0\005\uffa0\010\uffa0" +
    "\045\uffa0\050\uffa0\062\uffa0\065\uffa0\066\uffa0\071\uffa0\072" +
    "\uffa0\073\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0" +
    "\105\uffa0\106\uffa0\001\002\000\004\012\u0115\001\002\000" +
    "\046\003\uffa5\005\uffa5\010\uffa5\045\uffa5\050\uffa5\062\uffa5" +
    "\065\uffa5\066\uffa5\071\uffa5\072\uffa5\073\uffa5\077\uffa5\100" +
    "\uffa5\101\uffa5\102\uffa5\103\uffa5\105\uffa5\106\uffa5\001\002" +
    "\000\046\003\uffaa\005\uffaa\010\uffaa\045\uffaa\050\uffaa\062" +
    "\uffaa\065\uffaa\066\uffaa\071\uffaa\072\uffaa\073\uffaa\077\uffaa" +
    "\100\uffaa\101\uffaa\102\uffaa\103\uffaa\105\uffaa\106\uffaa\001" +
    "\002\000\046\003\315\005\311\010\uffae\045\330\050\303" +
    "\062\275\065\320\066\313\071\325\072\324\073\316\077" +
    "\120\100\273\101\106\102\114\103\305\105\112\106\107" +
    "\001\002\000\004\007\u010c\001\002\000\004\012\356\001" +
    "\002\000\004\044\355\001\002\000\046\003\uffa2\005\uffa2" +
    "\010\uffa2\045\uffa2\050\uffa2\062\uffa2\065\uffa2\066\uffa2\071" +
    "\uffa2\072\uffa2\073\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2" +
    "\103\uffa2\105\uffa2\106\uffa2\001\002\000\014\036\053\037" +
    "\047\040\052\041\054\042\051\001\002\000\004\044\334" +
    "\001\002\000\004\044\333\001\002\000\046\003\uffa3\005" +
    "\uffa3\010\uffa3\045\uffa3\050\uffa3\062\uffa3\065\uffa3\066\uffa3" +
    "\071\uffa3\072\uffa3\073\uffa3\077\uffa3\100\uffa3\101\uffa3\102" +
    "\uffa3\103\uffa3\105\uffa3\106\uffa3\001\002\000\046\003\uff9c" +
    "\005\uff9c\010\uff9c\045\uff9c\050\uff9c\062\uff9c\065\uff9c\066" +
    "\uff9c\071\uff9c\072\uff9c\073\uff9c\077\uff9c\100\uff9c\101\uff9c" +
    "\102\uff9c\103\uff9c\105\uff9c\106\uff9c\001\002\000\006\005" +
    "\336\076\340\001\002\000\010\011\346\043\347\044\351" +
    "\001\002\000\046\003\uff99\005\uff99\010\uff99\045\uff99\050" +
    "\uff99\062\uff99\065\uff99\066\uff99\071\uff99\072\uff99\073\uff99" +
    "\077\uff99\100\uff99\101\uff99\102\uff99\103\uff99\105\uff99\106" +
    "\uff99\001\002\000\004\005\341\001\002\000\006\011\344" +
    "\074\uff2b\001\002\000\004\074\343\001\002\000\042\005" +
    "\uff2d\012\uff2d\014\uff2d\015\uff2d\016\uff2d\017\uff2d\020\uff2d" +
    "\021\uff2d\047\uff2d\056\uff2d\075\uff2d\077\uff2d\101\uff2d\102" +
    "\uff2d\105\uff2d\106\uff2d\001\002\000\004\005\060\001\002" +
    "\000\004\074\uff2c\001\002\000\004\005\336\001\002\000" +
    "\040\005\077\012\117\014\115\015\071\016\113\017\121" +
    "\020\102\021\074\047\110\056\072\077\120\101\106\102" +
    "\114\105\112\106\107\001\002\000\046\003\uff98\005\uff98" +
    "\010\uff98\045\uff98\050\uff98\062\uff98\065\uff98\066\uff98\071" +
    "\uff98\072\uff98\073\uff98\077\uff98\100\uff98\101\uff98\102\uff98" +
    "\103\uff98\105\uff98\106\uff98\001\002\000\046\003\uff95\005" +
    "\uff95\010\uff95\045\uff95\050\uff95\062\uff95\065\uff95\066\uff95" +
    "\071\uff95\072\uff95\073\uff95\077\uff95\100\uff95\101\uff95\102" +
    "\uff95\103\uff95\105\uff95\106\uff95\001\002\000\004\044\353" +
    "\001\002\000\046\003\uff97\005\uff97\010\uff97\045\uff97\050" +
    "\uff97\062\uff97\065\uff97\066\uff97\071\uff97\072\uff97\073\uff97" +
    "\077\uff97\100\uff97\101\uff97\102\uff97\103\uff97\105\uff97\106" +
    "\uff97\001\002\000\046\003\uff96\005\uff96\010\uff96\045\uff96" +
    "\050\uff96\062\uff96\065\uff96\066\uff96\071\uff96\072\uff96\073" +
    "\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103\uff96\105\uff96" +
    "\106\uff96\001\002\000\046\003\uffa9\005\uffa9\010\uffa9\045" +
    "\uffa9\050\uffa9\062\uffa9\065\uffa9\066\uffa9\071\uffa9\072\uffa9" +
    "\073\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\105" +
    "\uffa9\106\uffa9\001\002\000\006\005\360\045\357\001\002" +
    "\000\006\036\u0105\037\u0104\001\002\000\004\043\377\001" +
    "\002\000\004\013\373\001\002\000\004\044\363\001\002" +
    "\000\040\005\077\012\117\014\115\015\071\016\113\017" +
    "\121\020\102\021\074\047\110\056\072\077\120\101\106" +
    "\102\114\105\112\106\107\001\002\000\050\013\uff84\022" +
    "\151\023\131\024\140\025\133\026\136\027\134\030\144" +
    "\031\137\032\146\033\141\034\143\035\142\044\uff84\051" +
    "\132\052\147\053\135\054\130\055\145\001\002\000\004" +
    "\044\366\001\002\000\004\005\367\001\002\000\006\060" +
    "\372\061\371\001\002\000\004\013\uff5a\001\002\000\004" +
    "\013\uff52\001\002\000\004\013\uff53\001\002\000\004\007" +
    "\374\001\002\000\046\003\315\005\311\010\uffae\045\330" +
    "\050\303\062\275\065\320\066\313\071\325\072\324\073" +
    "\316\077\120\100\273\101\106\102\114\103\305\105\112" +
    "\106\107\001\002\000\004\010\376\001\002\000\046\003" +
    "\uff5b\005\uff5b\010\uff5b\045\uff5b\050\uff5b\062\uff5b\065\uff5b" +
    "\066\uff5b\071\uff5b\072\uff5b\073\uff5b\077\uff5b\100\uff5b\101" +
    "\uff5b\102\uff5b\103\uff5b\105\uff5b\106\uff5b\001\002\000\010" +
    "\005\u0100\014\u0101\015\u0103\001\002\000\004\044\uff56\001" +
    "\002\000\004\044\uff55\001\002\000\004\044\uff57\001\002" +
    "\000\004\044\uff54\001\002\000\004\005\u0109\001\002\000" +
    "\004\005\u0106\001\002\000\004\043\u0107\001\002\000\010" +
    "\005\u0100\014\u0101\015\u0103\001\002\000\004\044\uff59\001" +
    "\002\000\004\043\u010a\001\002\000\010\005\u0100\014\u0101" +
    "\015\u0103\001\002\000\004\044\uff58\001\002\000\046\003" +
    "\315\005\311\010\uffae\045\330\050\303\062\275\065\320" +
    "\066\313\071\325\072\324\073\316\077\120\100\273\101" +
    "\106\102\114\103\305\105\112\106\107\001\002\000\004" +
    "\010\u010e\001\002\000\004\050\u010f\001\002\000\004\012" +
    "\u0110\001\002\000\040\005\077\012\117\014\115\015\071" +
    "\016\113\017\121\020\102\021\074\047\110\056\072\077" +
    "\120\101\106\102\114\105\112\106\107\001\002\000\004" +
    "\013\u0112\001\002\000\004\044\u0113\001\002\000\046\003" +
    "\uff50\005\uff50\010\uff50\045\uff50\050\uff50\062\uff50\065\uff50" +
    "\066\uff50\071\uff50\072\uff50\073\uff50\077\uff50\100\uff50\101" +
    "\uff50\102\uff50\103\uff50\105\uff50\106\uff50\001\002\000\004" +
    "\010\uffaf\001\002\000\004\005\u0116\001\002\000\004\013" +
    "\u0117\001\002\000\004\007\u0118\001\002\000\010\010\uff79" +
    "\067\u011c\070\u0119\001\002\000\004\064\u0148\001\002\000" +
    "\004\010\u0147\001\002\000\004\066\u0145\001\002\000\020" +
    "\005\u011d\014\u0120\015\u0124\016\u011e\017\u0123\020\u0121\021" +
    "\u0122\001\002\000\004\064\uff76\001\002\000\004\064\uff73" +
    "\001\002\000\004\064\u0125\001\002\000\004\064\uff75\001" +
    "\002\000\004\064\uff71\001\002\000\004\064\uff70\001\002" +
    "\000\004\064\uff72\001\002\000\004\064\uff74\001\002\000" +
    "\044\003\u012f\005\311\045\330\050\303\062\275\065\320" +
    "\066\uff6e\071\325\072\324\073\u0130\077\120\100\273\101" +
    "\106\102\114\103\u012d\105\112\106\107\001\002\000\044" +
    "\003\uff61\005\uff61\045\uff61\050\uff61\062\uff61\065\uff61\066" +
    "\uff61\071\uff61\072\uff61\073\uff61\077\uff61\100\uff61\101\uff61" +
    "\102\uff61\103\uff61\105\uff61\106\uff61\001\002\000\004\066" +
    "\uff78\001\002\000\044\003\uff67\005\uff67\045\uff67\050\uff67" +
    "\062\uff67\065\uff67\066\uff67\071\uff67\072\uff67\073\uff67\077" +
    "\uff67\100\uff67\101\uff67\102\uff67\103\uff67\105\uff67\106\uff67" +
    "\001\002\000\004\044\u0144\001\002\000\004\044\u0143\001" +
    "\002\000\004\044\u0142\001\002\000\044\003\uff6b\005\uff6b" +
    "\045\uff6b\050\uff6b\062\uff6b\065\uff6b\066\uff6b\071\uff6b\072" +
    "\uff6b\073\uff6b\077\uff6b\100\uff6b\101\uff6b\102\uff6b\103\uff6b" +
    "\105\uff6b\106\uff6b\001\002\000\044\003\uff5c\005\uff5c\045" +
    "\uff5c\050\uff5c\062\uff5c\065\uff5c\066\uff5c\071\uff5c\072\uff5c" +
    "\073\uff5c\077\uff5c\100\uff5c\101\uff5c\102\uff5c\103\uff5c\105" +
    "\uff5c\106\uff5c\001\002\000\004\044\u0141\001\002\000\006" +
    "\010\u013f\044\u0140\001\002\000\040\005\077\012\117\014" +
    "\115\015\071\016\113\017\121\020\102\021\074\047\110" +
    "\056\072\077\120\101\106\102\114\105\112\106\107\001" +
    "\002\000\044\003\uff60\005\uff60\045\uff60\050\uff60\062\uff60" +
    "\065\uff60\066\uff60\071\uff60\072\uff60\073\uff60\077\uff60\100" +
    "\uff60\101\uff60\102\uff60\103\uff60\105\uff60\106\uff60\001\002" +
    "\000\044\003\uff65\005\uff65\045\uff65\050\uff65\062\uff65\065" +
    "\uff65\066\uff65\071\uff65\072\uff65\073\uff65\077\uff65\100\uff65" +
    "\101\uff65\102\uff65\103\uff65\105\uff65\106\uff65\001\002\000" +
    "\044\003\uff6a\005\uff6a\045\uff6a\050\uff6a\062\uff6a\065\uff6a" +
    "\066\uff6a\071\uff6a\072\uff6a\073\uff6a\077\uff6a\100\uff6a\101" +
    "\uff6a\102\uff6a\103\uff6a\105\uff6a\106\uff6a\001\002\000\004" +
    "\044\u013c\001\002\000\044\003\u012f\005\311\045\330\050" +
    "\303\062\275\065\320\066\uff6e\071\325\072\324\073\u0130" +
    "\077\120\100\273\101\106\102\114\103\u012d\105\112\106" +
    "\107\001\002\000\044\003\uff62\005\uff62\045\uff62\050\uff62" +
    "\062\uff62\065\uff62\066\uff62\071\uff62\072\uff62\073\uff62\077" +
    "\uff62\100\uff62\101\uff62\102\uff62\103\uff62\105\uff62\106\uff62" +
    "\001\002\000\004\044\u013a\001\002\000\004\044\u0139\001" +
    "\002\000\044\003\uff63\005\uff63\045\uff63\050\uff63\062\uff63" +
    "\065\uff63\066\uff63\071\uff63\072\uff63\073\uff63\077\uff63\100" +
    "\uff63\101\uff63\102\uff63\103\uff63\105\uff63\106\uff63\001\002" +
    "\000\044\003\uff5d\005\uff5d\045\uff5d\050\uff5d\062\uff5d\065" +
    "\uff5d\066\uff5d\071\uff5d\072\uff5d\073\uff5d\077\uff5d\100\uff5d" +
    "\101\uff5d\102\uff5d\103\uff5d\105\uff5d\106\uff5d\001\002\000" +
    "\004\066\uff6f\001\002\000\044\003\uff69\005\uff69\045\uff69" +
    "\050\uff69\062\uff69\065\uff69\066\uff69\071\uff69\072\uff69\073" +
    "\uff69\077\uff69\100\uff69\101\uff69\102\uff69\103\uff69\105\uff69" +
    "\106\uff69\001\002\000\004\044\u013e\001\002\000\044\003" +
    "\uff66\005\uff66\045\uff66\050\uff66\062\uff66\065\uff66\066\uff66" +
    "\071\uff66\072\uff66\073\uff66\077\uff66\100\uff66\101\uff66\102" +
    "\uff66\103\uff66\105\uff66\106\uff66\001\002\000\004\066\uff6d" +
    "\001\002\000\004\066\uff6c\001\002\000\044\003\uff64\005" +
    "\uff64\045\uff64\050\uff64\062\uff64\065\uff64\066\uff64\071\uff64" +
    "\072\uff64\073\uff64\077\uff64\100\uff64\101\uff64\102\uff64\103" +
    "\uff64\105\uff64\106\uff64\001\002\000\044\003\uff5f\005\uff5f" +
    "\045\uff5f\050\uff5f\062\uff5f\065\uff5f\066\uff5f\071\uff5f\072" +
    "\uff5f\073\uff5f\077\uff5f\100\uff5f\101\uff5f\102\uff5f\103\uff5f" +
    "\105\uff5f\106\uff5f\001\002\000\044\003\uff5e\005\uff5e\045" +
    "\uff5e\050\uff5e\062\uff5e\065\uff5e\066\uff5e\071\uff5e\072\uff5e" +
    "\073\uff5e\077\uff5e\100\uff5e\101\uff5e\102\uff5e\103\uff5e\105" +
    "\uff5e\106\uff5e\001\002\000\044\003\uff68\005\uff68\045\uff68" +
    "\050\uff68\062\uff68\065\uff68\066\uff68\071\uff68\072\uff68\073" +
    "\uff68\077\uff68\100\uff68\101\uff68\102\uff68\103\uff68\105\uff68" +
    "\106\uff68\001\002\000\010\010\uff79\067\u011c\070\u0119\001" +
    "\002\000\004\010\uff7a\001\002\000\046\003\uff7b\005\uff7b" +
    "\010\uff7b\045\uff7b\050\uff7b\062\uff7b\065\uff7b\066\uff7b\071" +
    "\uff7b\072\uff7b\073\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b" +
    "\103\uff7b\105\uff7b\106\uff7b\001\002\000\044\003\u012f\005" +
    "\311\045\330\050\303\062\275\065\320\066\uff6e\071\325" +
    "\072\324\073\u0130\077\120\100\273\101\106\102\114\103" +
    "\u012d\105\112\106\107\001\002\000\004\066\uff77\001\002" +
    "\000\004\044\u014b\001\002\000\046\003\uffa6\005\uffa6\010" +
    "\uffa6\045\uffa6\050\uffa6\062\uffa6\065\uffa6\066\uffa6\071\uffa6" +
    "\072\uffa6\073\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103" +
    "\uffa6\105\uffa6\106\uffa6\001\002\000\004\010\uffad\001\002" +
    "\000\004\010\uffac\001\002\000\046\003\uff82\005\uff82\010" +
    "\uff82\045\uff82\050\uff82\062\uff82\065\uff82\066\uff82\071\uff82" +
    "\072\uff82\073\uff82\077\uff82\100\uff82\101\uff82\102\uff82\103" +
    "\uff82\105\uff82\106\uff82\001\002\000\006\007\u0151\062\275" +
    "\001\002\000\046\003\uff81\005\uff81\010\uff81\045\uff81\050" +
    "\uff81\062\uff81\065\uff81\066\uff81\071\uff81\072\uff81\073\uff81" +
    "\077\uff81\100\uff81\101\uff81\102\uff81\103\uff81\105\uff81\106" +
    "\uff81\001\002\000\046\003\315\005\311\010\uffae\045\330" +
    "\050\303\062\275\065\320\066\313\071\325\072\324\073" +
    "\316\077\120\100\273\101\106\102\114\103\305\105\112" +
    "\106\107\001\002\000\050\003\uff7e\005\uff7e\010\uff7e\045" +
    "\uff7e\050\uff7e\062\uff7e\063\u014f\065\uff7e\066\uff7e\071\uff7e" +
    "\072\uff7e\073\uff7e\077\uff7e\100\uff7e\101\uff7e\102\uff7e\103" +
    "\uff7e\105\uff7e\106\uff7e\001\002\000\046\003\uff7d\005\uff7d" +
    "\010\uff7d\045\uff7d\050\uff7d\062\uff7d\065\uff7d\066\uff7d\071" +
    "\uff7d\072\uff7d\073\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d" +
    "\103\uff7d\105\uff7d\106\uff7d\001\002\000\046\003\uff7c\005" +
    "\uff7c\010\uff7c\045\uff7c\050\uff7c\062\uff7c\065\uff7c\066\uff7c" +
    "\071\uff7c\072\uff7c\073\uff7c\077\uff7c\100\uff7c\101\uff7c\102" +
    "\uff7c\103\uff7c\105\uff7c\106\uff7c\001\002\000\004\010\u0156" +
    "\001\002\000\046\003\uff7f\005\uff7f\010\uff7f\045\uff7f\050" +
    "\uff7f\062\uff7f\065\uff7f\066\uff7f\071\uff7f\072\uff7f\073\uff7f" +
    "\077\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f\105\uff7f\106" +
    "\uff7f\001\002\000\030\003\uffbe\005\uffbe\010\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\045\uffbe\046\uffbe\104" +
    "\uffbe\001\002\000\004\044\uff92\001\002\000\040\005\077" +
    "\012\117\014\115\015\071\016\113\017\121\020\102\021" +
    "\074\047\110\056\072\077\120\101\106\102\114\105\112" +
    "\106\107\001\002\000\004\044\uff93\001\002\000\040\005" +
    "\077\012\117\014\115\015\071\016\113\017\121\020\102" +
    "\021\074\047\110\056\072\077\120\101\106\102\114\105" +
    "\112\106\107\001\002\000\010\005\u015d\014\u015e\015\u0160" +
    "\001\002\000\004\044\uff91\001\002\000\004\044\uff90\001" +
    "\002\000\004\044\uff94\001\002\000\004\044\uff8f\001\002" +
    "\000\004\043\u0162\001\002\000\040\005\077\012\117\014" +
    "\115\015\071\016\113\017\121\020\102\021\074\047\110" +
    "\056\072\077\120\101\106\102\114\105\112\106\107\001" +
    "\002\000\004\044\u0164\001\002\000\046\003\uff2a\005\uff2a" +
    "\010\uff2a\045\uff2a\050\uff2a\062\uff2a\065\uff2a\066\uff2a\071" +
    "\uff2a\072\uff2a\073\uff2a\077\uff2a\100\uff2a\101\uff2a\102\uff2a" +
    "\103\uff2a\105\uff2a\106\uff2a\001\002\000\004\044\u0166\001" +
    "\002\000\046\003\uff9a\005\uff9a\010\uff9a\045\uff9a\050\uff9a" +
    "\062\uff9a\065\uff9a\066\uff9a\071\uff9a\072\uff9a\073\uff9a\077" +
    "\uff9a\100\uff9a\101\uff9a\102\uff9a\103\uff9a\105\uff9a\106\uff9a" +
    "\001\002\000\046\003\uffa4\005\uffa4\010\uffa4\045\uffa4\050" +
    "\uffa4\062\uffa4\065\uffa4\066\uffa4\071\uffa4\072\uffa4\073\uffa4" +
    "\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\105\uffa4\106" +
    "\uffa4\001\002\000\040\005\077\012\117\014\115\015\071" +
    "\016\113\017\121\020\102\021\074\047\110\056\072\077" +
    "\120\101\106\102\114\105\112\106\107\001\002\000\004" +
    "\013\u016a\001\002\000\004\007\u016b\001\002\000\046\003" +
    "\315\005\311\010\uffae\045\330\050\303\062\275\065\320" +
    "\066\313\071\325\072\324\073\316\077\120\100\273\101" +
    "\106\102\114\103\305\105\112\106\107\001\002\000\004" +
    "\010\u016d\001\002\000\046\003\uff51\005\uff51\010\uff51\045" +
    "\uff51\050\uff51\062\uff51\065\uff51\066\uff51\071\uff51\072\uff51" +
    "\073\uff51\077\uff51\100\uff51\101\uff51\102\uff51\103\uff51\105" +
    "\uff51\106\uff51\001\002\000\046\003\uff9f\005\uff9f\010\uff9f" +
    "\045\uff9f\050\uff9f\062\uff9f\065\uff9f\066\uff9f\071\uff9f\072" +
    "\uff9f\073\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f" +
    "\105\uff9f\106\uff9f\001\002\000\046\003\uff9e\005\uff9e\010" +
    "\uff9e\045\uff9e\050\uff9e\062\uff9e\065\uff9e\066\uff9e\071\uff9e" +
    "\072\uff9e\073\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103" +
    "\uff9e\105\uff9e\106\uff9e\001\002\000\046\003\uffa8\005\uffa8" +
    "\010\uffa8\045\uffa8\050\uffa8\062\uffa8\065\uffa8\066\uffa8\071" +
    "\uffa8\072\uffa8\073\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8" +
    "\103\uffa8\105\uffa8\106\uffa8\001\002\000\040\005\077\012" +
    "\117\014\115\015\071\016\113\017\121\020\102\021\074" +
    "\047\110\056\072\077\120\101\106\102\114\105\112\106" +
    "\107\001\002\000\004\013\u0173\001\002\000\004\007\u0174" +
    "\001\002\000\046\003\315\005\311\010\uffae\045\330\050" +
    "\303\062\275\065\320\066\313\071\325\072\324\073\316" +
    "\077\120\100\273\101\106\102\114\103\305\105\112\106" +
    "\107\001\002\000\004\010\u0176\001\002\000\050\003\uff80" +
    "\005\uff80\010\uff80\045\uff80\050\uff80\062\uff80\063\uff80\065" +
    "\uff80\066\uff80\071\uff80\072\uff80\073\uff80\077\uff80\100\uff80" +
    "\101\uff80\102\uff80\103\uff80\105\uff80\106\uff80\001\002\000" +
    "\040\005\077\012\117\014\115\015\071\016\113\017\121" +
    "\020\102\021\074\047\110\056\072\077\120\101\106\102" +
    "\114\105\112\106\107\001\002\000\004\013\u0179\001\002" +
    "\000\004\044\u017a\001\002\000\046\003\uff4f\005\uff4f\010" +
    "\uff4f\045\uff4f\050\uff4f\062\uff4f\065\uff4f\066\uff4f\071\uff4f" +
    "\072\uff4f\073\uff4f\077\uff4f\100\uff4f\101\uff4f\102\uff4f\103" +
    "\uff4f\105\uff4f\106\uff4f\001\002\000\004\043\u0181\001\002" +
    "\000\006\043\uff36\074\u017f\001\002\000\004\044\u017e\001" +
    "\002\000\046\003\uff2e\005\uff2e\010\uff2e\045\uff2e\050\uff2e" +
    "\062\uff2e\065\uff2e\066\uff2e\071\uff2e\072\uff2e\073\uff2e\077" +
    "\uff2e\100\uff2e\101\uff2e\102\uff2e\103\uff2e\105\uff2e\106\uff2e" +
    "\001\002\000\004\075\u017c\001\002\000\004\043\uff37\001" +
    "\002\000\004\007\u0182\001\002\000\042\005\077\007\u0186" +
    "\012\117\014\115\015\071\016\113\017\121\020\102\021" +
    "\074\047\110\056\072\077\120\101\106\102\114\105\112" +
    "\106\107\001\002\000\004\044\u0184\001\002\000\046\003" +
    "\uff2f\005\uff2f\010\uff2f\045\uff2f\050\uff2f\062\uff2f\065\uff2f" +
    "\066\uff2f\071\uff2f\072\uff2f\073\uff2f\077\uff2f\100\uff2f\101" +
    "\uff2f\102\uff2f\103\uff2f\105\uff2f\106\uff2f\001\002\000\004" +
    "\010\u0190\001\002\000\040\005\077\012\117\014\115\015" +
    "\071\016\113\017\121\020\102\021\074\047\110\056\072" +
    "\077\120\101\106\102\114\105\112\106\107\001\002\000" +
    "\006\010\uff30\011\u018a\001\002\000\004\010\u0189\001\002" +
    "\000\004\044\uff34\001\002\000\040\005\077\012\117\014" +
    "\115\015\071\016\113\017\121\020\102\021\074\047\110" +
    "\056\072\077\120\101\106\102\114\105\112\106\107\001" +
    "\002\000\004\010\uff31\001\002\000\004\010\u018d\001\002" +
    "\000\006\010\uff32\011\u018e\001\002\000\004\007\u0186\001" +
    "\002\000\004\010\uff33\001\002\000\004\044\uff35\001\002" +
    "\000\004\013\u0192\001\002\000\004\007\u0193\001\002\000" +
    "\046\003\315\005\311\010\uffae\045\330\050\303\062\275" +
    "\065\320\066\313\071\325\072\324\073\316\077\120\100" +
    "\273\101\106\102\114\103\305\105\112\106\107\001\002" +
    "\000\004\010\u0195\001\002\000\030\003\uff4e\005\uff4e\010" +
    "\uff4e\036\uff4e\037\uff4e\040\uff4e\041\uff4e\042\uff4e\045\uff4e" +
    "\046\uff4e\104\uff4e\001\002\000\004\002\ufffe\001\002\000" +
    "\004\012\u0198\001\002\000\016\013\u0199\036\053\037\047" +
    "\040\052\041\054\042\051\001\002\000\004\007\uffb8\001" +
    "\002\000\006\011\u01a0\013\uffb2\001\002\000\004\013\u019f" +
    "\001\002\000\004\005\u019e\001\002\000\004\007\uffbb\001" +
    "\002\000\006\011\uffb0\013\uffb0\001\002\000\004\007\uffb9" +
    "\001\002\000\014\036\053\037\047\040\052\041\054\042" +
    "\051\001\002\000\004\013\uffb1\001\002\000\040\005\077" +
    "\012\117\014\115\015\071\016\113\017\121\020\102\021" +
    "\074\047\110\056\072\077\120\101\106\102\114\105\112" +
    "\106\107\001\002\000\016\013\u0199\036\053\037\047\040" +
    "\052\041\054\042\051\001\002\000\004\007\uffba\001\002" +
    "\000\004\044\u01a6\001\002\000\030\003\uffe3\005\uffe3\010" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\045\uffe3" +
    "\046\uffe3\104\uffe3\001\002\000\004\043\u01aa\001\002\000" +
    "\004\044\u01a9\001\002\000\030\003\uff3d\005\uff3d\010\uff3d" +
    "\036\uff3d\037\uff3d\040\uff3d\041\uff3d\042\uff3d\045\uff3d\046" +
    "\uff3d\104\uff3d\001\002\000\004\007\u0182\001\002\000\004" +
    "\044\u01ac\001\002\000\030\003\uff3e\005\uff3e\010\uff3e\036" +
    "\uff3e\037\uff3e\040\uff3e\041\uff3e\042\uff3e\045\uff3e\046\uff3e" +
    "\104\uff3e\001\002\000\014\036\053\037\047\040\052\041" +
    "\054\042\051\001\002\000\004\012\u01b4\001\002\000\004" +
    "\005\u01b1\001\002\000\030\003\uffee\005\uffee\010\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\042\uffee\045\uffee\046\uffee" +
    "\104\uffee\001\002\000\004\012\u01b2\001\002\000\016\013" +
    "\u0199\036\053\037\047\040\052\041\054\042\051\001\002" +
    "\000\004\007\uffbd\001\002\000\016\013\u0199\036\053\037" +
    "\047\040\052\041\054\042\051\001\002\000\004\007\uffbc" +
    "\001\002\000\004\005\055\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b4\000\010\002\005\003\006\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\017\001" +
    "\001\000\002\001\001\000\030\007\033\010\044\011\025" +
    "\012\026\021\041\022\036\026\037\061\030\064\023\077" +
    "\024\100\043\001\001\000\006\012\u01af\061\u01ae\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\016\245\017" +
    "\077\020\100\037\103\066\102\071\072\075\u01a6\076\u01a7" +
    "\107\104\110\074\112\110\115\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\263\010\044\011\025" +
    "\012\026\021\041\022\036\026\037\061\030\064\023\077" +
    "\024\100\043\001\001\000\004\013\047\001\001\000\002" +
    "\001\001\000\004\014\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\065\001\001\000\002\001\001\000\004\101\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\063\001\001\000\002\001\001\000\004\014" +
    "\262\001\001\000\002\001\001\000\026\016\075\017\077" +
    "\020\100\037\103\066\102\071\072\107\104\110\074\112" +
    "\110\115\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\017\261\020\100\037\103\066\102\071\072\107" +
    "\104\110\074\112\110\115\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\017\202" +
    "\020\100\037\103\066\102\071\072\107\104\110\074\112" +
    "\110\115\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\017\126\020\100\037\103\066\102" +
    "\071\072\107\104\110\074\112\110\115\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\016\122\017\077" +
    "\020\100\037\103\066\102\071\072\107\104\110\074\112" +
    "\110\115\115\001\001\000\002\001\001\000\026\016\124" +
    "\017\077\020\100\037\103\066\102\071\072\107\104\110" +
    "\074\112\110\115\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\017\171\020\100\037" +
    "\103\066\102\071\072\107\104\110\074\112\110\115\115" +
    "\001\001\000\024\017\170\020\100\037\103\066\102\071" +
    "\072\107\104\110\074\112\110\115\115\001\001\000\024" +
    "\017\167\020\100\037\103\066\102\071\072\107\104\110" +
    "\074\112\110\115\115\001\001\000\024\017\166\020\100" +
    "\037\103\066\102\071\072\107\104\110\074\112\110\115" +
    "\115\001\001\000\024\017\165\020\100\037\103\066\102" +
    "\071\072\107\104\110\074\112\110\115\115\001\001\000" +
    "\024\017\164\020\100\037\103\066\102\071\072\107\104" +
    "\110\074\112\110\115\115\001\001\000\024\017\163\020" +
    "\100\037\103\066\102\071\072\107\104\110\074\112\110" +
    "\115\115\001\001\000\024\017\162\020\100\037\103\066" +
    "\102\071\072\107\104\110\074\112\110\115\115\001\001" +
    "\000\024\017\161\020\100\037\103\066\102\071\072\107" +
    "\104\110\074\112\110\115\115\001\001\000\024\017\160" +
    "\020\100\037\103\066\102\071\072\107\104\110\074\112" +
    "\110\115\115\001\001\000\024\017\157\020\100\037\103" +
    "\066\102\071\072\107\104\110\074\112\110\115\115\001" +
    "\001\000\024\017\156\020\100\037\103\066\102\071\072" +
    "\107\104\110\074\112\110\115\115\001\001\000\024\017" +
    "\155\020\100\037\103\066\102\071\072\107\104\110\074" +
    "\112\110\115\115\001\001\000\024\017\154\020\100\037" +
    "\103\066\102\071\072\107\104\110\074\112\110\115\115" +
    "\001\001\000\024\017\153\020\100\037\103\066\102\071" +
    "\072\107\104\110\074\112\110\115\115\001\001\000\024" +
    "\017\152\020\100\037\103\066\102\071\072\107\104\110" +
    "\074\112\110\115\115\001\001\000\002\001\001\000\024" +
    "\017\151\020\100\037\103\066\102\071\072\107\104\110" +
    "\074\112\110\115\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\067\205\070\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\016" +
    "\224\017\077\020\100\037\103\066\102\071\072\107\104" +
    "\110\074\112\110\115\115\001\001\000\002\001\001\000" +
    "\026\016\226\017\077\020\100\037\103\066\102\071\072" +
    "\107\104\110\074\112\110\115\115\001\001\000\002\001" +
    "\001\000\026\016\230\017\077\020\100\037\103\066\102" +
    "\071\072\107\104\110\074\112\110\115\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\111\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\016\252\017\077\020" +
    "\100\037\103\040\253\063\254\066\102\071\072\107\104" +
    "\110\074\112\110\115\115\001\001\000\030\016\245\017" +
    "\077\020\100\037\103\066\102\071\072\076\246\107\104" +
    "\110\074\112\110\115\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\016\245\017\077" +
    "\020\100\037\103\066\102\071\072\076\251\107\104\110" +
    "\074\112\110\115\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\016" +
    "\252\017\077\020\100\037\103\040\256\063\254\066\102" +
    "\071\072\107\104\110\074\112\110\115\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\027\322\030\301\031\321" +
    "\032\325\035\311\037\276\043\313\044\303\046\273\052" +
    "\271\056\275\057\306\060\305\065\320\066\307\071\331" +
    "\102\326\104\270\105\267\106\316\110\300\112\277\115" +
    "\330\001\001\000\002\001\001\000\032\016\245\017\077" +
    "\020\100\037\103\066\102\071\072\075\u017a\076\u017c\107" +
    "\104\110\074\112\110\115\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\u014f\042\u014d\001\001\000\002" +
    "\001\001\000\026\016\u0149\017\077\020\100\037\103\066" +
    "\102\071\072\107\104\110\074\112\110\115\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\027\322\030\301\031\321\032\325" +
    "\035\u0113\037\276\043\313\044\303\046\273\052\271\056" +
    "\275\057\306\060\305\065\320\066\307\071\331\102\326" +
    "\104\270\105\267\106\316\110\300\112\277\115\330\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\336\001\001\000\004\034\347\001\001\000" +
    "\002\001\001\000\004\103\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\344\001" +
    "\001\000\002\001\001\000\004\033\353\001\001\000\026" +
    "\016\351\017\077\020\100\037\103\066\102\071\072\107" +
    "\104\110\074\112\110\115\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\054\361\055\360" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\017\363\020\100\037\103" +
    "\045\364\066\102\071\072\107\104\110\074\112\110\115" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\367\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\027\322\030\301\031\321\032\325\035\374\037\276\043" +
    "\313\044\303\046\273\052\271\056\275\057\306\060\305" +
    "\065\320\066\307\071\331\102\326\104\270\105\267\106" +
    "\316\110\300\112\277\115\330\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\u0101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\u0107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\u010a\001\001\000\002\001\001\000\060\027" +
    "\322\030\301\031\321\032\325\035\u010c\037\276\043\313" +
    "\044\303\046\273\052\271\056\275\057\306\060\305\065" +
    "\320\066\307\071\331\102\326\104\270\105\267\106\316" +
    "\110\300\112\277\115\330\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\017\363\020\100" +
    "\037\103\045\u0110\066\102\071\072\107\104\110\074\112" +
    "\110\115\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\050\u011a\051\u0119" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u011e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\030\u012b\031\u0132\032\u0133\037\u0128\043\313\044" +
    "\303\046\u0127\052\271\056\275\057\306\060\305\065\u0131" +
    "\066\u012d\071\u0137\102\u0135\104\270\105\u0125\106\u0130\110" +
    "\u012a\112\u0129\113\u0126\114\u0134\115\u0136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\016\u013c\017\077\020\100\037\103\066\102\071\072" +
    "\107\104\110\074\112\110\115\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\030\u012b\031\u0132\032\u0133\037\u0128\043\313\044" +
    "\303\046\u0127\052\271\056\275\057\306\060\305\065\u0131" +
    "\066\u012d\071\u0137\102\u0135\104\270\105\u0125\106\u0130\110" +
    "\u012a\112\u0129\113\u013a\114\u0134\115\u0136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\050\u011a\051\u0145\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\030\u012b" +
    "\031\u0132\032\u0133\037\u0128\043\313\044\303\046\u0127\052" +
    "\271\056\275\057\306\060\305\065\u0131\066\u012d\071\u0137" +
    "\102\u0135\104\270\105\u0125\106\u0130\110\u012a\112\u0129\113" +
    "\u0148\114\u0134\115\u0136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u0151\001\001\000\002" +
    "\001\001\000\060\027\322\030\301\031\321\032\325\035" +
    "\u0154\037\276\043\313\044\303\046\273\052\271\056\275" +
    "\057\306\060\305\065\320\066\307\071\331\102\326\104" +
    "\270\105\267\106\316\110\300\112\277\115\330\001\001" +
    "\000\006\041\u0153\042\u0152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\016\u0164\017\077\020" +
    "\100\037\103\066\102\071\072\107\104\110\074\112\110" +
    "\115\115\001\001\000\002\001\001\000\030\016\245\017" +
    "\077\020\100\037\103\066\102\071\072\076\u0160\107\104" +
    "\110\074\112\110\115\115\001\001\000\004\036\u015e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\016\u0162\017" +
    "\077\020\100\037\103\066\102\071\072\107\104\110\074" +
    "\112\110\115\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\017\363\020\100\037\103\045\u0168\066\102\071" +
    "\072\107\104\110\074\112\110\115\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\027\322\030\301\031" +
    "\321\032\325\035\u016b\037\276\043\313\044\303\046\273" +
    "\052\271\056\275\057\306\060\305\065\320\066\307\071" +
    "\331\102\326\104\270\105\267\106\316\110\300\112\277" +
    "\115\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\017\363\020\100\037\103\045\u0171\066\102\071\072\107" +
    "\104\110\074\112\110\115\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\027\322\030\301\031\321\032" +
    "\325\035\u0174\037\276\043\313\044\303\046\273\052\271" +
    "\056\275\057\306\060\305\065\320\066\307\071\331\102" +
    "\326\104\270\105\267\106\316\110\300\112\277\115\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\016" +
    "\u0177\017\077\020\100\037\103\066\102\071\072\107\104" +
    "\110\074\112\110\115\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\075" +
    "\u017f\001\001\000\002\001\001\000\004\074\u0182\001\001" +
    "\000\032\016\u0186\017\077\020\100\037\103\066\102\071" +
    "\072\072\u0184\073\u0187\107\104\110\074\112\110\115\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\016\u0186\017\077\020\100\037\103\066\102" +
    "\071\072\072\u018b\107\104\110\074\112\110\115\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\016\u0186\017\077\020\100\037\103\066\102\071" +
    "\072\072\u018a\107\104\110\074\112\110\115\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\073\u018e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\027\322\030" +
    "\301\031\321\032\325\035\u0193\037\276\043\313\044\303" +
    "\046\273\052\271\056\275\057\306\060\305\065\320\066" +
    "\307\071\331\102\326\104\270\105\267\106\316\110\300" +
    "\112\277\115\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\u019b" +
    "\023\u019a\024\u0199\025\u019c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\u019b\023\u01a0\024\u0199\001\001\000\002\001\001\000\026" +
    "\016\u01a4\017\077\020\100\037\103\066\102\071\072\107" +
    "\104\110\074\112\110\115\115\001\001\000\012\013\u019b" +
    "\023\u019a\024\u0199\025\u01a3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\u01aa\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u01b5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\u019b\023\u019a\024\u0199\025\u01b2" +
    "\001\001\000\002\001\001\000\012\013\u019b\023\u019a\024" +
    "\u0199\025\u01b4\001\001\000\002\001\001\000\004\014\055" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

        private TipoDato tipo;
        private Pista pista;
        private boolean asigna= false;
        private Operation instrOp;
        private ArrayList<ErrorSemantico> errorsSemanticos = new ArrayList<ErrorSemantico>();
        private ArrayList<Variable> parametros = new ArrayList<Variable>();
        private ArrayList<Operation> parametroLllmada = new ArrayList<>();
        private int cont = 0;
        private int contDimes=0;


 /* Connect this parser to a scanner!*/
	public parser(LexerPista analizadorLexico) {
		super(analizadorLexico);
	}


        public Pista getPista() {
                return pista;
        }
       
        public ArrayList<ErrorSemantico> getErrorsSemanticos() {
                return errorsSemanticos;
        }

        public void setErrorsSemanticos(ArrayList<ErrorSemantico> errorsSemanticos) {
                this.errorsSemanticos = errorsSemanticos;
        }



        @Override
        public void syntax_error(Symbol tok) {
                String esperado = "Terminales de sentencias: ), } o ;";
	    try{
                List<Integer> lista=expected_token_ids();
                if(!lista.isEmpty()){
                       if(lista.get(0)<=50){
                               esperado = sym.terminalNames[lista.get(0)];
                        } 
                }
	        Token token = (Token) tok.value;
                report_error("",null);
                ErroresSingleton.getInstance().getErroresSintacticos().add(new ErrorSintactico(token, "No pertenece a la gramatica, en su lugar se esperaba: "+ esperado));

            }catch(Exception e){
                Token token = (Token) tok.value;
                report_error("",null);
                ErroresSingleton.getInstance().getErroresSintacticos().add(new ErrorSintactico(token, "No pertenece a la gramatica, en su lugar se esperaba: "+ esperado));

	    }	
	}

         @Override
        public List<Integer> expected_token_ids() {
                return super.expected_token_ids();
        }


    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
             ErroresSingleton.getInstance().getErroresSintacticos().add(new ErrorSintactico(new Token("No recuperado", 1, 1), "Posiblemente no se encontro un ; o un ) o un } para la recuperacion adecuada"));
        }else{
             Token token = (Token) cur_token.value;
             report_error("",null);
             ErroresSingleton.getInstance().getErroresSintacticos().add(new ErrorSintactico(token, "Token no pertenece a la gramatica y su recuperacion es incierta"));

        }
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= def_pista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // def_pista ::= comodin_pista LLAVEA sentencias_global LLAVEC 
            {
              Object RESULT =null;
		pista.referenciarTablasPadres(); pista.realizarAccionesSemanticas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_pista",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // comodin_pista ::= PISTA ID 
            {
              Object RESULT =null;
		int pistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token pist = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista = new Pista(pist.getLexeme(), new TablaSimbol(errorsSemanticos), errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comodin_pista ::= PISTA ID comodin_extiende 
            {
              Object RESULT =null;
		int pistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token pist = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista = new Pista( (ArrayList<Token>)  array,pist.getLexeme(), new TablaSimbol(errorsSemanticos), errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comodin_extiende ::= EXTIENDE ID items_extiende 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Token> ids = (ArrayList<Token>) array; ids.add(id); RESULT = ids;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_extiende",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // items_extiende ::= COMA ID items_extiende 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Token> ids = (ArrayList<Token>) array; ids.add(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_extiende",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // items_extiende ::= 
            {
              Object RESULT =null;
		RESULT= new ArrayList<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_extiende",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencias_global ::= sentencia_global sentencias_global 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencias_global ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencias_global ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencias_global ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia_global ::= def_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia_global ::= asignacion_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia_global ::= def_funciones 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.getFunciones().add((Funcion) fun);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia_global ::= def_fun_principal 
            {
              Object RESULT =null;
		int funPrinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funPrinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funPrin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setFunPrincipal((Funcion) funPrin); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia_global ::= def_fun_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // def_variable ::= variables 
            {
              Object RESULT =null;
		pista.carpturarVariablesGlobales(tipo,asigna, instrOp); asigna= false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_variable ::= KEEP variables 
            {
              Object RESULT =null;
		pista.carpturarVariablesGlobales(tipo,asigna, instrOp); asigna= false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variables ::= VAR tipo items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // items_coma ::= ID items 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.getTableSimbolGoblal().capturarIds((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // items ::= IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // items ::= COMA items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // items ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= ENTERO 
            {
              Object RESULT =null;
		tipo=TipoDato.ENTERO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo ::= DOBLE 
            {
              Object RESULT =null;
		tipo=TipoDato.DECIMAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		tipo=TipoDato.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= CADENA 
            {
              Object RESULT =null;
		tipo=TipoDato.CADENA;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= CARACTER 
            {
              Object RESULT =null;
		tipo=TipoDato.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignacion_var ::= ID IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int operaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opera = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.capturarAsignacion(id, (Operation) opera);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignacion ::= operation 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation((NodoOperation) rootOp); instrOp =new Operation((NodoOperation) rootOp); asigna= true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operation ::= operation MAS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.SUMA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operation ::= operation MENOS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.RESTA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operation ::= operation POR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MULTIPLICACION, (NodoOperation) opLeft,(NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operation ::= operation DIVISION operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.DIVISION, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operation ::= operation MODULO operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MODULO, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= operation POTENCIA operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.POTENCIA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operation ::= operation MAYORQ operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MAYORQ, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= operation MENORQ operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MENORQ, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= operation MAYOROI operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MAYOROI, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= operation MENOROI operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MENOROI, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation ::= operation NOTEQUALS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.NOTEQUALS, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= operation EQUALS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.EQUALS, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= ISNULO operation 
            {
              Object RESULT =null;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.ISNULO, null, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operation ::= NOT operation 
            {
              Object RESULT =null;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.NOT, null, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operation ::= operation OR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.OR, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operation ::= operation AND operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.AND, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operation ::= operation NAND operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.NAND, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operation ::= operation NOR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.NOR, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operation ::= operation XOR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.XOR, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operation ::= terminal_casos 
            {
              Object RESULT =null;
		int nodoOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodoOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodoOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nodoOp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operation ::= PARENTESISA operation PARENTESISC 
            {
              Object RESULT =null;
		int nodoOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nodoOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = nodoOp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // terminal_casos ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // terminal_casos ::= llamada_metod 
            {
              Object RESULT =null;
		int nodFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.clear(); RESULT = nodFun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // terminal_casos ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // terminal_casos ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // terminal_casos ::= CONT_CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.CHAR));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // terminal_casos ::= CONT_CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.CADENA));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // terminal_casos ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // terminal_casos ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // terminal_casos ::= valor_arreglo 
            {
              Object RESULT =null;
		int valArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valArr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // terminal_casos ::= def_fun_reproducir 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOpFuncionesNativas nodo = new NodoOpFuncionesNativas(); nodo.capturarReproducir((SentenciaReproducir) repro); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // terminal_casos ::= def_fun_esperar 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOpFuncionesNativas nodo = new NodoOpFuncionesNativas(); nodo.capturarReproducir((SentenciaReproducir) repro); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // terminal_casos ::= def_fun_ordenar 
            {
              Object RESULT =null;
		int funOrderleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funOrderright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funOrder = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOpFuncionesNativas nodo = new NodoOpFuncionesNativas(); nodo.capturarOrdenaar((FuncionesArreglo) funOrder); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // terminal_casos ::= def_fun_sumarizar 
            {
              Object RESULT =null;
		int sumarileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumariright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sumari = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOpFuncionesNativas nodo = new NodoOpFuncionesNativas(); nodo.capturarOrdenaar((FuncionesArreglo) sumari); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // terminal_casos ::= def_fun_longitud 
            {
              Object RESULT =null;
		int longsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int longsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object longs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOpFuncionesNativas nodo = new NodoOpFuncionesNativas(); nodo.capturarOrdenaar((FuncionesArreglo) longs); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // def_funciones ::= comodin_fun LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Funcion funs = (Funcion) fun; funs.setInstruccions((ArrayList<Instruccions>) sent); parametros.clear(); RESULT = funs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funciones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comodin_fun ::= KEEP tipo_fun ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (TipoDato)tip); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comodin_fun ::= KEEP ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comodin_fun ::= tipo_fun ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (TipoDato)tip); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comodin_fun ::= ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cierre_fun ::= parametros PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_fun",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cierre_fun ::= PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_fun",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_fun ::= ENTERO 
            {
              Object RESULT =null;
		RESULT =TipoDato.ENTERO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo_fun ::= DOBLE 
            {
              Object RESULT =null;
		RESULT =TipoDato.DECIMAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_fun ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT =TipoDato.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo_fun ::= CADENA 
            {
              Object RESULT =null;
		RESULT =TipoDato.CADENA;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo_fun ::= CARACTER 
            {
              Object RESULT =null;
		RESULT =TipoDato.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametros ::= comodin_param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametros ::= comodin_param COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comodin_param ::= tipo ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parametros.add(new Variable((Token)id, tipo, "",false));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Instruccions> arr= (ArrayList<Instruccions>)array; arr.add(0,(Instruccions)sent); RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencias ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Instruccions>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencias ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencias ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia ::= variables_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionVar((ArrayList<Variable>)array,asigna,(Operation) instrOp) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia ::= asignacion_var_fun 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = asig;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia ::= op_incremt_decremet_fun PUNTOCOMA 
            {
              Object RESULT =null;
		int decrIncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decrIncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decrInc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = decrInc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia ::= llamada_metod PUNTOCOMA 
            {
              Object RESULT =null;
		int metodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int metodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object metod = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parametroLllmada.clear(); RESULT = new LlamadaFuncion((NodoOperation) metod);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia ::= sentencias_bifuraciones 
            {
              Object RESULT =null;
		int sentbifuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentbifuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sentbifu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sentbifu;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia ::= RETORNA asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaRetorna((Operation) op, (Token) tok, errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia ::= fun_mensaje 
            {
              Object RESULT =null;
		int funMjsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funMjsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funMjs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funMjs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencia ::= def_fun_reproducir PUNTOCOMA 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = repro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencia ::= def_fun_esperar PUNTOCOMA 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = repro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencia ::= decla_array_inicializado 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setSizeArray(0); cont = 0; contDimes = 0; pista.getTableSimbolGoblal().getIds().clear(); RESULT = arreglo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencia ::= decla_arry 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setSizeArray(0); cont = 0; contDimes = 0; pista.getTableSimbolGoblal().getIds().clear(); RESULT = arreglo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencia ::= asig_arreglo 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = asig;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencia ::= def_fun_ordenar PUNTOCOMA 
            {
              Object RESULT =null;
		int ordeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object orde = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = orde;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencia ::= def_fun_sumarizar PUNTOCOMA 
            {
              Object RESULT =null;
		int sumarileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumariright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sumari = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = sumari;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencia ::= CONTINUAR 
            {
              Object RESULT =null;
		RESULT = new SentenciaContinuar();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencia ::= def_fun_longitud PUNTOCOMA 
            {
              Object RESULT =null;
		int longsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int longsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object longs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = longs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencia ::= SALIR 
            {
              Object RESULT =null;
		RESULT = new SentenciaContinuar();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // asignacion_var_fun ::= ID IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Asignacion((Operation)op,(Token)id,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_var_fun",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variables_fun ::= VAR tipo items_coma_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT  = array;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables_fun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // items_coma_fun ::= ID items_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Variable> arryTmp = (ArrayList<Variable>) array; arryTmp.add( new Variable((Token)id,tipo, "", asigna)); RESULT = arryTmp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma_fun",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // items_fun ::= IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Variable>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // items_fun ::= COMA items_coma_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = array;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // items_fun ::= PUNTOCOMA 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Variable>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // op_incremt_decremet_fun ::= ID SUMA_IMPLICITA terminales_increment_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, (NodoOperation) nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // op_incremt_decremet_fun ::= ID INCREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // op_incremt_decremet_fun ::= ID DECREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.RESTA, nodLeft, nodRight); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // terminales_increment_fun ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // terminales_increment_fun ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // terminales_increment_fun ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // llamada_metod ::= ID PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new NodoOperation((Token) id, parametroLllmada,pista);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metod",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametros_llamada ::= terminal_casos_param COMA parametros_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // parametros_llamada ::= terminal_casos_param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parametros_llamada ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // terminal_casos_param ::= asignacion 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parametroLllmada.add((Operation) asig);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencias_bifuraciones ::= def_if_complete 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencias_bifuraciones ::= def_switch 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencias_bifuraciones ::= def_for 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencias_bifuraciones ::= def_while 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencias_bifuraciones ::= def_do_while 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // condition ::= operation 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation((NodoOperation) rootOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // def_if_complete ::= def_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = senIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // def_if_complete ::= def_if def_else 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senElse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElse((SentenciaElse) senElse); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // def_if_complete ::= def_if def_else_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senIfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIfs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElseIf((SentenciaIF) senIfs); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // def_if ::= SI PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaIF((ArrayList<Instruccions>) sent,(Operation)op, new TablaSimbol(errorsSemanticos) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // def_else ::= SINO LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaElse((ArrayList<Instruccions>) sent, new TablaSimbol(errorsSemanticos) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // def_else_if ::= SINO def_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = senIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // def_else_if ::= SINO def_if def_else 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senElse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElse((SentenciaElse) senElse); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // def_else_if ::= SINO def_if def_else_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senIfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIfs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElseIf((SentenciaIF) senIfs); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // def_switch ::= SWITCH PARENTESISA ID PARENTESISC LLAVEA cases LLAVEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arryCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arryCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arryC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaSwitch((ArrayList<CasoSwitch> ) arryC, new Variable((Token) id, TipoDato.ENTERO, "",false),  new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_switch",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cases ::= caso_sw SALIR cases 
            {
              Object RESULT =null;
		int cassleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cassright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cass = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arryCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arryCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arryC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<CasoSwitch> arr = (ArrayList<CasoSwitch>)arryC; arr.add(0,(CasoSwitch)cass); RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cases ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<CasoSwitch>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // caso_sw ::= CASO terminales_switch DOPUNTO sentencias_sw 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoSwitch((ArrayList<Instruccions>)inst,(Dato) dat);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // caso_sw ::= DEFAULT DOPUNTO sentencias_sw 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoSwitch((ArrayList<Instruccions>)inst,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // terminales_switch ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(false, (Token) val, TipoDato.ENTERO, val.getLexeme());;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // terminales_switch ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.ENTERO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // terminales_switch ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.DECIMAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // terminales_switch ::= CONT_CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.CADENA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // terminales_switch ::= CONT_CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.CHAR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // terminales_switch ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.BOOLEAN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // terminales_switch ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.BOOLEAN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // sentencias_sw ::= sentencia_sw sentencias_sw 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Instruccions> arr= (ArrayList<Instruccions>)array; arr.add(0,(Instruccions)sent); RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_sw",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // sentencias_sw ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Instruccions>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_sw",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sentencias_sw ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_sw",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // sentencias_sw ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_sw",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // sentencia_sw ::= variables_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionVar((ArrayList<Variable>)array,asigna,(Operation) instrOp) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // sentencia_sw ::= asignacion_var_fun 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = asig;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // sentencia_sw ::= op_incremt_decremet_fun PUNTOCOMA 
            {
              Object RESULT =null;
		int decrIncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decrIncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decrInc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = decrInc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sentencia_sw ::= llamada_metod PUNTOCOMA 
            {
              Object RESULT =null;
		int metodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int metodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object metod = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parametroLllmada.clear(); RESULT = new LlamadaFuncion((NodoOperation) metod);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sentencia_sw ::= sentencias_bifuraciones 
            {
              Object RESULT =null;
		int sentbifuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentbifuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sentbifu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sentbifu;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // sentencia_sw ::= RETORNA asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaRetorna((Operation) op, (Token) tok, errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // sentencia_sw ::= fun_mensaje 
            {
              Object RESULT =null;
		int funMjsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funMjsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funMjs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funMjs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // sentencia_sw ::= def_fun_reproducir PUNTOCOMA 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = repro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sentencia_sw ::= def_fun_esperar PUNTOCOMA 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = repro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sentencia_sw ::= decla_array_inicializado 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setSizeArray(0); cont = 0; contDimes = 0; pista.getTableSimbolGoblal().getIds().clear(); RESULT = arreglo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // sentencia_sw ::= decla_arry 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setSizeArray(0); cont = 0; contDimes = 0; pista.getTableSimbolGoblal().getIds().clear(); RESULT = arreglo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // sentencia_sw ::= asig_arreglo 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = asig;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // sentencia_sw ::= def_fun_ordenar PUNTOCOMA 
            {
              Object RESULT =null;
		int ordeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object orde = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = orde;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // sentencia_sw ::= def_fun_sumarizar PUNTOCOMA 
            {
              Object RESULT =null;
		int sumarileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumariright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sumari = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = sumari;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // sentencia_sw ::= def_fun_longitud PUNTOCOMA 
            {
              Object RESULT =null;
		int longsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int longsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object longs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = longs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // sentencia_sw ::= CONTINUAR 
            {
              Object RESULT =null;
		RESULT = new SentenciaContinuar();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // def_for ::= PARA PARENTESISA condition_for PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int forsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int forsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object fors = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		SentenciaFor senFor = (SentenciaFor)fors; senFor.setInstruccions((ArrayList<Instruccions>) instr); RESULT = senFor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_for",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // condition_for ::= var_iterador PUNTOCOMA condition PUNTOCOMA op_incremt_decremet_for 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object condi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int incremleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int incremright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object increm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaFor((Instruccions)inst,  new TablaSimbol(errorsSemanticos), (Asignacion)increm, (Operation) condi);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_for",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // var_iterador ::= VAR ENTERO ID IGUAL asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Variable> variables= new ArrayList<Variable>(); variables.add(new Variable((Token ) id, TipoDato.ENTERO, "", true)); RESULT = new DeclaracionVar(variables, true, (Operation)op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // var_iterador ::= VAR DOBLE ID IGUAL asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Variable> variables= new ArrayList<Variable>(); variables.add(new Variable((Token ) id, TipoDato.DECIMAL, "", true)); RESULT = new DeclaracionVar(variables, true, (Operation)op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // var_iterador ::= ID IGUAL asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Asignacion((Operation) op, (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // asignacion_iterador ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // asignacion_iterador ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // asignacion_iterador ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // op_incremt_decremet_for ::= ID INCREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_for",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // op_incremt_decremet_for ::= ID DECREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.RESTA, nodLeft, nodRight); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_for",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // def_while ::= MIENTRAS PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaWhile((ArrayList<Instruccions> )sent, (Operation) cond, new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_while",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // def_do_while ::= HACER LLAVEA sentencias LLAVEC MIENTRAS PARENTESISA condition PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new SentenciaDoWhile((ArrayList<Instruccions> )sent, (Operation) cond, new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_do_while",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // fun_mensaje ::= MENSAJE PARENTESISA asignacion PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Mensaje((Operation) rootOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_mensaje",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // def_fun_principal ::= PRINCIPAL PARENTESISA PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (ArrayList<Instruccions>) inst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_principal",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // def_fun_reproducir ::= REPRODUCIR PARENTESISA def_sentencias_repro PARENTESISC 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = repro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_reproducir",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // def_sentencias_repro ::= def_nota_musical COMA asignacion COMA asignacion COMA asignacion 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int octleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int octright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object oct = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int milisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int milisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object milis = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int canleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int canright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object can = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaReproducir((String) not, (Operation) oct, (Operation) milis, (Operation) can) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_sentencias_repro",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // def_nota_musical ::= NOTA_DO 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // def_nota_musical ::= NOTA_DO_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // def_nota_musical ::= NOTA_RE 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // def_nota_musical ::= NOTA_RE_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // def_nota_musical ::= NOTA_MI 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // def_nota_musical ::= NOTA_FA 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // def_nota_musical ::= NOTA_FA_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // def_nota_musical ::= NOTA_SOL 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // def_nota_musical ::= NOTA_SOL_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // def_nota_musical ::= NOTA_LA 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // def_nota_musical ::= NOTA_LA_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // def_nota_musical ::= SI 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // def_fun_esperar ::= ESPERAR PARENTESISA asignacion COMA asignacion PARENTESISC 
            {
              Object RESULT =null;
		int milisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int milisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object milis = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int canleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int canright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object can = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaReproducir("Z", (Operation) milis, (Operation) can) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_esperar",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // def_fun_arreglo ::= def_tipo_arreglo def_sin_dimens IGUAL asignacion_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.capturarArregloGlobales(tipo, cont, contDimes, (ArrayList<Operation>)arrOp ); cont = 0; contDimes = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_arreglo",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // def_fun_arreglo ::= def_tipo_arreglo def_dimension_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.captruarDeclaracionArreglo(tipo, (ArrayList<Operation>) arrOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_arreglo",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // def_tipo_arreglo ::= VAR tipo ARREGLO ids CORCHETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_tipo_arreglo",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ids ::= ID COMA ids 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		pista.getTableSimbolGoblal().capturarIdsArr((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ids ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.getTableSimbolGoblal().capturarIdsArr((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // def_dimension_arreglo ::= asignacion CORCHETC CORCHETA def_dimension_arreglo 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Operation> operations =( ArrayList<Operation>) arrs; operations.add(0,(Operation)op); RESULT = operations; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_dimension_arreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // def_dimension_arreglo ::= asignacion CORCHETC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ArrayList<Operation> operations = new ArrayList<>(); operations.add((Operation)op); RESULT = operations;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_dimension_arreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // def_sin_dimens ::= CORCHETC CORCHETA def_sin_dimens 
            {
              Object RESULT =null;
		cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_sin_dimens",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // def_sin_dimens ::= CORCHETC 
            {
              Object RESULT =null;
		cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_sin_dimens",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // asignacion_arreglo ::= LLAVEA asignaciones_recursivas LLAVEC 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		contDimes++; RESULT = arr ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // asignacion_arreglo ::= LLAVEA varios_dimensiones LLAVEC 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = arr ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // varios_dimensiones ::= LLAVEA asignaciones_recursivas LLAVEC COMA varios_dimensiones 
            {
              Object RESULT =null;
		int arr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object arr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		contDimes++; RESULT = pista.unirOperaciones((ArrayList<Operation>) arr1, (ArrayList<Operation>) arr2, (Token) tok);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varios_dimensiones",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // varios_dimensiones ::= LLAVEA asignaciones_recursivas LLAVEC 
            {
              Object RESULT =null;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		contDimes++; RESULT = arrs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varios_dimensiones",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // asignaciones_recursivas ::= asignacion COMA asignaciones_recursivas 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Operation> operations =( ArrayList<Operation>) arrs; operations.add(0,(Operation)op); RESULT = operations; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones_recursivas",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // asignaciones_recursivas ::= asignacion 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Operation> operations = new ArrayList<>(); operations.add((Operation)op); RESULT = operations;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones_recursivas",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // decla_array_inicializado ::= def_tipo_arreglo_fun def_sin_dimens IGUAL asignacion_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ManejadorArreglos(pista.getSizeArray(), (ArrayList<Operation>) arrOp, pista.getTableSimbolGoblal().getIds(), tipo, cont, contDimes, errorsSemanticos);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decla_array_inicializado",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // decla_arry ::= def_tipo_arreglo_fun def_dimension_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ManejadorArreglos(tipo, null, (ArrayList<Operation>) arrOp, pista.getTableSimbolGoblal().getIds());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decla_arry",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // def_tipo_arreglo_fun ::= VAR tipo ARREGLO ids_fun CORCHETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_tipo_arreglo_fun",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // ids_fun ::= ID COMA ids 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		pista.getTableSimbolGoblal().capturarIdsFun((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids_fun",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // ids_fun ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.getTableSimbolGoblal().capturarIdsFun((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids_fun",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // asig_arreglo ::= ID CORCHETA def_dimension_arreglo IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Asignacion((Operation) rootOp, (Token) id, (ArrayList<Operation>) arr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig_arreglo",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // valor_arreglo ::= ID CORCHETA def_dimension_arreglo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) id,TipoDato.ENTERO, (ArrayList<Operation>) arr));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_arreglo",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // def_fun_ordenar ::= ORDENAR PARENTESISA ID COMA formaOrdenar PARENTESISC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoOrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoOrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipoOr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FuncionesArreglo((Token) id, (TipoOrdenamiento) tipoOr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_ordenar",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // formaOrdenar ::= ASCENDENTE 
            {
              Object RESULT =null;
		RESULT = TipoOrdenamiento.ASCENDENTE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // formaOrdenar ::= DESCENDENTE 
            {
              Object RESULT =null;
		RESULT = TipoOrdenamiento.DESCENDENTE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // formaOrdenar ::= PARES 
            {
              Object RESULT =null;
		RESULT = TipoOrdenamiento.PARES;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // formaOrdenar ::= IMPARES 
            {
              Object RESULT =null;
		RESULT = TipoOrdenamiento.IMPARES;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // formaOrdenar ::= PRIMOS 
            {
              Object RESULT =null;
		RESULT = TipoOrdenamiento.PRIMOS;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // def_fun_sumarizar ::= SUMARIZAR PARENTESISA ID PARENTESISC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FuncionesArreglo((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_sumarizar",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // def_fun_longitud ::= LONGITUD PARENTESISA ID PARENTESISC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FuncionesArreglo((Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_longitud",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // def_fun_longitud ::= LONGITUD PARENTESISA CONT_CADENA PARENTESISC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FuncionesArreglo((String) id.getLexeme(), true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_longitud",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
