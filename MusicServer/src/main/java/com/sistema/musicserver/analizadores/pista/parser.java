
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.sistema.musicserver.analizadores.pista;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.sistema.musicserver.pista.Pista;
import com.sistema.musicserver.tablaSimbol.TablaSimbol;
import com.sistema.musicserver.instrucciones.declaracionAsignacion.*;
import com.sistema.musicserver.errors.*;
import com.sistema.musicserver.tablaSimbol.Variable;
import com.sistema.musicserver.instrucciones.funciones.*;
import com.sistema.musicserver.instrucciones.Instruccions;
import com.sistema.musicserver.instrucciones.bifurcaciones.*;
import com.sistema.musicserver.instrucciones.music.SentenciaReproducir;
import com.sistema.musicserver.instrucciones.declaracionAsignacion.funcionesArreglos.*;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\364\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\002\003\000\002\003\006\000\002\003\004" +
    "\000\002\004\004\000\002\004\005\000\002\004\004\000" +
    "\002\005\005\000\002\005\004\000\002\006\005\000\002" +
    "\006\002\000\002\006\004\000\002\007\004\000\002\007" +
    "\002\000\002\007\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\004\000\002\011\003\000\002\011\004\000\002" +
    "\012\005\000\002\014\004\000\002\015\005\000\002\015" +
    "\004\000\002\015\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\021\006\000\002\016\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\004\000\002\017\004\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\017\005" +
    "\000\002\017\004\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\026\006\000" +
    "\002\026\004\000\002\022\007\000\002\022\006\000\002" +
    "\022\006\000\002\022\005\000\002\022\004\000\002\025" +
    "\004\000\002\025\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\023\003\000\002\023\005\000\002\023\004\000\002" +
    "\024\004\000\002\035\004\000\002\035\002\000\002\035" +
    "\004\000\002\027\003\000\002\027\003\000\002\027\004" +
    "\000\002\027\004\000\002\027\003\000\002\027\005\000" +
    "\002\027\003\000\002\027\004\000\002\027\004\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\004\000\002\027\004\000\002\027\003\000\002\027\004" +
    "\000\002\027\003\000\002\031\006\000\002\031\004\000" +
    "\002\030\005\000\002\033\004\000\002\034\005\000\002" +
    "\034\004\000\002\034\003\000\002\034\004\000\002\032" +
    "\005\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\037\006\000\002\040\005\000\002\040\003\000\002" +
    "\040\002\000\002\040\004\000\002\063\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\045\003\000\002\044\003\000" +
    "\002\044\004\000\002\044\004\000\002\043\011\000\002" +
    "\042\006\000\002\041\004\000\002\041\005\000\002\041" +
    "\005\000\002\052\011\000\002\051\005\000\002\051\002" +
    "\000\002\051\004\000\002\050\006\000\002\050\005\000" +
    "\002\050\004\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\113\004\000\002\113\002" +
    "\000\002\114\003\000\002\114\003\000\002\114\004\000" +
    "\002\114\004\000\002\114\003\000\002\114\005\000\002" +
    "\114\003\000\002\114\004\000\002\114\004\000\002\114" +
    "\003\000\002\114\003\000\002\114\003\000\002\114\004" +
    "\000\002\114\004\000\002\114\004\000\002\114\003\000" +
    "\002\056\011\000\002\055\007\000\002\055\004\000\002" +
    "\054\005\000\002\054\005\000\002\054\004\000\002\054" +
    "\004\000\002\062\004\000\002\062\004\000\002\062\004" +
    "\000\002\053\004\000\002\053\004\000\002\057\011\000" +
    "\002\060\013\000\002\065\007\000\002\064\010\000\002" +
    "\066\006\000\002\070\011\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\004\000\002\071\010\000\002\100" +
    "\007\000\002\100\005\000\002\077\007\000\002\077\004" +
    "\000\002\101\005\000\002\101\003\000\002\076\006\000" +
    "\002\076\004\000\002\076\004\000\002\075\005\000\002" +
    "\075\003\000\002\074\005\000\002\074\005\000\002\074" +
    "\004\000\002\073\007\000\002\073\005\000\002\072\005" +
    "\000\002\072\003\000\002\102\007\000\002\105\005\000" +
    "\002\104\007\000\002\103\005\000\002\103\003\000\002" +
    "\106\010\000\002\107\005\000\002\110\010\000\002\111" +
    "\003\000\002\111\003\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\112\006\000\002\115\006\000" +
    "\002\115\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01cd\000\010\002\uffff\003\005\004\006\001\002\000" +
    "\004\007\030\001\002\000\010\002\ufffe\007\027\010\026" +
    "\001\002\000\004\005\012\001\002\000\004\002\011\001" +
    "\002\000\004\002\000\001\002\000\004\002\001\001\002" +
    "\000\010\003\013\006\014\007\ufffb\001\002\000\004\007" +
    "\025\001\002\000\004\005\016\001\002\000\004\007\ufffa" +
    "\001\002\000\010\003\020\007\ufff5\011\017\001\002\000" +
    "\004\005\023\001\002\000\004\007\022\001\002\000\004" +
    "\007\ufff8\001\002\000\004\007\ufff4\001\002\000\010\003" +
    "\020\007\ufff5\011\017\001\002\000\004\007\ufff6\001\002" +
    "\000\004\007\ufff7\001\002\000\004\002\ufffc\001\002\000" +
    "\004\007\ufff9\001\002\000\030\003\050\005\037\010\ufff2" +
    "\036\052\037\045\040\041\041\032\042\042\045\055\046" +
    "\031\104\044\001\002\000\020\005\u01c7\036\052\037\045" +
    "\040\041\041\032\042\042\045\u01c6\001\002\000\004\005" +
    "\uffac\001\002\000\030\003\uffed\005\uffed\010\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\045\uffed\046\uffed\104" +
    "\uffed\001\002\000\044\003\262\005\106\012\127\014\125" +
    "\015\100\016\123\017\131\020\111\021\103\047\120\056" +
    "\101\075\u0191\077\130\101\115\102\124\105\122\106\116" +
    "\001\002\000\030\003\ufff0\005\ufff0\010\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\045\ufff0\046\ufff0\104\ufff0" +
    "\001\002\000\030\003\uffea\005\uffea\010\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\045\uffea\046\uffea\104\uffea" +
    "\001\002\000\006\012\u01bc\043\u01bb\001\002\000\004\005" +
    "\u01ae\001\002\000\004\005\uffad\001\002\000\004\005\uffab" +
    "\001\002\000\004\010\u01ad\001\002\000\004\012\u01a8\001" +
    "\002\000\004\005\uffae\001\002\000\004\007\312\001\002" +
    "\000\030\003\uffee\005\uffee\010\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\045\uffee\046\uffee\104\uffee\001\002" +
    "\000\036\003\307\005\037\007\305\010\304\036\052\037" +
    "\045\040\041\041\032\042\042\044\310\045\055\046\031" +
    "\075\306\104\044\001\002\000\030\003\uffef\005\uffef\010" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\045\uffef" +
    "\046\uffef\104\uffef\001\002\000\004\005\uffaf\001\002\000" +
    "\030\003\uffec\005\uffec\010\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\042\uffec\045\uffec\046\uffec\104\uffec\001\002\000" +
    "\030\003\050\005\037\010\ufff2\036\052\037\045\040\041" +
    "\041\032\042\042\045\055\046\031\104\044\001\002\000" +
    "\014\036\063\037\056\040\061\041\062\042\060\001\002" +
    "\000\006\005\uffe2\076\uffe2\001\002\000\006\005\064\076" +
    "\066\001\002\000\006\005\uffdf\076\uffdf\001\002\000\006" +
    "\005\uffe1\076\uffe1\001\002\000\006\005\uffe0\076\uffe0\001" +
    "\002\000\006\005\uffe3\076\uffe3\001\002\000\010\011\074" +
    "\043\076\044\077\001\002\000\030\003\uffe8\005\uffe8\010" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\045\uffe8" +
    "\046\uffe8\104\uffe8\001\002\000\004\005\067\001\002\000" +
    "\006\011\072\074\uff2a\001\002\000\004\074\071\001\002" +
    "\000\044\003\uff2d\005\uff2d\012\uff2d\014\uff2d\015\uff2d\016" +
    "\uff2d\017\uff2d\020\uff2d\021\uff2d\047\uff2d\056\uff2d\075\uff2d" +
    "\077\uff2d\101\uff2d\102\uff2d\105\uff2d\106\uff2d\001\002\000" +
    "\004\005\067\001\002\000\004\074\uff2b\001\002\000\004" +
    "\005\064\001\002\000\030\003\uffe7\005\uffe7\010\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\045\uffe7\046\uffe7" +
    "\104\uffe7\001\002\000\042\003\117\005\106\012\127\014" +
    "\125\015\100\016\123\017\131\020\111\021\103\047\120" +
    "\056\101\077\130\101\115\102\124\105\122\106\116\001" +
    "\002\000\030\003\uffe4\005\uffe4\010\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\045\uffe4\046\uffe4\104\uffe4\001" +
    "\002\000\056\010\uffc3\011\uffc3\013\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\044\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\075\uffc3\001\002\000\042\003" +
    "\117\005\106\012\127\014\125\015\100\016\123\017\131" +
    "\020\111\021\103\047\120\056\101\077\130\101\115\102" +
    "\124\105\122\106\116\001\002\000\056\010\uffbc\011\uffbc" +
    "\013\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\044\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\075" +
    "\uffbc\001\002\000\056\010\uffbf\011\uffbf\013\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\044\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\075\uffbf\001\002\000" +
    "\056\010\uffbb\011\uffbb\013\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\044\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\075\uffbb\001\002\000\004\044\300\001" +
    "\002\000\062\010\uffc6\011\uffc6\012\257\013\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\044\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\074\260\075\uffc6\001" +
    "\002\000\056\010\uffdd\011\uffdd\013\uffdd\022\161\023\140" +
    "\024\150\025\143\026\146\027\144\030\154\031\147\032" +
    "\156\033\151\034\153\035\152\044\uffdd\051\142\052\157" +
    "\053\145\054\141\055\155\075\uffdd\001\002\000\056\010" +
    "\uffc9\011\uffc9\013\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\044\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\075\uffc9\001\002\000\056\010\uffc0\011\uffc0\013" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\044" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\075\uffc0" +
    "\001\002\000\056\010\uffbd\011\uffbd\013\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\044\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\075\uffbd\001\002\000\056" +
    "\010\uffc5\011\uffc5\013\uffc5\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\044\uffc5\051\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\075\uffc5\001\002\000\056\010\uffbe\011\uffbe" +
    "\013\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\044\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\075" +
    "\uffbe\001\002\000\004\012\245\001\002\000\004\012\215" +
    "\001\002\000\004\044\214\001\002\000\042\003\117\005" +
    "\106\012\127\014\125\015\100\016\123\017\131\020\111" +
    "\021\103\047\120\056\101\077\130\101\115\102\124\105" +
    "\122\106\116\001\002\000\056\010\uffba\011\uffba\013\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\044\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\075\uffba\001" +
    "\002\000\004\012\210\001\002\000\056\010\uffc2\011\uffc2" +
    "\013\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\044\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\075" +
    "\uffc2\001\002\000\004\012\203\001\002\000\056\010\uffc4" +
    "\011\uffc4\013\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\044\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\075\uffc4\001\002\000\056\010\uffb9\011\uffb9\013\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\044\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\075\uffb9\001" +
    "\002\000\042\003\117\005\106\012\127\014\125\015\100" +
    "\016\123\017\131\020\111\021\103\047\120\056\101\077" +
    "\130\101\115\102\124\105\122\106\116\001\002\000\004" +
    "\012\132\001\002\000\056\010\uffc1\011\uffc1\013\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\044\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\075\uffc1\001\002" +
    "\000\042\003\117\005\106\012\127\014\125\015\100\016" +
    "\123\017\131\020\111\021\103\047\120\056\101\077\130" +
    "\101\115\102\124\105\122\106\116\001\002\000\004\011" +
    "\134\001\002\000\042\003\117\005\106\012\127\014\125" +
    "\015\100\016\123\017\131\020\111\021\103\047\120\056" +
    "\101\077\130\101\115\102\124\105\122\106\116\001\002" +
    "\000\004\013\136\001\002\000\056\010\uff30\011\uff30\013" +
    "\uff30\022\uff30\023\uff30\024\uff30\025\uff30\026\uff30\027\uff30" +
    "\030\uff30\031\uff30\032\uff30\033\uff30\034\uff30\035\uff30\044" +
    "\uff30\051\uff30\052\uff30\053\uff30\054\uff30\055\uff30\075\uff30" +
    "\001\002\000\046\013\160\022\161\023\140\024\150\025" +
    "\143\026\146\027\144\030\154\031\147\032\156\033\151" +
    "\034\153\035\152\051\142\052\157\053\145\054\141\055" +
    "\155\001\002\000\042\003\117\005\106\012\127\014\125" +
    "\015\100\016\123\017\131\020\111\021\103\047\120\056" +
    "\101\077\130\101\115\102\124\105\122\106\116\001\002" +
    "\000\042\003\117\005\106\012\127\014\125\015\100\016" +
    "\123\017\131\020\111\021\103\047\120\056\101\077\130" +
    "\101\115\102\124\105\122\106\116\001\002\000\042\003" +
    "\117\005\106\012\127\014\125\015\100\016\123\017\131" +
    "\020\111\021\103\047\120\056\101\077\130\101\115\102" +
    "\124\105\122\106\116\001\002\000\042\003\117\005\106" +
    "\012\127\014\125\015\100\016\123\017\131\020\111\021" +
    "\103\047\120\056\101\077\130\101\115\102\124\105\122" +
    "\106\116\001\002\000\042\003\117\005\106\012\127\014" +
    "\125\015\100\016\123\017\131\020\111\021\103\047\120" +
    "\056\101\077\130\101\115\102\124\105\122\106\116\001" +
    "\002\000\042\003\117\005\106\012\127\014\125\015\100" +
    "\016\123\017\131\020\111\021\103\047\120\056\101\077" +
    "\130\101\115\102\124\105\122\106\116\001\002\000\042" +
    "\003\117\005\106\012\127\014\125\015\100\016\123\017" +
    "\131\020\111\021\103\047\120\056\101\077\130\101\115" +
    "\102\124\105\122\106\116\001\002\000\042\003\117\005" +
    "\106\012\127\014\125\015\100\016\123\017\131\020\111" +
    "\021\103\047\120\056\101\077\130\101\115\102\124\105" +
    "\122\106\116\001\002\000\042\003\117\005\106\012\127" +
    "\014\125\015\100\016\123\017\131\020\111\021\103\047" +
    "\120\056\101\077\130\101\115\102\124\105\122\106\116" +
    "\001\002\000\042\003\117\005\106\012\127\014\125\015" +
    "\100\016\123\017\131\020\111\021\103\047\120\056\101" +
    "\077\130\101\115\102\124\105\122\106\116\001\002\000" +
    "\042\003\117\005\106\012\127\014\125\015\100\016\123" +
    "\017\131\020\111\021\103\047\120\056\101\077\130\101" +
    "\115\102\124\105\122\106\116\001\002\000\042\003\117" +
    "\005\106\012\127\014\125\015\100\016\123\017\131\020" +
    "\111\021\103\047\120\056\101\077\130\101\115\102\124" +
    "\105\122\106\116\001\002\000\042\003\117\005\106\012" +
    "\127\014\125\015\100\016\123\017\131\020\111\021\103" +
    "\047\120\056\101\077\130\101\115\102\124\105\122\106" +
    "\116\001\002\000\042\003\117\005\106\012\127\014\125" +
    "\015\100\016\123\017\131\020\111\021\103\047\120\056" +
    "\101\077\130\101\115\102\124\105\122\106\116\001\002" +
    "\000\042\003\117\005\106\012\127\014\125\015\100\016" +
    "\123\017\131\020\111\021\103\047\120\056\101\077\130" +
    "\101\115\102\124\105\122\106\116\001\002\000\042\003" +
    "\117\005\106\012\127\014\125\015\100\016\123\017\131" +
    "\020\111\021\103\047\120\056\101\077\130\101\115\102" +
    "\124\105\122\106\116\001\002\000\056\010\uffc8\011\uffc8" +
    "\013\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\044\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\075" +
    "\uffc8\001\002\000\042\003\117\005\106\012\127\014\125" +
    "\015\100\016\123\017\131\020\111\021\103\047\120\056" +
    "\101\077\130\101\115\102\124\105\122\106\116\001\002" +
    "\000\056\010\uffdc\011\uffdc\013\uffdc\022\uffdc\023\uffdc\024" +
    "\150\025\143\026\146\027\144\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\044\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\075\uffdc\001\002\000\056\010\uffca" +
    "\011\uffca\013\uffca\022\161\023\140\024\150\025\143\026" +
    "\146\027\144\030\154\031\147\032\156\033\151\034\153" +
    "\035\152\044\uffca\051\uffca\052\uffca\053\uffca\054\141\055" +
    "\155\075\uffca\001\002\000\056\010\uffd4\011\uffd4\013\uffd4" +
    "\022\161\023\140\024\150\025\143\026\146\027\144\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\044\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\075\uffd4\001" +
    "\002\000\056\010\uffcc\011\uffcc\013\uffcc\022\161\023\140" +
    "\024\150\025\143\026\146\027\144\030\154\031\147\032" +
    "\156\033\151\034\153\035\152\044\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\075\uffcc\001\002\000\056\010" +
    "\uffd6\011\uffd6\013\uffd6\022\161\023\140\024\150\025\143" +
    "\026\146\027\144\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\044\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\055\uffd6\075\uffd6\001\002\000\056\010\uffd2\011\uffd2\013" +
    "\uffd2\022\161\023\140\024\150\025\143\026\146\027\144" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\044" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\075\uffd2" +
    "\001\002\000\056\010\uffd1\011\uffd1\013\uffd1\022\161\023" +
    "\140\024\150\025\143\026\146\027\144\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\uffd1\044\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\075\uffd1\001\002\000\056" +
    "\010\uffd3\011\uffd3\013\uffd3\022\161\023\140\024\150\025" +
    "\143\026\146\027\144\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\044\uffd3\051\uffd3\052\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\075\uffd3\001\002\000\056\010\uffda\011\uffda" +
    "\013\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\144\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\044\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\075" +
    "\uffda\001\002\000\056\010\uffd5\011\uffd5\013\uffd5\022\161" +
    "\023\140\024\150\025\143\026\146\027\144\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\044\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\075\uffd5\001\002\000" +
    "\056\010\uffd8\011\uffd8\013\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\144\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\044\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\075\uffd8\001\002\000\056\010\uffcb\011" +
    "\uffcb\013\uffcb\022\161\023\140\024\150\025\143\026\146" +
    "\027\144\030\154\031\147\032\156\033\151\034\153\035" +
    "\152\044\uffcb\051\uffcb\052\uffcb\053\uffcb\054\141\055\155" +
    "\075\uffcb\001\002\000\056\010\uffd7\011\uffd7\013\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\044\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\075\uffd7\001\002" +
    "\000\056\010\uffd9\011\uffd9\013\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\144\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\044\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\075\uffd9\001\002\000\056\010\uffce" +
    "\011\uffce\013\uffce\022\161\023\140\024\150\025\143\026" +
    "\146\027\144\030\154\031\147\032\156\033\151\034\153" +
    "\035\152\044\uffce\051\uffce\052\uffce\053\uffce\054\141\055" +
    "\155\075\uffce\001\002\000\056\010\uffcd\011\uffcd\013\uffcd" +
    "\022\161\023\140\024\150\025\143\026\146\027\144\030" +
    "\154\031\147\032\156\033\151\034\153\035\152\044\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\075\uffcd\001" +
    "\002\000\056\010\uffdb\011\uffdb\013\uffdb\022\uffdb\023\uffdb" +
    "\024\150\025\143\026\146\027\144\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\044\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\075\uffdb\001\002\000\006\005" +
    "\204\017\205\001\002\000\004\013\207\001\002\000\004" +
    "\013\206\001\002\000\056\010\uff0e\011\uff0e\013\uff0e\022" +
    "\uff0e\023\uff0e\024\uff0e\025\uff0e\026\uff0e\027\uff0e\030\uff0e" +
    "\031\uff0e\032\uff0e\033\uff0e\034\uff0e\035\uff0e\044\uff0e\051" +
    "\uff0e\052\uff0e\053\uff0e\054\uff0e\055\uff0e\075\uff0e\001\002" +
    "\000\056\010\uff0f\011\uff0f\013\uff0f\022\uff0f\023\uff0f\024" +
    "\uff0f\025\uff0f\026\uff0f\027\uff0f\030\uff0f\031\uff0f\032\uff0f" +
    "\033\uff0f\034\uff0f\035\uff0f\044\uff0f\051\uff0f\052\uff0f\053" +
    "\uff0f\054\uff0f\055\uff0f\075\uff0f\001\002\000\004\005\211" +
    "\001\002\000\004\013\212\001\002\000\056\010\uff10\011" +
    "\uff10\013\uff10\022\uff10\023\uff10\024\uff10\025\uff10\026\uff10" +
    "\027\uff10\030\uff10\031\uff10\032\uff10\033\uff10\034\uff10\035" +
    "\uff10\044\uff10\051\uff10\052\uff10\053\uff10\054\uff10\055\uff10" +
    "\075\uff10\001\002\000\056\010\uffd0\011\uffd0\013\uffd0\022" +
    "\161\023\140\024\150\025\143\026\146\027\144\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\044\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\075\uffd0\001\002" +
    "\000\056\010\uffc7\011\uffc7\013\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\044\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\075\uffc7\001\002\000\034\003\227" +
    "\062\233\107\232\110\224\111\220\112\231\113\234\114" +
    "\230\115\216\116\222\117\221\120\226\121\223\001\002" +
    "\000\004\011\uff37\001\002\000\004\011\237\001\002\000" +
    "\004\011\uff3b\001\002\000\004\011\uff35\001\002\000\004" +
    "\011\uff36\001\002\000\004\011\uff33\001\002\000\004\011" +
    "\uff3c\001\002\000\004\013\236\001\002\000\004\011\uff34" +
    "\001\002\000\004\011\235\001\002\000\004\011\uff38\001" +
    "\002\000\004\011\uff3a\001\002\000\004\011\uff3d\001\002" +
    "\000\004\011\uff32\001\002\000\004\011\uff39\001\002\000" +
    "\004\011\uff31\001\002\000\056\010\uff3f\011\uff3f\013\uff3f" +
    "\022\uff3f\023\uff3f\024\uff3f\025\uff3f\026\uff3f\027\uff3f\030" +
    "\uff3f\031\uff3f\032\uff3f\033\uff3f\034\uff3f\035\uff3f\044\uff3f" +
    "\051\uff3f\052\uff3f\053\uff3f\054\uff3f\055\uff3f\075\uff3f\001" +
    "\002\000\042\003\117\005\106\012\127\014\125\015\100" +
    "\016\123\017\131\020\111\021\103\047\120\056\101\077" +
    "\130\101\115\102\124\105\122\106\116\001\002\000\004" +
    "\011\241\001\002\000\042\003\117\005\106\012\127\014" +
    "\125\015\100\016\123\017\131\020\111\021\103\047\120" +
    "\056\101\077\130\101\115\102\124\105\122\106\116\001" +
    "\002\000\004\011\243\001\002\000\042\003\117\005\106" +
    "\012\127\014\125\015\100\016\123\017\131\020\111\021" +
    "\103\047\120\056\101\077\130\101\115\102\124\105\122" +
    "\106\116\001\002\000\004\013\uff3e\001\002\000\004\005" +
    "\246\001\002\000\004\011\247\001\002\000\014\122\251" +
    "\123\254\124\250\125\255\126\252\001\002\000\004\013" +
    "\uff13\001\002\000\004\013\uff15\001\002\000\004\013\uff11" +
    "\001\002\000\004\013\256\001\002\000\004\013\uff14\001" +
    "\002\000\004\013\uff12\001\002\000\056\010\uff16\011\uff16" +
    "\013\uff16\022\uff16\023\uff16\024\uff16\025\uff16\026\uff16\027" +
    "\uff16\030\uff16\031\uff16\032\uff16\033\uff16\034\uff16\035\uff16" +
    "\044\uff16\051\uff16\052\uff16\053\uff16\054\uff16\055\uff16\075" +
    "\uff16\001\002\000\044\003\272\005\106\012\127\013\uff80" +
    "\014\125\015\100\016\123\017\131\020\111\021\103\047" +
    "\120\056\101\077\130\101\115\102\124\105\122\106\116" +
    "\001\002\000\042\003\262\005\106\012\127\014\125\015" +
    "\100\016\123\017\131\020\111\021\103\047\120\056\101" +
    "\077\130\101\115\102\124\105\122\106\116\001\002\000" +
    "\004\075\265\001\002\000\006\044\214\075\264\001\002" +
    "\000\056\010\uff17\011\uff17\013\uff17\022\uff17\023\uff17\024" +
    "\uff17\025\uff17\026\uff17\027\uff17\030\uff17\031\uff17\032\uff17" +
    "\033\uff17\034\uff17\035\uff17\044\uff17\051\uff17\052\uff17\053" +
    "\uff17\054\uff17\055\uff17\075\uff17\001\002\000\060\010\uff27" +
    "\011\uff27\013\uff27\022\uff27\023\uff27\024\uff27\025\uff27\026" +
    "\uff27\027\uff27\030\uff27\031\uff27\032\uff27\033\uff27\034\uff27" +
    "\035\uff27\043\uff27\044\uff27\051\uff27\052\uff27\053\uff27\054" +
    "\uff27\055\uff27\075\uff27\001\002\000\062\010\uff28\011\uff28" +
    "\013\uff28\022\uff28\023\uff28\024\uff28\025\uff28\026\uff28\027" +
    "\uff28\030\uff28\031\uff28\032\uff28\033\uff28\034\uff28\035\uff28" +
    "\043\uff28\044\uff28\051\uff28\052\uff28\053\uff28\054\uff28\055" +
    "\uff28\074\266\075\uff28\001\002\000\042\003\262\005\106" +
    "\012\127\014\125\015\100\016\123\017\131\020\111\021" +
    "\103\047\120\056\101\077\130\101\115\102\124\105\122" +
    "\106\116\001\002\000\060\010\uff29\011\uff29\013\uff29\022" +
    "\uff29\023\uff29\024\uff29\025\uff29\026\uff29\027\uff29\030\uff29" +
    "\031\uff29\032\uff29\033\uff29\034\uff29\035\uff29\043\uff29\044" +
    "\uff29\051\uff29\052\uff29\053\uff29\054\uff29\055\uff29\075\uff29" +
    "\001\002\000\006\011\uff7e\013\uff7e\001\002\000\004\013" +
    "\277\001\002\000\006\013\276\044\214\001\002\000\006" +
    "\011\274\013\uff81\001\002\000\044\003\272\005\106\012" +
    "\127\013\uff80\014\125\015\100\016\123\017\131\020\111" +
    "\021\103\047\120\056\101\077\130\101\115\102\124\105" +
    "\122\106\116\001\002\000\004\013\uff82\001\002\000\004" +
    "\013\uff7f\001\002\000\056\010\uff83\011\uff83\013\uff83\022" +
    "\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83" +
    "\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\044\uff83\051" +
    "\uff83\052\uff83\053\uff83\054\uff83\055\uff83\075\uff83\001\002" +
    "\000\030\003\uffe6\005\uffe6\010\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\045\uffe6\046\uffe6\104\uffe6\001\002" +
    "\000\056\010\uffcf\011\uffcf\013\uffcf\022\161\023\140\024" +
    "\150\025\143\026\146\027\144\030\154\031\147\032\156" +
    "\033\151\034\153\035\152\044\uffcf\051\uffcf\052\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\075\uffcf\001\002\000\030\003\uffe5" +
    "\005\uffe5\010\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\045\uffe5\046\uffe5\104\uffe5\001\002\000\004\010\ufff3" +
    "\001\002\000\030\003\uffb7\005\uffb7\010\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\045\uffb7\046\uffb7\104\uffb7" +
    "\001\002\000\004\007\uffb2\001\002\000\044\003\uff2c\005" +
    "\uff2c\012\uff2c\014\uff2c\015\uff2c\016\uff2c\017\uff2c\020\uff2c" +
    "\021\uff2c\047\uff2c\056\uff2c\075\uff2c\077\uff2c\101\uff2c\102" +
    "\uff2c\105\uff2c\106\uff2c\001\002\000\034\003\307\005\037" +
    "\007\305\010\304\036\052\037\045\040\041\041\032\042" +
    "\042\045\055\046\031\075\306\104\044\001\002\000\004" +
    "\010\ufff1\001\002\000\030\003\uffeb\005\uffeb\010\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\045\uffeb\046\uffeb" +
    "\104\uffeb\001\002\000\046\003\340\005\334\010\uffa5\045" +
    "\353\050\326\062\317\065\343\066\336\071\350\072\347" +
    "\073\341\077\130\100\316\101\115\102\124\103\330\105" +
    "\122\106\116\001\002\000\046\003\uff99\005\uff99\010\uff99" +
    "\045\uff99\050\uff99\062\uff99\065\uff99\066\uff99\071\uff99\072" +
    "\uff99\073\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103\uff99" +
    "\105\uff99\106\uff99\001\002\000\044\003\262\005\106\012" +
    "\127\014\125\015\100\016\123\017\131\020\111\021\103" +
    "\047\120\056\101\075\u0191\077\130\101\115\102\124\105" +
    "\122\106\116\001\002\000\046\003\uff7c\005\uff7c\010\uff7c" +
    "\045\uff7c\050\uff7c\062\uff7c\065\uff7c\066\uff7c\071\uff7c\072" +
    "\uff7c\073\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c\103\uff7c" +
    "\105\uff7c\106\uff7c\001\002\000\004\012\u018c\001\002\000" +
    "\004\012\u0186\001\002\000\046\003\uff9f\005\uff9f\010\uff9f" +
    "\045\uff9f\050\uff9f\062\uff9f\065\uff9f\066\uff9f\071\uff9f\072" +
    "\uff9f\073\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f" +
    "\105\uff9f\106\uff9f\001\002\000\046\003\uff7b\005\uff7b\010" +
    "\uff7b\045\uff7b\050\uff7b\062\uff7b\065\uff7b\066\uff7b\071\uff7b" +
    "\072\uff7b\073\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b\103" +
    "\uff7b\105\uff7b\106\uff7b\001\002\000\004\044\u0185\001\002" +
    "\000\004\044\u0184\001\002\000\004\044\u0183\001\002\000" +
    "\046\003\uffa3\005\uffa3\010\uffa3\045\uffa3\050\uffa3\062\uffa3" +
    "\065\uffa3\066\uffa3\071\uffa3\072\uffa3\073\uffa3\077\uffa3\100" +
    "\uffa3\101\uffa3\102\uffa3\103\uffa3\105\uffa3\106\uffa3\001\002" +
    "\000\004\012\u017d\001\002\000\046\003\uff7d\005\uff7d\010" +
    "\uff7d\045\uff7d\050\uff7d\062\uff7d\065\uff7d\066\uff7d\071\uff7d" +
    "\072\uff7d\073\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d\103" +
    "\uff7d\105\uff7d\106\uff7d\001\002\000\046\003\uff95\005\uff95" +
    "\010\uff95\045\uff95\050\uff95\062\uff95\065\uff95\066\uff95\071" +
    "\uff95\072\uff95\073\uff95\077\uff95\100\uff95\101\uff95\102\uff95" +
    "\103\uff95\105\uff95\106\uff95\001\002\000\046\003\uff79\005" +
    "\uff79\010\uff79\045\uff79\050\uff79\062\uff79\065\uff79\066\uff79" +
    "\071\uff79\072\uff79\073\uff79\077\uff79\100\uff79\101\uff79\102" +
    "\uff79\103\uff79\105\uff79\106\uff79\001\002\000\046\003\uff7a" +
    "\005\uff7a\010\uff7a\045\uff7a\050\uff7a\062\uff7a\065\uff7a\066" +
    "\uff7a\071\uff7a\072\uff7a\073\uff7a\077\uff7a\100\uff7a\101\uff7a" +
    "\102\uff7a\103\uff7a\105\uff7a\106\uff7a\001\002\000\004\044" +
    "\u017c\001\002\000\016\012\257\043\u016e\057\u0170\060\u016f" +
    "\061\u016d\074\u0171\001\002\000\004\010\u016c\001\002\000" +
    "\046\003\uff93\005\uff93\010\uff93\045\uff93\050\uff93\062\uff93" +
    "\065\uff93\066\uff93\071\uff93\072\uff93\073\uff93\077\uff93\100" +
    "\uff93\101\uff93\102\uff93\103\uff93\105\uff93\106\uff93\001\002" +
    "\000\050\003\uff77\005\uff77\010\uff77\045\uff77\050\uff77\062" +
    "\uff77\063\u0164\065\uff77\066\uff77\071\uff77\072\uff77\073\uff77" +
    "\077\uff77\100\uff77\101\uff77\102\uff77\103\uff77\105\uff77\106" +
    "\uff77\001\002\000\050\003\340\005\334\010\uffa5\044\u0155" +
    "\045\353\050\326\062\317\065\343\066\336\071\350\072" +
    "\347\073\341\077\130\100\316\101\115\102\124\103\330" +
    "\105\122\106\116\001\002\000\042\003\117\005\106\012" +
    "\127\014\125\015\100\016\123\017\131\020\111\021\103" +
    "\047\120\056\101\077\130\101\115\102\124\105\122\106" +
    "\116\001\002\000\046\003\uff98\005\uff98\010\uff98\045\uff98" +
    "\050\uff98\062\uff98\065\uff98\066\uff98\071\uff98\072\uff98\073" +
    "\uff98\077\uff98\100\uff98\101\uff98\102\uff98\103\uff98\105\uff98" +
    "\106\uff98\001\002\000\004\012\u012a\001\002\000\046\003" +
    "\uff9d\005\uff9d\010\uff9d\045\uff9d\050\uff9d\062\uff9d\065\uff9d" +
    "\066\uff9d\071\uff9d\072\uff9d\073\uff9d\077\uff9d\100\uff9d\101" +
    "\uff9d\102\uff9d\103\uff9d\105\uff9d\106\uff9d\001\002\000\046" +
    "\003\uffa2\005\uffa2\010\uffa2\045\uffa2\050\uffa2\062\uffa2\065" +
    "\uffa2\066\uffa2\071\uffa2\072\uffa2\073\uffa2\077\uffa2\100\uffa2" +
    "\101\uffa2\102\uffa2\103\uffa2\105\uffa2\106\uffa2\001\002\000" +
    "\046\003\340\005\334\010\uffa5\045\353\050\326\062\317" +
    "\065\343\066\336\071\350\072\347\073\341\077\130\100" +
    "\316\101\115\102\124\103\330\105\122\106\116\001\002" +
    "\000\004\007\u0121\001\002\000\004\012\u0103\001\002\000" +
    "\004\044\u0102\001\002\000\046\003\uff9a\005\uff9a\010\uff9a" +
    "\045\uff9a\050\uff9a\062\uff9a\065\uff9a\066\uff9a\071\uff9a\072" +
    "\uff9a\073\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\103\uff9a" +
    "\105\uff9a\106\uff9a\001\002\000\014\036\063\037\056\040" +
    "\061\041\062\042\060\001\002\000\004\044\357\001\002" +
    "\000\004\044\356\001\002\000\046\003\uff9b\005\uff9b\010" +
    "\uff9b\045\uff9b\050\uff9b\062\uff9b\065\uff9b\066\uff9b\071\uff9b" +
    "\072\uff9b\073\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103" +
    "\uff9b\105\uff9b\106\uff9b\001\002\000\046\003\uff94\005\uff94" +
    "\010\uff94\045\uff94\050\uff94\062\uff94\065\uff94\066\uff94\071" +
    "\uff94\072\uff94\073\uff94\077\uff94\100\uff94\101\uff94\102\uff94" +
    "\103\uff94\105\uff94\106\uff94\001\002\000\006\005\361\076" +
    "\363\001\002\000\012\003\372\011\371\043\373\044\375" +
    "\001\002\000\046\003\uff90\005\uff90\010\uff90\045\uff90\050" +
    "\uff90\062\uff90\065\uff90\066\uff90\071\uff90\072\uff90\073\uff90" +
    "\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90\105\uff90\106" +
    "\uff90\001\002\000\004\005\364\001\002\000\006\011\367" +
    "\074\uff19\001\002\000\004\074\366\001\002\000\044\003" +
    "\uff1b\005\uff1b\012\uff1b\014\uff1b\015\uff1b\016\uff1b\017\uff1b" +
    "\020\uff1b\021\uff1b\047\uff1b\056\uff1b\075\uff1b\077\uff1b\101" +
    "\uff1b\102\uff1b\105\uff1b\106\uff1b\001\002\000\004\005\067" +
    "\001\002\000\004\074\uff1a\001\002\000\004\005\361\001" +
    "\002\000\004\044\u0100\001\002\000\042\003\117\005\106" +
    "\012\127\014\125\015\100\016\123\017\131\020\111\021" +
    "\103\047\120\056\101\077\130\101\115\102\124\105\122" +
    "\106\116\001\002\000\046\003\uff8f\005\uff8f\010\uff8f\045" +
    "\uff8f\050\uff8f\062\uff8f\065\uff8f\066\uff8f\071\uff8f\072\uff8f" +
    "\073\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\105" +
    "\uff8f\106\uff8f\001\002\000\046\003\uff8c\005\uff8c\010\uff8c" +
    "\045\uff8c\050\uff8c\062\uff8c\065\uff8c\066\uff8c\071\uff8c\072" +
    "\uff8c\073\uff8c\077\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c" +
    "\105\uff8c\106\uff8c\001\002\000\004\044\377\001\002\000" +
    "\046\003\uff8e\005\uff8e\010\uff8e\045\uff8e\050\uff8e\062\uff8e" +
    "\065\uff8e\066\uff8e\071\uff8e\072\uff8e\073\uff8e\077\uff8e\100" +
    "\uff8e\101\uff8e\102\uff8e\103\uff8e\105\uff8e\106\uff8e\001\002" +
    "\000\046\003\uff8b\005\uff8b\010\uff8b\045\uff8b\050\uff8b\062" +
    "\uff8b\065\uff8b\066\uff8b\071\uff8b\072\uff8b\073\uff8b\077\uff8b" +
    "\100\uff8b\101\uff8b\102\uff8b\103\uff8b\105\uff8b\106\uff8b\001" +
    "\002\000\046\003\uff8d\005\uff8d\010\uff8d\045\uff8d\050\uff8d" +
    "\062\uff8d\065\uff8d\066\uff8d\071\uff8d\072\uff8d\073\uff8d\077" +
    "\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\105\uff8d\106\uff8d" +
    "\001\002\000\046\003\uffa1\005\uffa1\010\uffa1\045\uffa1\050" +
    "\uffa1\062\uffa1\065\uffa1\066\uffa1\071\uffa1\072\uffa1\073\uffa1" +
    "\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\105\uffa1\106" +
    "\uffa1\001\002\000\012\003\u0107\005\u0105\036\u0109\037\u0104" +
    "\001\002\000\004\005\u011f\001\002\000\004\043\u010b\001" +
    "\002\000\004\013\u011a\001\002\000\006\013\u0118\044\u0119" +
    "\001\002\000\004\044\u0110\001\002\000\004\005\u010a\001" +
    "\002\000\004\043\u010b\001\002\000\010\005\u010d\014\u010e" +
    "\015\u010f\001\002\000\004\044\uff4c\001\002\000\004\044" +
    "\uff48\001\002\000\004\044\uff47\001\002\000\004\044\uff46" +
    "\001\002\000\042\003\117\005\106\012\127\014\125\015" +
    "\100\016\123\017\131\020\111\021\103\047\120\056\101" +
    "\077\130\101\115\102\124\105\122\106\116\001\002\000" +
    "\050\013\uff78\022\161\023\140\024\150\025\143\026\146" +
    "\027\144\030\154\031\147\032\156\033\151\034\153\035" +
    "\152\044\uff78\051\142\052\157\053\145\054\141\055\155" +
    "\001\002\000\004\044\u0113\001\002\000\004\005\u0114\001" +
    "\002\000\006\060\u0117\061\u0116\001\002\000\004\013\uff4e" +
    "\001\002\000\004\013\uff44\001\002\000\004\013\uff45\001" +
    "\002\000\004\013\uff4d\001\002\000\004\044\uff49\001\002" +
    "\000\004\007\u011b\001\002\000\046\003\340\005\334\010" +
    "\uffa5\045\353\050\326\062\317\065\343\066\336\071\350" +
    "\072\347\073\341\077\130\100\316\101\115\102\124\103" +
    "\330\105\122\106\116\001\002\000\004\010\u011d\001\002" +
    "\000\046\003\uff4f\005\uff4f\010\uff4f\045\uff4f\050\uff4f\062" +
    "\uff4f\065\uff4f\066\uff4f\071\uff4f\072\uff4f\073\uff4f\077\uff4f" +
    "\100\uff4f\101\uff4f\102\uff4f\103\uff4f\105\uff4f\106\uff4f\001" +
    "\002\000\004\044\uff4a\001\002\000\004\043\u010b\001\002" +
    "\000\004\044\uff4b\001\002\000\046\003\340\005\334\010" +
    "\uffa5\045\353\050\326\062\317\065\343\066\336\071\350" +
    "\072\347\073\341\077\130\100\316\101\115\102\124\103" +
    "\330\105\122\106\116\001\002\000\004\010\u0123\001\002" +
    "\000\004\050\u0124\001\002\000\004\012\u0125\001\002\000" +
    "\042\003\117\005\106\012\127\014\125\015\100\016\123" +
    "\017\131\020\111\021\103\047\120\056\101\077\130\101" +
    "\115\102\124\105\122\106\116\001\002\000\004\013\u0127" +
    "\001\002\000\004\044\u0128\001\002\000\046\003\uff42\005" +
    "\uff42\010\uff42\045\uff42\050\uff42\062\uff42\065\uff42\066\uff42" +
    "\071\uff42\072\uff42\073\uff42\077\uff42\100\uff42\101\uff42\102" +
    "\uff42\103\uff42\105\uff42\106\uff42\001\002\000\004\010\uffa6" +
    "\001\002\000\004\005\u012b\001\002\000\004\013\u012c\001" +
    "\002\000\004\007\u012d\001\002\000\012\003\u012f\010\uff6d" +
    "\067\u0132\070\u012e\001\002\000\004\064\u015e\001\002\000" +
    "\004\010\u015d\001\002\000\004\010\u015c\001\002\000\004" +
    "\066\u015a\001\002\000\020\005\u0133\014\u0135\015\u013a\016" +
    "\u0134\017\u0139\020\u0137\021\u0138\001\002\000\004\064\uff68" +
    "\001\002\000\004\064\uff65\001\002\000\004\064\uff67\001" +
    "\002\000\004\064\u013b\001\002\000\004\064\uff63\001\002" +
    "\000\004\064\uff62\001\002\000\004\064\uff64\001\002\000" +
    "\004\064\uff66\001\002\000\044\003\u0145\005\334\045\353" +
    "\050\326\062\317\065\343\066\uff60\071\350\072\347\073" +
    "\u0146\077\130\100\316\101\115\102\124\103\u0143\105\122" +
    "\106\116\001\002\000\044\003\uff55\005\uff55\045\uff55\050" +
    "\uff55\062\uff55\065\uff55\066\uff55\071\uff55\072\uff55\073\uff55" +
    "\077\uff55\100\uff55\101\uff55\102\uff55\103\uff55\105\uff55\106" +
    "\uff55\001\002\000\004\066\uff6b\001\002\000\044\003\uff5b" +
    "\005\uff5b\045\uff5b\050\uff5b\062\uff5b\065\uff5b\066\uff5b\071" +
    "\uff5b\072\uff5b\073\uff5b\077\uff5b\100\uff5b\101\uff5b\102\uff5b" +
    "\103\uff5b\105\uff5b\106\uff5b\001\002\000\004\044\u0159\001" +
    "\002\000\004\044\u0158\001\002\000\004\044\u0157\001\002" +
    "\000\044\003\uff5f\005\uff5f\045\uff5f\050\uff5f\062\uff5f\065" +
    "\uff5f\066\uff5f\071\uff5f\072\uff5f\073\uff5f\077\uff5f\100\uff5f" +
    "\101\uff5f\102\uff5f\103\uff5f\105\uff5f\106\uff5f\001\002\000" +
    "\044\003\uff50\005\uff50\045\uff50\050\uff50\062\uff50\065\uff50" +
    "\066\uff50\071\uff50\072\uff50\073\uff50\077\uff50\100\uff50\101" +
    "\uff50\102\uff50\103\uff50\105\uff50\106\uff50\001\002\000\004" +
    "\044\u0156\001\002\000\004\044\u0155\001\002\000\042\003" +
    "\117\005\106\012\127\014\125\015\100\016\123\017\131" +
    "\020\111\021\103\047\120\056\101\077\130\101\115\102" +
    "\124\105\122\106\116\001\002\000\044\003\uff54\005\uff54" +
    "\045\uff54\050\uff54\062\uff54\065\uff54\066\uff54\071\uff54\072" +
    "\uff54\073\uff54\077\uff54\100\uff54\101\uff54\102\uff54\103\uff54" +
    "\105\uff54\106\uff54\001\002\000\044\003\uff59\005\uff59\045" +
    "\uff59\050\uff59\062\uff59\065\uff59\066\uff59\071\uff59\072\uff59" +
    "\073\uff59\077\uff59\100\uff59\101\uff59\102\uff59\103\uff59\105" +
    "\uff59\106\uff59\001\002\000\044\003\uff5e\005\uff5e\045\uff5e" +
    "\050\uff5e\062\uff5e\065\uff5e\066\uff5e\071\uff5e\072\uff5e\073" +
    "\uff5e\077\uff5e\100\uff5e\101\uff5e\102\uff5e\103\uff5e\105\uff5e" +
    "\106\uff5e\001\002\000\004\044\u0152\001\002\000\044\003" +
    "\u0145\005\334\045\353\050\326\062\317\065\343\066\uff60" +
    "\071\350\072\347\073\u0146\077\130\100\316\101\115\102" +
    "\124\103\u0143\105\122\106\116\001\002\000\044\003\uff56" +
    "\005\uff56\045\uff56\050\uff56\062\uff56\065\uff56\066\uff56\071" +
    "\uff56\072\uff56\073\uff56\077\uff56\100\uff56\101\uff56\102\uff56" +
    "\103\uff56\105\uff56\106\uff56\001\002\000\004\044\u0150\001" +
    "\002\000\004\044\u014f\001\002\000\044\003\uff57\005\uff57" +
    "\045\uff57\050\uff57\062\uff57\065\uff57\066\uff57\071\uff57\072" +
    "\uff57\073\uff57\077\uff57\100\uff57\101\uff57\102\uff57\103\uff57" +
    "\105\uff57\106\uff57\001\002\000\044\003\uff51\005\uff51\045" +
    "\uff51\050\uff51\062\uff51\065\uff51\066\uff51\071\uff51\072\uff51" +
    "\073\uff51\077\uff51\100\uff51\101\uff51\102\uff51\103\uff51\105" +
    "\uff51\106\uff51\001\002\000\004\066\uff61\001\002\000\044" +
    "\003\uff5d\005\uff5d\045\uff5d\050\uff5d\062\uff5d\065\uff5d\066" +
    "\uff5d\071\uff5d\072\uff5d\073\uff5d\077\uff5d\100\uff5d\101\uff5d" +
    "\102\uff5d\103\uff5d\105\uff5d\106\uff5d\001\002\000\004\044" +
    "\u0154\001\002\000\044\003\uff5a\005\uff5a\045\uff5a\050\uff5a" +
    "\062\uff5a\065\uff5a\066\uff5a\071\uff5a\072\uff5a\073\uff5a\077" +
    "\uff5a\100\uff5a\101\uff5a\102\uff5a\103\uff5a\105\uff5a\106\uff5a" +
    "\001\002\000\050\003\uff91\005\uff91\010\uff91\044\uff87\045" +
    "\uff91\050\uff91\062\uff91\065\uff91\066\uff91\071\uff91\072\uff91" +
    "\073\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\105" +
    "\uff91\106\uff91\001\002\000\044\003\uff58\005\uff58\045\uff58" +
    "\050\uff58\062\uff58\065\uff58\066\uff58\071\uff58\072\uff58\073" +
    "\uff58\077\uff58\100\uff58\101\uff58\102\uff58\103\uff58\105\uff58" +
    "\106\uff58\001\002\000\044\003\uff53\005\uff53\045\uff53\050" +
    "\uff53\062\uff53\065\uff53\066\uff53\071\uff53\072\uff53\073\uff53" +
    "\077\uff53\100\uff53\101\uff53\102\uff53\103\uff53\105\uff53\106" +
    "\uff53\001\002\000\044\003\uff52\005\uff52\045\uff52\050\uff52" +
    "\062\uff52\065\uff52\066\uff52\071\uff52\072\uff52\073\uff52\077" +
    "\uff52\100\uff52\101\uff52\102\uff52\103\uff52\105\uff52\106\uff52" +
    "\001\002\000\044\003\uff5c\005\uff5c\045\uff5c\050\uff5c\062" +
    "\uff5c\065\uff5c\066\uff5c\071\uff5c\072\uff5c\073\uff5c\077\uff5c" +
    "\100\uff5c\101\uff5c\102\uff5c\103\uff5c\105\uff5c\106\uff5c\001" +
    "\002\000\012\003\u012f\010\uff6d\067\u0132\070\u012e\001\002" +
    "\000\004\010\uff6e\001\002\000\046\003\uff6f\005\uff6f\010" +
    "\uff6f\045\uff6f\050\uff6f\062\uff6f\065\uff6f\066\uff6f\071\uff6f" +
    "\072\uff6f\073\uff6f\077\uff6f\100\uff6f\101\uff6f\102\uff6f\103" +
    "\uff6f\105\uff6f\106\uff6f\001\002\000\006\010\uff6c\066\uff69" +
    "\001\002\000\044\003\u0145\005\334\045\353\050\326\062" +
    "\317\065\343\066\uff60\071\350\072\347\073\u0146\077\130" +
    "\100\316\101\115\102\124\103\u0143\105\122\106\116\001" +
    "\002\000\004\066\uff6a\001\002\000\004\044\u0161\001\002" +
    "\000\046\003\uff9e\005\uff9e\010\uff9e\045\uff9e\050\uff9e\062" +
    "\uff9e\065\uff9e\066\uff9e\071\uff9e\072\uff9e\073\uff9e\077\uff9e" +
    "\100\uff9e\101\uff9e\102\uff9e\103\uff9e\105\uff9e\106\uff9e\001" +
    "\002\000\004\010\uffa4\001\002\000\046\003\uff76\005\uff76" +
    "\010\uff76\045\uff76\050\uff76\062\uff76\065\uff76\066\uff76\071" +
    "\uff76\072\uff76\073\uff76\077\uff76\100\uff76\101\uff76\102\uff76" +
    "\103\uff76\105\uff76\106\uff76\001\002\000\006\007\u0166\062" +
    "\317\001\002\000\046\003\uff75\005\uff75\010\uff75\045\uff75" +
    "\050\uff75\062\uff75\065\uff75\066\uff75\071\uff75\072\uff75\073" +
    "\uff75\077\uff75\100\uff75\101\uff75\102\uff75\103\uff75\105\uff75" +
    "\106\uff75\001\002\000\046\003\340\005\334\010\uffa5\045" +
    "\353\050\326\062\317\065\343\066\336\071\350\072\347" +
    "\073\341\077\130\100\316\101\115\102\124\103\330\105" +
    "\122\106\116\001\002\000\050\003\uff72\005\uff72\010\uff72" +
    "\045\uff72\050\uff72\062\uff72\063\u0164\065\uff72\066\uff72\071" +
    "\uff72\072\uff72\073\uff72\077\uff72\100\uff72\101\uff72\102\uff72" +
    "\103\uff72\105\uff72\106\uff72\001\002\000\046\003\uff71\005" +
    "\uff71\010\uff71\045\uff71\050\uff71\062\uff71\065\uff71\066\uff71" +
    "\071\uff71\072\uff71\073\uff71\077\uff71\100\uff71\101\uff71\102" +
    "\uff71\103\uff71\105\uff71\106\uff71\001\002\000\046\003\uff70" +
    "\005\uff70\010\uff70\045\uff70\050\uff70\062\uff70\065\uff70\066" +
    "\uff70\071\uff70\072\uff70\073\uff70\077\uff70\100\uff70\101\uff70" +
    "\102\uff70\103\uff70\105\uff70\106\uff70\001\002\000\004\010" +
    "\u016b\001\002\000\046\003\uff73\005\uff73\010\uff73\045\uff73" +
    "\050\uff73\062\uff73\065\uff73\066\uff73\071\uff73\072\uff73\073" +
    "\uff73\077\uff73\100\uff73\101\uff73\102\uff73\103\uff73\105\uff73" +
    "\106\uff73\001\002\000\030\003\uffb8\005\uffb8\010\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\045\uffb8\046\uffb8" +
    "\104\uffb8\001\002\000\004\044\uff88\001\002\000\042\003" +
    "\117\005\106\012\127\014\125\015\100\016\123\017\131" +
    "\020\111\021\103\047\120\056\101\077\130\101\115\102" +
    "\124\105\122\106\116\001\002\000\004\044\uff89\001\002" +
    "\000\010\005\u0176\014\u0177\015\u0179\001\002\000\042\003" +
    "\262\005\106\012\127\014\125\015\100\016\123\017\131" +
    "\020\111\021\103\047\120\056\101\077\130\101\115\102" +
    "\124\105\122\106\116\001\002\000\004\043\u0173\001\002" +
    "\000\042\003\117\005\106\012\127\014\125\015\100\016" +
    "\123\017\131\020\111\021\103\047\120\056\101\077\130" +
    "\101\115\102\124\105\122\106\116\001\002\000\004\044" +
    "\u0175\001\002\000\046\003\uff18\005\uff18\010\uff18\045\uff18" +
    "\050\uff18\062\uff18\065\uff18\066\uff18\071\uff18\072\uff18\073" +
    "\uff18\077\uff18\100\uff18\101\uff18\102\uff18\103\uff18\105\uff18" +
    "\106\uff18\001\002\000\004\044\uff86\001\002\000\004\044" +
    "\uff85\001\002\000\004\044\uff8a\001\002\000\004\044\uff84" +
    "\001\002\000\004\044\u017b\001\002\000\046\003\uff92\005" +
    "\uff92\010\uff92\045\uff92\050\uff92\062\uff92\065\uff92\066\uff92" +
    "\071\uff92\072\uff92\073\uff92\077\uff92\100\uff92\101\uff92\102" +
    "\uff92\103\uff92\105\uff92\106\uff92\001\002\000\046\003\uff9c" +
    "\005\uff9c\010\uff9c\045\uff9c\050\uff9c\062\uff9c\065\uff9c\066" +
    "\uff9c\071\uff9c\072\uff9c\073\uff9c\077\uff9c\100\uff9c\101\uff9c" +
    "\102\uff9c\103\uff9c\105\uff9c\106\uff9c\001\002\000\042\003" +
    "\117\005\106\012\127\014\125\015\100\016\123\017\131" +
    "\020\111\021\103\047\120\056\101\077\130\101\115\102" +
    "\124\105\122\106\116\001\002\000\004\013\u017f\001\002" +
    "\000\004\007\u0180\001\002\000\046\003\340\005\334\010" +
    "\uffa5\045\353\050\326\062\317\065\343\066\336\071\350" +
    "\072\347\073\341\077\130\100\316\101\115\102\124\103" +
    "\330\105\122\106\116\001\002\000\004\010\u0182\001\002" +
    "\000\046\003\uff43\005\uff43\010\uff43\045\uff43\050\uff43\062" +
    "\uff43\065\uff43\066\uff43\071\uff43\072\uff43\073\uff43\077\uff43" +
    "\100\uff43\101\uff43\102\uff43\103\uff43\105\uff43\106\uff43\001" +
    "\002\000\046\003\uff97\005\uff97\010\uff97\045\uff97\050\uff97" +
    "\062\uff97\065\uff97\066\uff97\071\uff97\072\uff97\073\uff97\077" +
    "\uff97\100\uff97\101\uff97\102\uff97\103\uff97\105\uff97\106\uff97" +
    "\001\002\000\046\003\uff96\005\uff96\010\uff96\045\uff96\050" +
    "\uff96\062\uff96\065\uff96\066\uff96\071\uff96\072\uff96\073\uff96" +
    "\077\uff96\100\uff96\101\uff96\102\uff96\103\uff96\105\uff96\106" +
    "\uff96\001\002\000\046\003\uffa0\005\uffa0\010\uffa0\045\uffa0" +
    "\050\uffa0\062\uffa0\065\uffa0\066\uffa0\071\uffa0\072\uffa0\073" +
    "\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\105\uffa0" +
    "\106\uffa0\001\002\000\042\003\117\005\106\012\127\014" +
    "\125\015\100\016\123\017\131\020\111\021\103\047\120" +
    "\056\101\077\130\101\115\102\124\105\122\106\116\001" +
    "\002\000\004\013\u0188\001\002\000\004\007\u0189\001\002" +
    "\000\046\003\340\005\334\010\uffa5\045\353\050\326\062" +
    "\317\065\343\066\336\071\350\072\347\073\341\077\130" +
    "\100\316\101\115\102\124\103\330\105\122\106\116\001" +
    "\002\000\004\010\u018b\001\002\000\050\003\uff74\005\uff74" +
    "\010\uff74\045\uff74\050\uff74\062\uff74\063\uff74\065\uff74\066" +
    "\uff74\071\uff74\072\uff74\073\uff74\077\uff74\100\uff74\101\uff74" +
    "\102\uff74\103\uff74\105\uff74\106\uff74\001\002\000\042\003" +
    "\117\005\106\012\127\014\125\015\100\016\123\017\131" +
    "\020\111\021\103\047\120\056\101\077\130\101\115\102" +
    "\124\105\122\106\116\001\002\000\004\013\u018e\001\002" +
    "\000\004\044\u018f\001\002\000\046\003\uff41\005\uff41\010" +
    "\uff41\045\uff41\050\uff41\062\uff41\065\uff41\066\uff41\071\uff41" +
    "\072\uff41\073\uff41\077\uff41\100\uff41\101\uff41\102\uff41\103" +
    "\uff41\105\uff41\106\uff41\001\002\000\004\043\u0196\001\002" +
    "\000\006\043\uff25\074\u0194\001\002\000\004\044\u0193\001" +
    "\002\000\046\003\uff1c\005\uff1c\010\uff1c\045\uff1c\050\uff1c" +
    "\062\uff1c\065\uff1c\066\uff1c\071\uff1c\072\uff1c\073\uff1c\077" +
    "\uff1c\100\uff1c\101\uff1c\102\uff1c\103\uff1c\105\uff1c\106\uff1c" +
    "\001\002\000\004\075\u0191\001\002\000\004\043\uff26\001" +
    "\002\000\006\003\u0197\007\u0198\001\002\000\004\044\u01a7" +
    "\001\002\000\044\003\117\005\106\007\u019c\012\127\014" +
    "\125\015\100\016\123\017\131\020\111\021\103\047\120" +
    "\056\101\077\130\101\115\102\124\105\122\106\116\001" +
    "\002\000\004\044\u019a\001\002\000\046\003\uff1d\005\uff1d" +
    "\010\uff1d\045\uff1d\050\uff1d\062\uff1d\065\uff1d\066\uff1d\071" +
    "\uff1d\072\uff1d\073\uff1d\077\uff1d\100\uff1d\101\uff1d\102\uff1d" +
    "\103\uff1d\105\uff1d\106\uff1d\001\002\000\004\010\u01a6\001" +
    "\002\000\042\003\117\005\106\012\127\014\125\015\100" +
    "\016\123\017\131\020\111\021\103\047\120\056\101\077" +
    "\130\101\115\102\124\105\122\106\116\001\002\000\006" +
    "\010\uff1e\011\u01a0\001\002\000\004\010\u019f\001\002\000" +
    "\004\044\uff23\001\002\000\042\003\117\005\106\012\127" +
    "\014\125\015\100\016\123\017\131\020\111\021\103\047" +
    "\120\056\101\077\130\101\115\102\124\105\122\106\116" +
    "\001\002\000\004\010\uff1f\001\002\000\004\010\u01a3\001" +
    "\002\000\006\010\uff20\011\u01a4\001\002\000\004\007\u019c" +
    "\001\002\000\004\010\uff21\001\002\000\004\044\uff24\001" +
    "\002\000\004\044\uff22\001\002\000\004\013\u01a9\001\002" +
    "\000\004\007\u01aa\001\002\000\046\003\340\005\334\010" +
    "\uffa5\045\353\050\326\062\317\065\343\066\336\071\350" +
    "\072\347\073\341\077\130\100\316\101\115\102\124\103" +
    "\330\105\122\106\116\001\002\000\004\010\u01ac\001\002" +
    "\000\030\003\uff40\005\uff40\010\uff40\036\uff40\037\uff40\040" +
    "\uff40\041\uff40\042\uff40\045\uff40\046\uff40\104\uff40\001\002" +
    "\000\004\002\ufffd\001\002\000\004\012\u01af\001\002\000" +
    "\020\003\u01b2\013\u01b0\036\063\037\056\040\061\041\062" +
    "\042\060\001\002\000\004\007\uffb0\001\002\000\006\011" +
    "\u01b9\013\uffaa\001\002\000\004\010\u01b8\001\002\000\004" +
    "\005\u01b7\001\002\000\004\013\u01b6\001\002\000\004\007" +
    "\uffb4\001\002\000\004\007\uffb1\001\002\000\006\011\uffa7" +
    "\013\uffa7\001\002\000\004\013\uffa8\001\002\000\016\003" +
    "\u01b2\036\063\037\056\040\061\041\062\042\060\001\002" +
    "\000\004\013\uffa9\001\002\000\042\003\117\005\106\012" +
    "\127\014\125\015\100\016\123\017\131\020\111\021\103" +
    "\047\120\056\101\077\130\101\115\102\124\105\122\106" +
    "\116\001\002\000\020\003\u01b2\013\u01b0\036\063\037\056" +
    "\040\061\041\062\042\060\001\002\000\004\007\uffb3\001" +
    "\002\000\004\044\u01bf\001\002\000\030\003\uffde\005\uffde" +
    "\010\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\045" +
    "\uffde\046\uffde\104\uffde\001\002\000\004\043\u01c3\001\002" +
    "\000\004\044\u01c2\001\002\000\030\003\uff2e\005\uff2e\010" +
    "\uff2e\036\uff2e\037\uff2e\040\uff2e\041\uff2e\042\uff2e\045\uff2e" +
    "\046\uff2e\104\uff2e\001\002\000\006\003\u0197\007\u0198\001" +
    "\002\000\004\044\u01c5\001\002\000\030\003\uff2f\005\uff2f" +
    "\010\uff2f\036\uff2f\037\uff2f\040\uff2f\041\uff2f\042\uff2f\045" +
    "\uff2f\046\uff2f\104\uff2f\001\002\000\014\036\063\037\056" +
    "\040\061\041\062\042\060\001\002\000\004\012\u01cd\001" +
    "\002\000\004\005\u01ca\001\002\000\030\003\uffe9\005\uffe9" +
    "\010\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\045" +
    "\uffe9\046\uffe9\104\uffe9\001\002\000\004\012\u01cb\001\002" +
    "\000\020\003\u01b2\013\u01b0\036\063\037\056\040\061\041" +
    "\062\042\060\001\002\000\004\007\uffb6\001\002\000\020" +
    "\003\u01b2\013\u01b0\036\063\037\056\040\061\041\062\042" +
    "\060\001\002\000\004\007\uffb5\001\002\000\004\005\064" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01cd\000\010\002\006\003\007\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\042\010\053" +
    "\011\034\012\035\021\050\022\045\026\046\061\037\064" +
    "\032\077\033\100\052\001\001\000\006\012\u01c8\061\u01c7" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\016" +
    "\260\017\106\020\107\037\112\066\111\071\101\075\u01bf" +
    "\076\u01c0\107\113\110\103\112\120\115\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\010\310\011\034\012\035\021" +
    "\050\022\045\026\046\061\037\064\032\077\033\100\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\007\302\010\053\011\034\012\035\021\050" +
    "\022\045\026\046\061\037\064\032\077\033\100\052\001" +
    "\001\000\004\013\056\001\001\000\002\001\001\000\004" +
    "\014\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\074\001\001" +
    "\000\002\001\001\000\004\101\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\072" +
    "\001\001\000\002\001\001\000\004\014\301\001\001\000" +
    "\002\001\001\000\026\016\104\017\106\020\107\037\112" +
    "\066\111\071\101\107\113\110\103\112\120\115\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\017\300" +
    "\020\107\037\112\066\111\071\101\107\113\110\103\112" +
    "\120\115\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\017\212" +
    "\020\107\037\112\066\111\071\101\107\113\110\103\112" +
    "\120\115\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\017\136\020\107\037\112\066\111" +
    "\071\101\107\113\110\103\112\120\115\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\016\132\017\106" +
    "\020\107\037\112\066\111\071\101\107\113\110\103\112" +
    "\120\115\125\001\001\000\002\001\001\000\026\016\134" +
    "\017\106\020\107\037\112\066\111\071\101\107\113\110" +
    "\103\112\120\115\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\017\201\020\107\037" +
    "\112\066\111\071\101\107\113\110\103\112\120\115\125" +
    "\001\001\000\024\017\200\020\107\037\112\066\111\071" +
    "\101\107\113\110\103\112\120\115\125\001\001\000\024" +
    "\017\177\020\107\037\112\066\111\071\101\107\113\110" +
    "\103\112\120\115\125\001\001\000\024\017\176\020\107" +
    "\037\112\066\111\071\101\107\113\110\103\112\120\115" +
    "\125\001\001\000\024\017\175\020\107\037\112\066\111" +
    "\071\101\107\113\110\103\112\120\115\125\001\001\000" +
    "\024\017\174\020\107\037\112\066\111\071\101\107\113" +
    "\110\103\112\120\115\125\001\001\000\024\017\173\020" +
    "\107\037\112\066\111\071\101\107\113\110\103\112\120" +
    "\115\125\001\001\000\024\017\172\020\107\037\112\066" +
    "\111\071\101\107\113\110\103\112\120\115\125\001\001" +
    "\000\024\017\171\020\107\037\112\066\111\071\101\107" +
    "\113\110\103\112\120\115\125\001\001\000\024\017\170" +
    "\020\107\037\112\066\111\071\101\107\113\110\103\112" +
    "\120\115\125\001\001\000\024\017\167\020\107\037\112" +
    "\066\111\071\101\107\113\110\103\112\120\115\125\001" +
    "\001\000\024\017\166\020\107\037\112\066\111\071\101" +
    "\107\113\110\103\112\120\115\125\001\001\000\024\017" +
    "\165\020\107\037\112\066\111\071\101\107\113\110\103" +
    "\112\120\115\125\001\001\000\024\017\164\020\107\037" +
    "\112\066\111\071\101\107\113\110\103\112\120\115\125" +
    "\001\001\000\024\017\163\020\107\037\112\066\111\071" +
    "\101\107\113\110\103\112\120\115\125\001\001\000\024" +
    "\017\162\020\107\037\112\066\111\071\101\107\113\110" +
    "\103\112\120\115\125\001\001\000\002\001\001\000\024" +
    "\017\161\020\107\037\112\066\111\071\101\107\113\110" +
    "\103\112\120\115\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\067\216\070\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\016\237" +
    "\017\106\020\107\037\112\066\111\071\101\107\113\110" +
    "\103\112\120\115\125\001\001\000\002\001\001\000\026" +
    "\016\241\017\106\020\107\037\112\066\111\071\101\107" +
    "\113\110\103\112\120\115\125\001\001\000\002\001\001" +
    "\000\026\016\243\017\106\020\107\037\112\066\111\071" +
    "\101\107\113\110\103\112\120\115\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\111" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\016\267\017\106\020\107" +
    "\037\112\040\270\063\272\066\111\071\101\107\113\110" +
    "\103\112\120\115\125\001\001\000\030\016\260\017\106" +
    "\020\107\037\112\066\111\071\101\076\262\107\113\110" +
    "\103\112\120\115\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\016\260\017\106\020\107\037\112\066\111" +
    "\071\101\076\266\107\113\110\103\112\120\115\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\016\267\017" +
    "\106\020\107\037\112\040\274\063\272\066\111\071\101" +
    "\107\113\110\103\112\120\115\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\010\310\011\034\012\035\021\050\022\045\026\046\061" +
    "\037\064\032\077\033\100\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\027\345\030\324\031\344\032" +
    "\350\035\334\037\321\043\336\044\326\046\317\052\314" +
    "\056\320\057\331\060\330\065\343\066\332\071\354\102" +
    "\351\104\313\105\312\106\341\110\323\112\322\115\353" +
    "\001\001\000\002\001\001\000\032\016\260\017\106\020" +
    "\107\037\112\066\111\071\101\075\u018f\076\u0191\107\113" +
    "\110\103\112\120\115\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\u0164\042\u0162\001\001\000\060\027" +
    "\345\030\324\031\344\032\350\035\u0161\037\321\043\336" +
    "\044\326\046\317\052\314\056\320\057\331\060\330\065" +
    "\343\066\332\071\354\102\351\104\313\105\312\106\341" +
    "\110\323\112\322\115\353\001\001\000\026\016\u015f\017" +
    "\106\020\107\037\112\066\111\071\101\107\113\110\103" +
    "\112\120\115\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\027\345" +
    "\030\324\031\344\032\350\035\u0128\037\321\043\336\044" +
    "\326\046\317\052\314\056\320\057\331\060\330\065\343" +
    "\066\332\071\354\102\351\104\313\105\312\106\341\110" +
    "\323\112\322\115\353\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\361\001\001\000" +
    "\004\034\373\001\001\000\002\001\001\000\004\103\364" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\367\001\001\000\002\001\001\000\004" +
    "\033\u0100\001\001\000\002\001\001\000\026\016\375\017" +
    "\106\020\107\037\112\066\111\071\101\107\113\110\103" +
    "\112\120\115\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\054\u0107\055" +
    "\u0105\001\001\000\002\001\001\000\004\062\u011d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\u010b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\017\u0110\020\107\037\112\045\u0111" +
    "\066\111\071\101\107\113\110\103\112\120\115\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\u0114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\027\345\030\324\031\344\032" +
    "\350\035\u011b\037\321\043\336\044\326\046\317\052\314" +
    "\056\320\057\331\060\330\065\343\066\332\071\354\102" +
    "\351\104\313\105\312\106\341\110\323\112\322\115\353" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\u011f\001\001\000\002\001\001\000\060" +
    "\027\345\030\324\031\344\032\350\035\u0121\037\321\043" +
    "\336\044\326\046\317\052\314\056\320\057\331\060\330" +
    "\065\343\066\332\071\354\102\351\104\313\105\312\106" +
    "\341\110\323\112\322\115\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\017\u0110\020" +
    "\107\037\112\045\u0125\066\111\071\101\107\113\110\103" +
    "\112\120\115\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\050\u0130\051" +
    "\u012f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\u0135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\030\u0141\031\u0148\032\u0149" +
    "\037\u013e\043\336\044\326\046\u013d\052\314\056\320\057" +
    "\331\060\330\065\u0147\066\u0143\071\u014d\102\u014b\104\313" +
    "\105\u013b\106\u0146\110\u0140\112\u013f\113\u013c\114\u014a\115" +
    "\u014c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\016\u0152\017\106\020\107\037" +
    "\112\066\111\071\101\107\113\110\103\112\120\115\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\030\u0141\031\u0148\032\u0149" +
    "\037\u013e\043\336\044\326\046\u013d\052\314\056\320\057" +
    "\331\060\330\065\u0147\066\u0143\071\u014d\102\u014b\104\313" +
    "\105\u013b\106\u0146\110\u0140\112\u013f\113\u0150\114\u014a\115" +
    "\u014c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\050\u0130\051\u015a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\030\u0141\031\u0148\032\u0149\037\u013e\043\336" +
    "\044\326\046\u013d\052\314\056\320\057\331\060\330\065" +
    "\u0147\066\u0143\071\u014d\102\u014b\104\313\105\u013b\106\u0146" +
    "\110\u0140\112\u013f\113\u015e\114\u014a\115\u014c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u0166\001\001\000" +
    "\002\001\001\000\060\027\345\030\324\031\344\032\350" +
    "\035\u0169\037\321\043\336\044\326\046\317\052\314\056" +
    "\320\057\331\060\330\065\343\066\332\071\354\102\351" +
    "\104\313\105\312\106\341\110\323\112\322\115\353\001" +
    "\001\000\006\041\u0168\042\u0167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\016\u0179\017\106" +
    "\020\107\037\112\066\111\071\101\107\113\110\103\112" +
    "\120\115\125\001\001\000\002\001\001\000\004\036\u0177" +
    "\001\001\000\030\016\260\017\106\020\107\037\112\066" +
    "\111\071\101\076\u0171\107\113\110\103\112\120\115\125" +
    "\001\001\000\002\001\001\000\026\016\u0173\017\106\020" +
    "\107\037\112\066\111\071\101\107\113\110\103\112\120" +
    "\115\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\017\u0110\020\107\037\112\045\u017d\066\111" +
    "\071\101\107\113\110\103\112\120\115\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\027\345\030\324" +
    "\031\344\032\350\035\u0180\037\321\043\336\044\326\046" +
    "\317\052\314\056\320\057\331\060\330\065\343\066\332" +
    "\071\354\102\351\104\313\105\312\106\341\110\323\112" +
    "\322\115\353\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\017\u0110\020\107\037\112\045\u0186\066\111\071\101" +
    "\107\113\110\103\112\120\115\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\027\345\030\324\031\344" +
    "\032\350\035\u0189\037\321\043\336\044\326\046\317\052" +
    "\314\056\320\057\331\060\330\065\343\066\332\071\354" +
    "\102\351\104\313\105\312\106\341\110\323\112\322\115" +
    "\353\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\016\u018c\017\106\020\107\037\112\066\111\071\101\107" +
    "\113\110\103\112\120\115\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\u0194\001\001\000\002\001\001\000\004\074\u0198\001" +
    "\001\000\002\001\001\000\032\016\u019c\017\106\020\107" +
    "\037\112\066\111\071\101\072\u019a\073\u019d\107\113\110" +
    "\103\112\120\115\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\016\u019c\017\106\020" +
    "\107\037\112\066\111\071\101\072\u01a1\107\113\110\103" +
    "\112\120\115\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\016\u019c\017\106\020\107" +
    "\037\112\066\111\071\101\072\u01a0\107\113\110\103\112" +
    "\120\115\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\u01a4\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\027\345\030\324\031\344\032" +
    "\350\035\u01aa\037\321\043\336\044\326\046\317\052\314" +
    "\056\320\057\331\060\330\065\343\066\332\071\354\102" +
    "\351\104\313\105\312\106\341\110\323\112\322\115\353" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\u01b2\023\u01b3\024\u01b0" +
    "\025\u01b4\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\u01b2\023\u01b9\024\u01b0\001\001\000\002" +
    "\001\001\000\026\016\u01bd\017\106\020\107\037\112\066" +
    "\111\071\101\107\113\110\103\112\120\115\125\001\001" +
    "\000\012\013\u01b2\023\u01b3\024\u01b0\025\u01bc\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\074" +
    "\u01c3\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u01ce\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\u01b2\023\u01b3" +
    "\024\u01b0\025\u01cb\001\001\000\002\001\001\000\012\013" +
    "\u01b2\023\u01b3\024\u01b0\025\u01cd\001\001\000\002\001\001" +
    "\000\004\014\064\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

        private TipoDato tipo;
        private Pista pista;
        private boolean asigna= false;
        private Operation instrOp;
        private ArrayList<ErrorSemantico> errorsSemanticos = new ArrayList<ErrorSemantico>();
        private ArrayList<Variable> parametros = new ArrayList<Variable>();
        private ArrayList<Operation> parametroLllmada = new ArrayList<>();
        private int cont = 0;
        private int contDimes=0;


 /* Connect this parser to a scanner!*/
	public parser(LexerPista analizadorLexico) {
		super(analizadorLexico);
	}


        public Pista getPista() {
                return pista;
        }
       
        public ArrayList<ErrorSemantico> getErrorsSemanticos() {
                return errorsSemanticos;
        }

        public void setErrorsSemanticos(ArrayList<ErrorSemantico> errorsSemanticos) {
                this.errorsSemanticos = errorsSemanticos;
        }



        @Override
        public void syntax_error(Symbol tok) {
                String esperado = "Terminales de sentencias: ), } o ;";
	    try{
                List<Integer> lista=expected_token_ids();
                if(!lista.isEmpty()){
                       if(lista.get(0)<=50){
                               esperado = sym.terminalNames[lista.get(0)];
                        } 
                }
	        Token token = (Token) tok.value;
                report_error("",null);
                ErroresSingleton.getInstance().getErroresSintacticos().add(new ErrorSintactico(token, "No pertenece a la gramatica, en su lugar se esperaba: "+ esperado));

            }catch(Exception e){
                Token token = (Token) tok.value;
                report_error("",null);
                ErroresSingleton.getInstance().getErroresSintacticos().add(new ErrorSintactico(token, "No pertenece a la gramatica, en su lugar se esperaba: "+ esperado));

	    }	
	}

         @Override
        public List<Integer> expected_token_ids() {
                return super.expected_token_ids();
        }


    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
             ErroresSingleton.getInstance().getErroresSintacticos().add(new ErrorSintactico(new Token("No recuperado", 1, 1), "Posiblemente no se encontro un ; o un ) o un } para la recuperacion adecuada"));
        }else{
             Token token = (Token) cur_token.value;
             report_error("",null);
             ErroresSingleton.getInstance().getErroresSintacticos().add(new ErrorSintactico(token, "Token no pertenece a la gramatica y su recuperacion es incierta"));

        }
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= def_pista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // def_pista ::= comodin_pista LLAVEA sentencias_global LLAVEC 
            {
              Object RESULT =null;
		pista.referenciarTablasPadres(); pista.realizarAccionesSemanticas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_pista",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def_pista ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_pista",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comodin_pista ::= PISTA ID 
            {
              Object RESULT =null;
		int pistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token pist = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista = new Pista(pist.getLexeme(), new TablaSimbol(errorsSemanticos), errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comodin_pista ::= PISTA ID comodin_extiende 
            {
              Object RESULT =null;
		int pistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token pist = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista = new Pista( (ArrayList<Token>)  array,pist.getLexeme(), new TablaSimbol(errorsSemanticos), errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comodin_pista ::= error LLAVEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comodin_extiende ::= EXTIENDE ID items_extiende 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Token> ids = (ArrayList<Token>) array; ids.add(id); RESULT = ids;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_extiende",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comodin_extiende ::= error LLAVEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_extiende",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // items_extiende ::= COMA ID items_extiende 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Token> ids = (ArrayList<Token>) array; ids.add(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_extiende",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // items_extiende ::= 
            {
              Object RESULT =null;
		RESULT= new ArrayList<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_extiende",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // items_extiende ::= error LLAVEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_extiende",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias_global ::= sentencia_global sentencias_global 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencias_global ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencias_global ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia_global ::= def_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia_global ::= asignacion_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia_global ::= def_funciones 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.getFunciones().add((Funcion) fun);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia_global ::= def_fun_principal 
            {
              Object RESULT =null;
		int funPrinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funPrinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funPrin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setFunPrincipal((Funcion) funPrin); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_global ::= def_fun_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_global ::= error sentencia_global 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // def_variable ::= variables 
            {
              Object RESULT =null;
		pista.carpturarVariablesGlobales(tipo,asigna, instrOp); asigna= false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // def_variable ::= KEEP variables 
            {
              Object RESULT =null;
		pista.carpturarVariablesGlobales(tipo,asigna, instrOp); asigna= false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variables ::= VAR tipo items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // items_coma ::= ID items 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.getTableSimbolGoblal().capturarIds((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // items ::= IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // items ::= COMA items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // items ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo ::= ENTERO 
            {
              Object RESULT =null;
		tipo=TipoDato.ENTERO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo ::= DOBLE 
            {
              Object RESULT =null;
		tipo=TipoDato.DECIMAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		tipo=TipoDato.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo ::= CADENA 
            {
              Object RESULT =null;
		tipo=TipoDato.CADENA;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo ::= CARACTER 
            {
              Object RESULT =null;
		tipo=TipoDato.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion_var ::= ID IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int operaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opera = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.capturarAsignacion(id, (Operation) opera);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion ::= operation 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation((NodoOperation) rootOp); instrOp =new Operation((NodoOperation) rootOp); asigna= true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= operation MAS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.SUMA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operation ::= operation MENOS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.RESTA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= operation POR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MULTIPLICACION, (NodoOperation) opLeft,(NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= operation DIVISION operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.DIVISION, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= operation MODULO operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MODULO, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation ::= operation POTENCIA operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.POTENCIA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= operation MAYORQ operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MAYORQ, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= operation MENORQ operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MENORQ, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operation ::= operation MAYOROI operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MAYOROI, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operation ::= operation MENOROI operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MENOROI, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operation ::= operation NOTEQUALS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.NOTEQUALS, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operation ::= operation EQUALS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.EQUALS, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operation ::= ISNULO operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operation ::= NOT operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operation ::= operation OR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.OR, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operation ::= operation AND operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.AND, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operation ::= operation NAND operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.NAND, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operation ::= operation NOR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.NOR, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operation ::= operation XOR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.XOR, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operation ::= terminal_casos 
            {
              Object RESULT =null;
		int nodoOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodoOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodoOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nodoOp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operation ::= PARENTESISA operation PARENTESISC 
            {
              Object RESULT =null;
		int nodoOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nodoOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = nodoOp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operation ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // terminal_casos ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // terminal_casos ::= llamada_metod 
            {
              Object RESULT =null;
		int nodFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.clear(); RESULT = nodFun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // terminal_casos ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // terminal_casos ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // terminal_casos ::= CONT_CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.CHAR));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // terminal_casos ::= CONT_CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.CADENA));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // terminal_casos ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // terminal_casos ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // terminal_casos ::= valor_arreglo 
            {
              Object RESULT =null;
		int valArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valArr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // terminal_casos ::= def_fun_reproducir 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOpFuncionesNativas nodo = new NodoOpFuncionesNativas(); nodo.capturarReproducir((SentenciaReproducir) repro); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // terminal_casos ::= def_fun_esperar 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOpFuncionesNativas nodo = new NodoOpFuncionesNativas(); nodo.capturarReproducir((SentenciaReproducir) repro); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // terminal_casos ::= def_fun_ordenar 
            {
              Object RESULT =null;
		int funOrderleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funOrderright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funOrder = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOpFuncionesNativas nodo = new NodoOpFuncionesNativas(); nodo.capturarOrdenaar((FuncionesArreglo) funOrder); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // terminal_casos ::= def_fun_sumarizar 
            {
              Object RESULT =null;
		int sumarileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumariright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sumari = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOpFuncionesNativas nodo = new NodoOpFuncionesNativas(); nodo.capturarOrdenaar((FuncionesArreglo) sumari); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // terminal_casos ::= def_fun_longitud 
            {
              Object RESULT =null;
		int longsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int longsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object longs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOpFuncionesNativas nodo = new NodoOpFuncionesNativas(); nodo.capturarOrdenaar((FuncionesArreglo) longs); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // def_funciones ::= comodin_fun LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Funcion funs = (Funcion) fun; funs.setInstruccions((ArrayList<Instruccions>) sent); parametros.clear(); RESULT = funs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funciones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // def_funciones ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funciones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comodin_fun ::= KEEP tipo_fun ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (TipoDato)tip); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // comodin_fun ::= KEEP ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // comodin_fun ::= tipo_fun ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (TipoDato)tip); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comodin_fun ::= ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comodin_fun ::= error LLAVEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cierre_fun ::= parametros PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_fun",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cierre_fun ::= PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_fun",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo_fun ::= ENTERO 
            {
              Object RESULT =null;
		RESULT =TipoDato.ENTERO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo_fun ::= DOBLE 
            {
              Object RESULT =null;
		RESULT =TipoDato.DECIMAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipo_fun ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT =TipoDato.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipo_fun ::= CADENA 
            {
              Object RESULT =null;
		RESULT =TipoDato.CADENA;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipo_fun ::= CARACTER 
            {
              Object RESULT =null;
		RESULT =TipoDato.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametros ::= comodin_param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametros ::= comodin_param COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametros ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comodin_param ::= tipo ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parametros.add(new Variable((Token)id, tipo, "",false));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Instruccions> arr= (ArrayList<Instruccions>)array; arr.add(0,(Instruccions)sent); RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencias ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Instruccions>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencias ::= error sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencia ::= variables_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionVar((ArrayList<Variable>)array,asigna,(Operation) instrOp) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencia ::= asignacion_var_fun 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = asig;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencia ::= op_incremt_decremet_fun PUNTOCOMA 
            {
              Object RESULT =null;
		int decrIncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decrIncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decrInc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = decrInc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencia ::= llamada_metod PUNTOCOMA 
            {
              Object RESULT =null;
		int metodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int metodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object metod = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parametroLllmada.clear(); RESULT = new LlamadaFuncion((NodoOperation) metod);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencia ::= sentencias_bifuraciones 
            {
              Object RESULT =null;
		int sentbifuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentbifuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sentbifu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sentbifu;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencia ::= RETORNA asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaRetorna((Operation) op, (Token) tok, errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencia ::= fun_mensaje 
            {
              Object RESULT =null;
		int funMjsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funMjsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funMjs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funMjs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencia ::= def_fun_reproducir PUNTOCOMA 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = repro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencia ::= def_fun_esperar PUNTOCOMA 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = repro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencia ::= decla_array_inicializado 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setSizeArray(0); cont = 0; contDimes = 0; pista.getTableSimbolGoblal().getIds().clear(); RESULT = arreglo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencia ::= decla_arry 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setSizeArray(0); cont = 0; contDimes = 0; pista.getTableSimbolGoblal().getIds().clear(); RESULT = arreglo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencia ::= asig_arreglo 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = asig;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencia ::= def_fun_ordenar PUNTOCOMA 
            {
              Object RESULT =null;
		int ordeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object orde = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = orde;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencia ::= def_fun_sumarizar PUNTOCOMA 
            {
              Object RESULT =null;
		int sumarileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumariright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sumari = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = sumari;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencia ::= CONTINUAR 
            {
              Object RESULT =null;
		RESULT = new SentenciaContinuar();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencia ::= def_fun_longitud PUNTOCOMA 
            {
              Object RESULT =null;
		int longsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int longsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object longs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = longs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia ::= SALIR 
            {
              Object RESULT =null;
		RESULT = new SentenciaContinuar();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // asignacion_var_fun ::= ID IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Asignacion((Operation)op,(Token)id,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_var_fun",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // asignacion_var_fun ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_var_fun",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // variables_fun ::= VAR tipo items_coma_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT  = array;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables_fun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // items_coma_fun ::= ID items_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Variable> arryTmp = (ArrayList<Variable>) array; arryTmp.add( new Variable((Token)id,tipo, "", asigna)); RESULT = arryTmp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma_fun",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // items_fun ::= IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Variable>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // items_fun ::= COMA items_coma_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = array;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // items_fun ::= PUNTOCOMA 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Variable>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // items_fun ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // op_incremt_decremet_fun ::= ID SUMA_IMPLICITA terminales_increment_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, (NodoOperation) nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // op_incremt_decremet_fun ::= ID INCREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // op_incremt_decremet_fun ::= ID DECREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.RESTA, nodLeft, nodRight); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // op_incremt_decremet_fun ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // terminales_increment_fun ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // terminales_increment_fun ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // terminales_increment_fun ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // llamada_metod ::= ID PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new NodoOperation((Token) id, parametroLllmada,pista);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metod",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parametros_llamada ::= terminal_casos_param COMA parametros_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parametros_llamada ::= terminal_casos_param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parametros_llamada ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // parametros_llamada ::= error PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // terminal_casos_param ::= asignacion 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parametroLllmada.add((Operation) asig);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencias_bifuraciones ::= def_if_complete 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencias_bifuraciones ::= def_switch 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencias_bifuraciones ::= def_for 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencias_bifuraciones ::= def_while 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencias_bifuraciones ::= def_do_while 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // condition ::= operation 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation((NodoOperation) rootOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // def_if_complete ::= def_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = senIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // def_if_complete ::= def_if def_else 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senElse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElse((SentenciaElse) senElse); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // def_if_complete ::= def_if def_else_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senIfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIfs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElseIf((SentenciaIF) senIfs); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // def_if ::= SI PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaIF((ArrayList<Instruccions>) sent,(Operation)op, new TablaSimbol(errorsSemanticos) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // def_else ::= SINO LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaElse((ArrayList<Instruccions>) sent, new TablaSimbol(errorsSemanticos) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // def_else_if ::= SINO def_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = senIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // def_else_if ::= SINO def_if def_else 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senElse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElse((SentenciaElse) senElse); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // def_else_if ::= SINO def_if def_else_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senIfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIfs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElseIf((SentenciaIF) senIfs); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // def_switch ::= SWITCH PARENTESISA ID PARENTESISC LLAVEA cases LLAVEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arryCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arryCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arryC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaSwitch((ArrayList<CasoSwitch> ) arryC, new Variable((Token) id, TipoDato.ENTERO, "",false),  new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_switch",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // cases ::= caso_sw SALIR cases 
            {
              Object RESULT =null;
		int cassleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cassright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cass = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arryCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arryCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arryC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<CasoSwitch> arr = (ArrayList<CasoSwitch>)arryC; arr.add(0,(CasoSwitch)cass); RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // cases ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<CasoSwitch>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // cases ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // caso_sw ::= CASO terminales_switch DOPUNTO sentencias_sw 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoSwitch((ArrayList<Instruccions>)inst,(Dato) dat);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // caso_sw ::= DEFAULT DOPUNTO sentencias_sw 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoSwitch((ArrayList<Instruccions>)inst,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // caso_sw ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // terminales_switch ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(false, (Token) val, TipoDato.ENTERO, val.getLexeme());;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // terminales_switch ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.ENTERO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // terminales_switch ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.DECIMAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // terminales_switch ::= CONT_CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.CADENA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // terminales_switch ::= CONT_CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.CHAR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // terminales_switch ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.BOOLEAN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // terminales_switch ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.BOOLEAN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // sentencias_sw ::= sentencia_sw sentencias_sw 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Instruccions> arr= (ArrayList<Instruccions>)array; arr.add(0,(Instruccions)sent); RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_sw",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // sentencias_sw ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Instruccions>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_sw",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // sentencia_sw ::= variables_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionVar((ArrayList<Variable>)array,asigna,(Operation) instrOp) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // sentencia_sw ::= asignacion_var_fun 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = asig;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // sentencia_sw ::= op_incremt_decremet_fun PUNTOCOMA 
            {
              Object RESULT =null;
		int decrIncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decrIncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decrInc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = decrInc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // sentencia_sw ::= llamada_metod PUNTOCOMA 
            {
              Object RESULT =null;
		int metodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int metodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object metod = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parametroLllmada.clear(); RESULT = new LlamadaFuncion((NodoOperation) metod);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // sentencia_sw ::= sentencias_bifuraciones 
            {
              Object RESULT =null;
		int sentbifuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentbifuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sentbifu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sentbifu;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // sentencia_sw ::= RETORNA asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaRetorna((Operation) op, (Token) tok, errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // sentencia_sw ::= fun_mensaje 
            {
              Object RESULT =null;
		int funMjsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funMjsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funMjs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funMjs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // sentencia_sw ::= def_fun_reproducir PUNTOCOMA 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = repro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // sentencia_sw ::= def_fun_esperar PUNTOCOMA 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = repro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // sentencia_sw ::= decla_array_inicializado 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setSizeArray(0); cont = 0; contDimes = 0; pista.getTableSimbolGoblal().getIds().clear(); RESULT = arreglo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // sentencia_sw ::= decla_arry 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setSizeArray(0); cont = 0; contDimes = 0; pista.getTableSimbolGoblal().getIds().clear(); RESULT = arreglo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // sentencia_sw ::= asig_arreglo 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = asig;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // sentencia_sw ::= def_fun_ordenar PUNTOCOMA 
            {
              Object RESULT =null;
		int ordeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object orde = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = orde;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // sentencia_sw ::= def_fun_sumarizar PUNTOCOMA 
            {
              Object RESULT =null;
		int sumarileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumariright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sumari = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = sumari;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // sentencia_sw ::= def_fun_longitud PUNTOCOMA 
            {
              Object RESULT =null;
		int longsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int longsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object longs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = longs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // sentencia_sw ::= CONTINUAR 
            {
              Object RESULT =null;
		RESULT = new SentenciaContinuar();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sw",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // def_for ::= PARA PARENTESISA condition_for PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int forsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int forsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object fors = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		SentenciaFor senFor = (SentenciaFor)fors; senFor.setInstruccions((ArrayList<Instruccions>) instr); RESULT = senFor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_for",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // condition_for ::= var_iterador PUNTOCOMA condition PUNTOCOMA op_incremt_decremet_for 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object condi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int incremleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int incremright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object increm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaFor((Instruccions)inst,  new TablaSimbol(errorsSemanticos), (Asignacion)increm, (Operation) condi);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_for",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // condition_for ::= error PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_for",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // var_iterador ::= ENTERO ID asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Variable> variables= new ArrayList<Variable>(); variables.add(new Variable((Token ) id, TipoDato.ENTERO, "", true)); RESULT = new DeclaracionVar(variables, true, (Operation)op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // var_iterador ::= DOBLE ID asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Variable> variables= new ArrayList<Variable>(); variables.add(new Variable((Token ) id, TipoDato.DECIMAL, "", true)); RESULT = new DeclaracionVar(variables, true, (Operation)op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // var_iterador ::= ID asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Asignacion((Operation) op, (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // var_iterador ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // asignacion_iterador ::= IGUAL ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // asignacion_iterador ::= IGUAL NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // asignacion_iterador ::= IGUAL DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // op_incremt_decremet_for ::= ID INCREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_for",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // op_incremt_decremet_for ::= ID DECREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.RESTA, nodLeft, nodRight); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_for",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // def_while ::= MIENTRAS PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaWhile((ArrayList<Instruccions> )sent, (Operation) cond, new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_while",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // def_do_while ::= HACER LLAVEA sentencias LLAVEC MIENTRAS PARENTESISA condition PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new SentenciaDoWhile((ArrayList<Instruccions> )sent, (Operation) cond, new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_do_while",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // fun_mensaje ::= MENSAJE PARENTESISA asignacion PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Mensaje((Operation) rootOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_mensaje",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // def_fun_principal ::= PRINCIPAL PARENTESISA PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (ArrayList<Instruccions>) inst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_principal",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // def_fun_reproducir ::= REPRODUCIR PARENTESISA def_sentencias_repro PARENTESISC 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = repro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_reproducir",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // def_sentencias_repro ::= def_nota_musical COMA asignacion COMA asignacion COMA asignacion 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int octleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int octright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object oct = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int milisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int milisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object milis = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int canleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int canright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object can = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaReproducir((String) not, (Operation) oct, (Operation) milis, (Operation) can) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_sentencias_repro",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // def_nota_musical ::= NOTA_DO 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // def_nota_musical ::= NOTA_DO_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // def_nota_musical ::= NOTA_RE 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // def_nota_musical ::= NOTA_RE_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // def_nota_musical ::= NOTA_MI 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // def_nota_musical ::= NOTA_FA 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // def_nota_musical ::= NOTA_FA_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // def_nota_musical ::= NOTA_SOL 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // def_nota_musical ::= NOTA_SOL_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // def_nota_musical ::= NOTA_LA 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // def_nota_musical ::= NOTA_LA_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // def_nota_musical ::= SI 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // def_nota_musical ::= error COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // def_fun_esperar ::= ESPERAR PARENTESISA asignacion COMA asignacion PARENTESISC 
            {
              Object RESULT =null;
		int milisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int milisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object milis = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int canleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int canright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object can = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaReproducir("Z", (Operation) milis, (Operation) can) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_esperar",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // def_fun_arreglo ::= def_tipo_arreglo def_sin_dimens IGUAL asignacion_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.capturarArregloGlobales(tipo, cont, contDimes, (ArrayList<Operation>)arrOp ); cont = 0; contDimes = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_arreglo",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // def_fun_arreglo ::= def_tipo_arreglo def_dimension_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.captruarDeclaracionArreglo(tipo, (ArrayList<Operation>) arrOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_arreglo",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // def_tipo_arreglo ::= VAR tipo ARREGLO ids CORCHETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_tipo_arreglo",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // def_tipo_arreglo ::= error CORCHETC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_tipo_arreglo",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // ids ::= ID COMA ids 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		pista.getTableSimbolGoblal().capturarIdsArr((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ids ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.getTableSimbolGoblal().capturarIdsArr((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // def_dimension_arreglo ::= asignacion CORCHETC CORCHETA def_dimension_arreglo 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Operation> operations =( ArrayList<Operation>) arrs; operations.add(0,(Operation)op); RESULT = operations; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_dimension_arreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // def_dimension_arreglo ::= asignacion CORCHETC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ArrayList<Operation> operations = new ArrayList<>(); operations.add((Operation)op); RESULT = operations;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_dimension_arreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // def_dimension_arreglo ::= error CORCHETC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_dimension_arreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // def_sin_dimens ::= CORCHETC CORCHETA def_sin_dimens 
            {
              Object RESULT =null;
		cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_sin_dimens",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // def_sin_dimens ::= CORCHETC 
            {
              Object RESULT =null;
		cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_sin_dimens",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // asignacion_arreglo ::= LLAVEA asignaciones_recursivas LLAVEC 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		contDimes++; RESULT = arr ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // asignacion_arreglo ::= LLAVEA varios_dimensiones LLAVEC 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = arr ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // asignacion_arreglo ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // varios_dimensiones ::= LLAVEA asignaciones_recursivas LLAVEC COMA varios_dimensiones 
            {
              Object RESULT =null;
		int arr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object arr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		contDimes++; RESULT = pista.unirOperaciones((ArrayList<Operation>) arr1, (ArrayList<Operation>) arr2, (Token) tok);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varios_dimensiones",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // varios_dimensiones ::= LLAVEA asignaciones_recursivas LLAVEC 
            {
              Object RESULT =null;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		contDimes++; RESULT = arrs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varios_dimensiones",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // asignaciones_recursivas ::= asignacion COMA asignaciones_recursivas 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Operation> operations =( ArrayList<Operation>) arrs; operations.add(0,(Operation)op); RESULT = operations; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones_recursivas",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // asignaciones_recursivas ::= asignacion 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Operation> operations = new ArrayList<>(); operations.add((Operation)op); RESULT = operations;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones_recursivas",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // decla_array_inicializado ::= def_tipo_arreglo_fun def_sin_dimens IGUAL asignacion_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ManejadorArreglos(pista.getSizeArray(), (ArrayList<Operation>) arrOp, pista.getTableSimbolGoblal().getIds(), tipo, cont, contDimes, errorsSemanticos);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decla_array_inicializado",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // decla_arry ::= def_tipo_arreglo_fun def_dimension_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ManejadorArreglos(tipo, null, (ArrayList<Operation>) arrOp, pista.getTableSimbolGoblal().getIds());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decla_arry",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // def_tipo_arreglo_fun ::= VAR tipo ARREGLO ids_fun CORCHETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_tipo_arreglo_fun",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // ids_fun ::= ID COMA ids 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		pista.getTableSimbolGoblal().capturarIdsFun((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids_fun",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // ids_fun ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.getTableSimbolGoblal().capturarIdsFun((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids_fun",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // asig_arreglo ::= ID CORCHETA def_dimension_arreglo IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Asignacion((Operation) rootOp, (Token) id, (ArrayList<Operation>) arr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig_arreglo",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // valor_arreglo ::= ID CORCHETA def_dimension_arreglo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) id,TipoDato.ENTERO, (ArrayList<Operation>) arr));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_arreglo",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // def_fun_ordenar ::= ORDENAR PARENTESISA ID COMA formaOrdenar PARENTESISC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoOrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoOrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipoOr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FuncionesArreglo((Token) id, (TipoOrdenamiento) tipoOr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_ordenar",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // formaOrdenar ::= ASCENDENTE 
            {
              Object RESULT =null;
		RESULT = TipoOrdenamiento.ASCENDENTE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // formaOrdenar ::= DESCENDENTE 
            {
              Object RESULT =null;
		RESULT = TipoOrdenamiento.DESCENDENTE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // formaOrdenar ::= PARES 
            {
              Object RESULT =null;
		RESULT = TipoOrdenamiento.PARES;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // formaOrdenar ::= IMPARES 
            {
              Object RESULT =null;
		RESULT = TipoOrdenamiento.IMPARES;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // formaOrdenar ::= PRIMOS 
            {
              Object RESULT =null;
		RESULT = TipoOrdenamiento.PRIMOS;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // def_fun_sumarizar ::= SUMARIZAR PARENTESISA ID PARENTESISC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FuncionesArreglo((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_sumarizar",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // def_fun_longitud ::= LONGITUD PARENTESISA ID PARENTESISC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FuncionesArreglo((Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_longitud",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // def_fun_longitud ::= LONGITUD PARENTESISA CONT_CADENA PARENTESISC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FuncionesArreglo((String) id.getLexeme(), true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_longitud",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
