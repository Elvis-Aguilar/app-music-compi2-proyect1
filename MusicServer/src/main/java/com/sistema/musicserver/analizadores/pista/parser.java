
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.sistema.musicserver.analizadores.pista;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.sistema.musicserver.pista.Pista;
import com.sistema.musicserver.tablaSimbol.TablaSimbol;
import com.sistema.musicserver.instrucciones.declaracionAsignacion.*;
import com.sistema.musicserver.errors.ErrorSemantico;
import com.sistema.musicserver.tablaSimbol.Variable;
import com.sistema.musicserver.instrucciones.funciones.*;
import com.sistema.musicserver.instrucciones.Instruccions;
import com.sistema.musicserver.instrucciones.bifurcaciones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\006\000\002\004\004\000\002\004\005" +
    "\000\002\005\005\000\002\006\005\000\002\006\002\000" +
    "\002\007\004\000\002\007\002\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\003\000\002\011\004\000\002\012\005\000\002\014\004" +
    "\000\002\015\005\000\002\015\004\000\002\015\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\021\006\000\002\016" +
    "\003\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\004\000\002\017\004\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\003\000\002\017\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\026\006\000\002\022\007\000\002\022\006\000" +
    "\002\022\006\000\002\022\005\000\002\025\004\000\002" +
    "\025\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\023\003" +
    "\000\002\023\005\000\002\024\004\000\002\035\004\000" +
    "\002\035\002\000\002\027\003\000\002\027\003\000\002" +
    "\027\004\000\002\027\004\000\002\027\003\000\002\027" +
    "\005\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\031\006\000\002\030\005\000\002\033\004\000" +
    "\002\034\005\000\002\034\004\000\002\034\003\000\002" +
    "\032\005\000\002\032\004\000\002\032\004\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\037\006" +
    "\000\002\040\005\000\002\040\003\000\002\040\002\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\045\003\000" +
    "\002\044\003\000\002\044\004\000\002\044\004\000\002" +
    "\043\011\000\002\042\006\000\002\041\004\000\002\041" +
    "\005\000\002\041\005\000\002\052\011\000\002\051\005" +
    "\000\002\051\002\000\002\050\006\000\002\050\005\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\056\011\000\002\055\007\000\002\054\005" +
    "\000\002\054\005\000\002\054\004\000\002\062\004\000" +
    "\002\062\004\000\002\062\004\000\002\053\004\000\002" +
    "\053\004\000\002\057\011\000\002\060\013\000\002\065" +
    "\007\000\002\064\010\000\002\066\007\000\002\070\011" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\071\011" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\006\002\uffff\004\005\001\002\000\004\007" +
    "\021\001\002\000\004\005\011\001\002\000\004\002\010" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002\000\006\006\012\007\ufffd\001\002\000\004\005\014" +
    "\001\002\000\004\007\ufffc\001\002\000\006\007\ufff9\011" +
    "\015\001\002\000\004\005\017\001\002\000\004\007\ufffb" +
    "\001\002\000\006\007\ufff9\011\015\001\002\000\004\007" +
    "\ufffa\001\002\000\026\005\027\010\ufff7\036\041\037\035" +
    "\040\032\041\023\042\031\045\043\046\022\105\034\001" +
    "\002\000\020\005\u0130\036\041\037\035\040\032\041\023" +
    "\042\031\045\043\001\002\000\004\005\uffbd\001\002\000" +
    "\026\005\ufff3\010\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\045\ufff3\046\ufff3\105\ufff3\001\002\000\026\005" +
    "\ufff6\010\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\045\ufff6\046\ufff6\105\ufff6\001\002\000\026\005\ufff2\010" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\045\ufff2" +
    "\046\ufff2\105\ufff2\001\002\000\006\012\u012c\043\u012b\001" +
    "\002\000\004\005\u0120\001\002\000\004\005\uffbc\001\002" +
    "\000\004\005\uffbe\001\002\000\004\010\u011f\001\002\000" +
    "\004\012\u011a\001\002\000\004\005\uffbf\001\002\000\004" +
    "\007\164\001\002\000\026\005\ufff4\010\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\042\ufff4\045\ufff4\046\ufff4\105\ufff4" +
    "\001\002\000\026\005\ufff5\010\ufff5\036\ufff5\037\ufff5\040" +
    "\ufff5\041\ufff5\042\ufff5\045\ufff5\046\ufff5\105\ufff5\001\002" +
    "\000\004\005\uffc0\001\002\000\026\005\027\010\ufff7\036" +
    "\041\037\035\040\032\041\023\042\031\045\043\046\022" +
    "\105\034\001\002\000\014\036\050\037\044\040\047\041" +
    "\051\042\046\001\002\000\004\005\uffea\001\002\000\004" +
    "\005\052\001\002\000\004\005\uffe7\001\002\000\004\005" +
    "\uffe9\001\002\000\004\005\uffeb\001\002\000\004\005\uffe8" +
    "\001\002\000\010\011\054\043\056\044\057\001\002\000" +
    "\026\005\ufff0\010\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\045\ufff0\046\ufff0\105\ufff0\001\002\000\004\005" +
    "\052\001\002\000\026\005\uffef\010\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\045\uffef\046\uffef\105\uffef\001" +
    "\002\000\026\005\071\012\066\014\061\015\060\016\074" +
    "\017\063\020\062\021\072\047\070\056\073\001\002\000" +
    "\026\005\uffec\010\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\045\uffec\046\uffec\105\uffec\001\002\000\052\011" +
    "\uffcc\013\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\044\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\001\002\000\052\011\uffcd\013\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\044\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\001\002\000\052\011\uffc9\013\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\044\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\001\002\000" +
    "\052\011\uffca\013\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\044\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\055\uffca\001\002\000\052\011\uffe5\013\uffe5\022\107\023" +
    "\102\024\104\025\113\026\111\027\101\030\117\031\106" +
    "\032\105\033\110\034\103\035\114\044\uffe5\051\116\052" +
    "\100\053\115\054\077\055\112\001\002\000\052\011\uffd1" +
    "\013\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\044\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\001" +
    "\002\000\026\005\071\012\066\014\061\015\060\016\074" +
    "\017\063\020\062\021\072\047\070\056\073\001\002\000" +
    "\004\044\157\001\002\000\026\005\071\012\066\014\061" +
    "\015\060\016\074\017\063\020\062\021\072\047\070\056" +
    "\073\001\002\000\054\011\uffcf\012\141\013\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\044\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\001\002\000\052\011" +
    "\uffc8\013\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\044\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\001\002\000\026\005\071\012\066\014\061\015\060\016" +
    "\074\017\063\020\062\021\072\047\070\056\073\001\002" +
    "\000\052\011\uffcb\013\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\044\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\001\002\000\052\011\uffce\013\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\044\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\001\002\000\052\011" +
    "\uffd7\013\uffd7\022\107\023\102\024\104\025\113\026\111" +
    "\027\101\030\117\031\106\032\105\033\110\034\103\035" +
    "\114\044\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\001\002\000\026\005\071\012\066\014\061\015\060\016" +
    "\074\017\063\020\062\021\072\047\070\056\073\001\002" +
    "\000\026\005\071\012\066\014\061\015\060\016\074\017" +
    "\063\020\062\021\072\047\070\056\073\001\002\000\026" +
    "\005\071\012\066\014\061\015\060\016\074\017\063\020" +
    "\062\021\072\047\070\056\073\001\002\000\026\005\071" +
    "\012\066\014\061\015\060\016\074\017\063\020\062\021" +
    "\072\047\070\056\073\001\002\000\026\005\071\012\066" +
    "\014\061\015\060\016\074\017\063\020\062\021\072\047" +
    "\070\056\073\001\002\000\026\005\071\012\066\014\061" +
    "\015\060\016\074\017\063\020\062\021\072\047\070\056" +
    "\073\001\002\000\026\005\071\012\066\014\061\015\060" +
    "\016\074\017\063\020\062\021\072\047\070\056\073\001" +
    "\002\000\026\005\071\012\066\014\061\015\060\016\074" +
    "\017\063\020\062\021\072\047\070\056\073\001\002\000" +
    "\026\005\071\012\066\014\061\015\060\016\074\017\063" +
    "\020\062\021\072\047\070\056\073\001\002\000\026\005" +
    "\071\012\066\014\061\015\060\016\074\017\063\020\062" +
    "\021\072\047\070\056\073\001\002\000\026\005\071\012" +
    "\066\014\061\015\060\016\074\017\063\020\062\021\072" +
    "\047\070\056\073\001\002\000\026\005\071\012\066\014" +
    "\061\015\060\016\074\017\063\020\062\021\072\047\070" +
    "\056\073\001\002\000\026\005\071\012\066\014\061\015" +
    "\060\016\074\017\063\020\062\021\072\047\070\056\073" +
    "\001\002\000\026\005\071\012\066\014\061\015\060\016" +
    "\074\017\063\020\062\021\072\047\070\056\073\001\002" +
    "\000\026\005\071\012\066\014\061\015\060\016\074\017" +
    "\063\020\062\021\072\047\070\056\073\001\002\000\026" +
    "\005\071\012\066\014\061\015\060\016\074\017\063\020" +
    "\062\021\072\047\070\056\073\001\002\000\026\005\071" +
    "\012\066\014\061\015\060\016\074\017\063\020\062\021" +
    "\072\047\070\056\073\001\002\000\052\011\uffde\013\uffde" +
    "\022\107\023\102\024\104\025\113\026\111\027\101\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\044\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\001\002\000" +
    "\052\011\uffd6\013\uffd6\022\107\023\102\024\104\025\113" +
    "\026\111\027\101\030\117\031\106\032\105\033\110\034" +
    "\103\035\114\044\uffd6\051\uffd6\052\uffd6\053\uffd6\054\077" +
    "\055\112\001\002\000\052\011\uffd3\013\uffd3\022\107\023" +
    "\102\024\104\025\113\026\111\027\101\030\117\031\106" +
    "\032\105\033\110\034\103\035\114\044\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\077\055\112\001\002\000\052\011\uffd9" +
    "\013\uffd9\022\107\023\102\024\104\025\113\026\111\027" +
    "\101\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\044\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\001" +
    "\002\000\052\011\uffe1\013\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\101\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\044\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\001\002\000\052\011\uffd4\013\uffd4\022" +
    "\107\023\102\024\104\025\113\026\111\027\101\030\117" +
    "\031\106\032\105\033\110\034\103\035\114\044\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\001\002\000\052" +
    "\011\uffe0\013\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\101\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\044\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055" +
    "\uffe0\001\002\000\052\011\uffdb\013\uffdb\022\107\023\102" +
    "\024\104\025\113\026\111\027\101\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\044\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\001\002\000\052\011\uffe4\013" +
    "\uffe4\022\uffe4\023\uffe4\024\104\025\113\026\111\027\101" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\044" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\001\002" +
    "\000\052\011\uffdd\013\uffdd\022\107\023\102\024\104\025" +
    "\113\026\111\027\101\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\044\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\001\002\000\052\011\uffdc\013\uffdc\022\107" +
    "\023\102\024\104\025\113\026\111\027\101\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\044\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\001\002\000\052\011" +
    "\uffe2\013\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\101\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\044\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\001\002\000\052\011\uffda\013\uffda\022\107\023\102\024" +
    "\104\025\113\026\111\027\101\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\044\uffda\051\uffda\052\uffda\053" +
    "\uffda\054\uffda\055\uffda\001\002\000\052\011\uffe3\013\uffe3" +
    "\022\uffe3\023\uffe3\024\104\025\113\026\111\027\101\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\044\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\001\002\000" +
    "\052\011\uffdf\013\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\044\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\001\002\000\052\011\uffd2\013\uffd2\022\107\023" +
    "\102\024\104\025\113\026\111\027\101\030\117\031\106" +
    "\032\105\033\110\034\103\035\114\044\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\054\077\055\112\001\002\000\052\011\uffd5" +
    "\013\uffd5\022\107\023\102\024\104\025\113\026\111\027" +
    "\101\030\117\031\106\032\105\033\110\034\103\035\114" +
    "\044\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\001" +
    "\002\000\022\005\150\013\uff9e\014\143\015\142\016\152" +
    "\017\146\020\144\021\151\001\002\000\006\011\uff9b\013" +
    "\uff9b\001\002\000\006\011\uff9c\013\uff9c\001\002\000\006" +
    "\011\uff98\013\uff98\001\002\000\006\011\154\013\uff9f\001" +
    "\002\000\006\011\uff99\013\uff99\001\002\000\004\013\153" +
    "\001\002\000\006\011\uff9d\013\uff9d\001\002\000\006\011" +
    "\uff97\013\uff97\001\002\000\006\011\uff9a\013\uff9a\001\002" +
    "\000\052\011\uffa1\013\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\044\uffa1\051\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\001\002\000\022\005\150\013\uff9e\014\143" +
    "\015\142\016\152\017\146\020\144\021\151\001\002\000" +
    "\004\013\uffa0\001\002\000\052\011\uffd8\013\uffd8\022\107" +
    "\023\102\024\104\025\113\026\111\027\101\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\044\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\054\uffd8\055\uffd8\001\002\000\026\005" +
    "\uffee\010\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\045\uffee\046\uffee\105\uffee\001\002\000\046\013\161\022" +
    "\107\023\102\024\104\025\113\026\111\027\101\030\117" +
    "\031\106\032\105\033\110\034\103\035\114\051\116\052" +
    "\100\053\115\054\077\055\112\001\002\000\052\011\uffd0" +
    "\013\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\044\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\001" +
    "\002\000\026\005\uffed\010\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\045\uffed\046\uffed\105\uffed\001\002\000" +
    "\004\010\ufff8\001\002\000\032\005\175\010\uffb7\045\215" +
    "\050\211\062\205\065\173\071\174\072\212\073\202\100" +
    "\217\101\216\107\206\001\002\000\034\005\uffb2\010\uffb2" +
    "\045\uffb2\050\uffb2\062\uffb2\065\uffb2\066\uffb2\071\uffb2\072" +
    "\uffb2\073\uffb2\100\uffb2\101\uffb2\107\uffb2\001\002\000\034" +
    "\005\uff92\010\uff92\045\uff92\050\uff92\062\uff92\065\uff92\066" +
    "\uff92\071\uff92\072\uff92\073\uff92\100\uff92\101\uff92\107\uff92" +
    "\001\002\000\004\010\u0119\001\002\000\034\005\uff96\010" +
    "\uff96\045\uff96\050\uff96\062\uff96\065\uff96\066\uff96\071\uff96" +
    "\072\uff96\073\uff96\100\uff96\101\uff96\107\uff96\001\002\000" +
    "\034\005\uff94\010\uff94\045\uff94\050\uff94\062\uff94\065\uff94" +
    "\066\uff94\071\uff94\072\uff94\073\uff94\100\uff94\101\uff94\107" +
    "\uff94\001\002\000\034\005\uffae\010\uffae\045\uffae\050\uffae" +
    "\062\uffae\065\uffae\066\uffae\071\uffae\072\uffae\073\uffae\100" +
    "\uffae\101\uffae\107\uffae\001\002\000\004\012\u0102\001\002" +
    "\000\004\012\350\001\002\000\014\012\141\043\337\057" +
    "\341\060\340\061\336\001\002\000\034\005\175\010\uffb7" +
    "\045\215\050\211\062\205\065\173\066\uffb7\071\174\072" +
    "\212\073\202\100\217\101\216\107\206\001\002\000\034" +
    "\005\uffaf\010\uffaf\045\uffaf\050\uffaf\062\uffaf\065\uffaf\066" +
    "\uffaf\071\uffaf\072\uffaf\073\uffaf\100\uffaf\101\uffaf\107\uffaf" +
    "\001\002\000\004\044\334\001\002\000\034\005\uff95\010" +
    "\uff95\045\uff95\050\uff95\062\uff95\065\uff95\066\uff95\071\uff95" +
    "\072\uff95\073\uff95\100\uff95\101\uff95\107\uff95\001\002\000" +
    "\026\005\071\012\066\014\061\015\060\016\074\017\063" +
    "\020\062\021\072\047\070\056\073\001\002\000\034\005" +
    "\uff93\010\uff93\045\uff93\050\uff93\062\uff93\065\uff93\066\uff93" +
    "\071\uff93\072\uff93\073\uff93\100\uff93\101\uff93\107\uff93\001" +
    "\002\000\034\005\uffb5\010\uffb5\045\uffb5\050\uffb5\062\uffb5" +
    "\065\uffb5\066\uffb5\071\uffb5\072\uffb5\073\uffb5\100\uffb5\101" +
    "\uffb5\107\uffb5\001\002\000\004\012\324\001\002\000\004" +
    "\012\275\001\002\000\034\005\uffb0\010\uffb0\045\uffb0\050" +
    "\uffb0\062\uffb0\065\uffb0\066\uffb0\071\uffb0\072\uffb0\073\uffb0" +
    "\100\uffb0\101\uffb0\107\uffb0\001\002\000\036\005\uff90\010" +
    "\uff90\045\uff90\050\uff90\062\uff90\063\265\065\uff90\066\uff90" +
    "\071\uff90\072\uff90\073\uff90\100\uff90\101\uff90\107\uff90\001" +
    "\002\000\004\012\256\001\002\000\004\007\245\001\002" +
    "\000\004\044\244\001\002\000\034\005\uffb6\010\uffb6\045" +
    "\uffb6\050\uffb6\062\uffb6\065\uffb6\066\uffb6\071\uffb6\072\uffb6" +
    "\073\uffb6\100\uffb6\101\uffb6\107\uffb6\001\002\000\014\036" +
    "\050\037\044\040\047\041\051\042\046\001\002\000\004" +
    "\012\226\001\002\000\004\012\220\001\002\000\026\005" +
    "\071\012\066\014\061\015\060\016\074\017\063\020\062" +
    "\021\072\047\070\056\073\001\002\000\004\011\222\001" +
    "\002\000\026\005\071\012\066\014\061\015\060\016\074" +
    "\017\063\020\062\021\072\047\070\056\073\001\002\000" +
    "\004\013\224\001\002\000\004\044\225\001\002\000\034" +
    "\005\uff60\010\uff60\045\uff60\050\uff60\062\uff60\065\uff60\066" +
    "\uff60\071\uff60\072\uff60\073\uff60\100\uff60\101\uff60\107\uff60" +
    "\001\002\000\026\005\071\012\066\014\061\015\060\016" +
    "\074\017\063\020\062\021\072\047\070\056\073\001\002" +
    "\000\004\013\230\001\002\000\004\044\231\001\002\000" +
    "\034\005\uff70\010\uff70\045\uff70\050\uff70\062\uff70\065\uff70" +
    "\066\uff70\071\uff70\072\uff70\073\uff70\100\uff70\101\uff70\107" +
    "\uff70\001\002\000\004\005\233\001\002\000\010\011\235" +
    "\043\236\044\240\001\002\000\034\005\uffac\010\uffac\045" +
    "\uffac\050\uffac\062\uffac\065\uffac\066\uffac\071\uffac\072\uffac" +
    "\073\uffac\100\uffac\101\uffac\107\uffac\001\002\000\004\005" +
    "\233\001\002\000\026\005\071\012\066\014\061\015\060" +
    "\016\074\017\063\020\062\021\072\047\070\056\073\001" +
    "\002\000\034\005\uffab\010\uffab\045\uffab\050\uffab\062\uffab" +
    "\065\uffab\066\uffab\071\uffab\072\uffab\073\uffab\100\uffab\101" +
    "\uffab\107\uffab\001\002\000\034\005\uffa8\010\uffa8\045\uffa8" +
    "\050\uffa8\062\uffa8\065\uffa8\066\uffa8\071\uffa8\072\uffa8\073" +
    "\uffa8\100\uffa8\101\uffa8\107\uffa8\001\002\000\004\044\242" +
    "\001\002\000\034\005\uffaa\010\uffaa\045\uffaa\050\uffaa\062" +
    "\uffaa\065\uffaa\066\uffaa\071\uffaa\072\uffaa\073\uffaa\100\uffaa" +
    "\101\uffaa\107\uffaa\001\002\000\034\005\uffa9\010\uffa9\045" +
    "\uffa9\050\uffa9\062\uffa9\065\uffa9\066\uffa9\071\uffa9\072\uffa9" +
    "\073\uffa9\100\uffa9\101\uffa9\107\uffa9\001\002\000\034\005" +
    "\uffb4\010\uffb4\045\uffb4\050\uffb4\062\uffb4\065\uffb4\066\uffb4" +
    "\071\uffb4\072\uffb4\073\uffb4\100\uffb4\101\uffb4\107\uffb4\001" +
    "\002\000\032\005\175\010\uffb7\045\215\050\211\062\205" +
    "\065\173\071\174\072\212\073\202\100\217\101\216\107" +
    "\206\001\002\000\004\010\247\001\002\000\004\050\250" +
    "\001\002\000\004\012\251\001\002\000\026\005\071\012" +
    "\066\014\061\015\060\016\074\017\063\020\062\021\072" +
    "\047\070\056\073\001\002\000\004\013\254\001\002\000" +
    "\050\013\uff91\022\107\023\102\024\104\025\113\026\111" +
    "\027\101\030\117\031\106\032\105\033\110\034\103\035" +
    "\114\044\uff91\051\116\052\100\053\115\054\077\055\112" +
    "\001\002\000\004\044\255\001\002\000\034\005\uff71\010" +
    "\uff71\045\uff71\050\uff71\062\uff71\065\uff71\066\uff71\071\uff71" +
    "\072\uff71\073\uff71\100\uff71\101\uff71\107\uff71\001\002\000" +
    "\026\005\071\012\066\014\061\015\060\016\074\017\063" +
    "\020\062\021\072\047\070\056\073\001\002\000\004\013" +
    "\260\001\002\000\004\007\261\001\002\000\032\005\175" +
    "\010\uffb7\045\215\050\211\062\205\065\173\071\174\072" +
    "\212\073\202\100\217\101\216\107\206\001\002\000\004" +
    "\010\263\001\002\000\034\005\uff72\010\uff72\045\uff72\050" +
    "\uff72\062\uff72\065\uff72\066\uff72\071\uff72\072\uff72\073\uff72" +
    "\100\uff72\101\uff72\107\uff72\001\002\000\034\005\uff8f\010" +
    "\uff8f\045\uff8f\050\uff8f\062\uff8f\065\uff8f\066\uff8f\071\uff8f" +
    "\072\uff8f\073\uff8f\100\uff8f\101\uff8f\107\uff8f\001\002\000" +
    "\006\007\267\062\205\001\002\000\034\005\uff8e\010\uff8e" +
    "\045\uff8e\050\uff8e\062\uff8e\065\uff8e\066\uff8e\071\uff8e\072" +
    "\uff8e\073\uff8e\100\uff8e\101\uff8e\107\uff8e\001\002\000\032" +
    "\005\175\010\uffb7\045\215\050\211\062\205\065\173\071" +
    "\174\072\212\073\202\100\217\101\216\107\206\001\002" +
    "\000\036\005\uff8b\010\uff8b\045\uff8b\050\uff8b\062\uff8b\063" +
    "\265\065\uff8b\066\uff8b\071\uff8b\072\uff8b\073\uff8b\100\uff8b" +
    "\101\uff8b\107\uff8b\001\002\000\034\005\uff8a\010\uff8a\045" +
    "\uff8a\050\uff8a\062\uff8a\065\uff8a\066\uff8a\071\uff8a\072\uff8a" +
    "\073\uff8a\100\uff8a\101\uff8a\107\uff8a\001\002\000\034\005" +
    "\uff89\010\uff89\045\uff89\050\uff89\062\uff89\065\uff89\066\uff89" +
    "\071\uff89\072\uff89\073\uff89\100\uff89\101\uff89\107\uff89\001" +
    "\002\000\004\010\274\001\002\000\034\005\uff8c\010\uff8c" +
    "\045\uff8c\050\uff8c\062\uff8c\065\uff8c\066\uff8c\071\uff8c\072" +
    "\uff8c\073\uff8c\100\uff8c\101\uff8c\107\uff8c\001\002\000\032" +
    "\110\311\111\304\112\300\113\310\114\313\115\307\116" +
    "\276\117\301\120\303\121\306\122\302\123\312\001\002" +
    "\000\004\011\uff66\001\002\000\004\011\316\001\002\000" +
    "\004\011\uff6a\001\002\000\004\011\uff65\001\002\000\004" +
    "\011\uff62\001\002\000\004\011\uff64\001\002\000\004\011" +
    "\uff6b\001\002\000\004\013\314\001\002\000\004\011\uff63" +
    "\001\002\000\004\011\uff67\001\002\000\004\011\uff69\001" +
    "\002\000\004\011\uff6c\001\002\000\004\011\uff61\001\002" +
    "\000\004\011\uff68\001\002\000\004\044\315\001\002\000" +
    "\034\005\uff6e\010\uff6e\045\uff6e\050\uff6e\062\uff6e\065\uff6e" +
    "\066\uff6e\071\uff6e\072\uff6e\073\uff6e\100\uff6e\101\uff6e\107" +
    "\uff6e\001\002\000\026\005\071\012\066\014\061\015\060" +
    "\016\074\017\063\020\062\021\072\047\070\056\073\001" +
    "\002\000\004\011\320\001\002\000\026\005\071\012\066" +
    "\014\061\015\060\016\074\017\063\020\062\021\072\047" +
    "\070\056\073\001\002\000\004\011\322\001\002\000\026" +
    "\005\071\012\066\014\061\015\060\016\074\017\063\020" +
    "\062\021\072\047\070\056\073\001\002\000\004\013\uff6d" +
    "\001\002\000\026\005\071\012\066\014\061\015\060\016" +
    "\074\017\063\020\062\021\072\047\070\056\073\001\002" +
    "\000\004\013\326\001\002\000\004\007\327\001\002\000" +
    "\032\005\175\010\uffb7\045\215\050\211\062\205\065\173" +
    "\071\174\072\212\073\202\100\217\101\216\107\206\001" +
    "\002\000\004\010\331\001\002\000\036\005\uff8d\010\uff8d" +
    "\045\uff8d\050\uff8d\062\uff8d\063\uff8d\065\uff8d\066\uff8d\071" +
    "\uff8d\072\uff8d\073\uff8d\100\uff8d\101\uff8d\107\uff8d\001\002" +
    "\000\046\022\107\023\102\024\104\025\113\026\111\027" +
    "\101\030\117\031\106\032\105\033\110\034\103\035\114" +
    "\044\333\051\116\052\100\053\115\054\077\055\112\001" +
    "\002\000\034\005\uffb1\010\uffb1\045\uffb1\050\uffb1\062\uffb1" +
    "\065\uffb1\066\uffb1\071\uffb1\072\uffb1\073\uffb1\100\uffb1\101" +
    "\uffb1\107\uffb1\001\002\000\034\005\uffb3\010\uffb3\045\uffb3" +
    "\050\uffb3\062\uffb3\065\uffb3\066\uffb3\071\uffb3\072\uffb3\073" +
    "\uffb3\100\uffb3\101\uffb3\107\uffb3\001\002\000\006\010\uffb8" +
    "\066\uffb8\001\002\000\004\044\uffa5\001\002\000\026\005" +
    "\071\012\066\014\061\015\060\016\074\017\063\020\062" +
    "\021\072\047\070\056\073\001\002\000\004\044\uffa6\001" +
    "\002\000\010\005\342\014\343\015\345\001\002\000\004" +
    "\044\uffa4\001\002\000\004\044\uffa3\001\002\000\004\044" +
    "\uffa7\001\002\000\004\044\uffa2\001\002\000\004\044\347" +
    "\001\002\000\034\005\uffad\010\uffad\045\uffad\050\uffad\062" +
    "\uffad\065\uffad\066\uffad\071\uffad\072\uffad\073\uffad\100\uffad" +
    "\101\uffad\107\uffad\001\002\000\010\005\352\036\355\037" +
    "\351\001\002\000\004\005\u0100\001\002\000\004\043\357" +
    "\001\002\000\004\013\373\001\002\000\004\044\364\001" +
    "\002\000\004\005\356\001\002\000\004\043\357\001\002" +
    "\000\010\005\361\014\362\015\363\001\002\000\004\044" +
    "\uff7a\001\002\000\004\044\uff77\001\002\000\004\044\uff76" +
    "\001\002\000\004\044\uff75\001\002\000\026\005\071\012" +
    "\066\014\061\015\060\016\074\017\063\020\062\021\072" +
    "\047\070\056\073\001\002\000\004\044\366\001\002\000" +
    "\004\005\367\001\002\000\006\060\372\061\371\001\002" +
    "\000\004\013\uff7b\001\002\000\004\013\uff73\001\002\000" +
    "\004\013\uff74\001\002\000\004\007\374\001\002\000\032" +
    "\005\175\010\uffb7\045\215\050\211\062\205\065\173\071" +
    "\174\072\212\073\202\100\217\101\216\107\206\001\002" +
    "\000\004\010\376\001\002\000\034\005\uff7c\010\uff7c\045" +
    "\uff7c\050\uff7c\062\uff7c\065\uff7c\066\uff7c\071\uff7c\072\uff7c" +
    "\073\uff7c\100\uff7c\101\uff7c\107\uff7c\001\002\000\004\044" +
    "\uff78\001\002\000\004\043\357\001\002\000\004\044\uff79" +
    "\001\002\000\004\005\u0103\001\002\000\004\013\u0104\001" +
    "\002\000\004\007\u0105\001\002\000\010\010\uff86\067\u0109" +
    "\070\u0106\001\002\000\004\064\u0117\001\002\000\004\010" +
    "\u0116\001\002\000\004\066\u0114\001\002\000\020\005\u010a" +
    "\014\u010d\015\u0111\016\u010b\017\u0110\020\u010e\021\u010f\001" +
    "\002\000\004\064\uff83\001\002\000\004\064\uff80\001\002" +
    "\000\004\064\u0112\001\002\000\004\064\uff82\001\002\000" +
    "\004\064\uff7e\001\002\000\004\064\uff7d\001\002\000\004" +
    "\064\uff7f\001\002\000\004\064\uff81\001\002\000\032\005" +
    "\175\045\215\050\211\062\205\065\173\066\uffb7\071\174" +
    "\072\212\073\202\100\217\101\216\107\206\001\002\000" +
    "\004\066\uff85\001\002\000\010\010\uff86\067\u0109\070\u0106" +
    "\001\002\000\004\010\uff87\001\002\000\034\005\uff88\010" +
    "\uff88\045\uff88\050\uff88\062\uff88\065\uff88\066\uff88\071\uff88" +
    "\072\uff88\073\uff88\100\uff88\101\uff88\107\uff88\001\002\000" +
    "\032\005\175\045\215\050\211\062\205\065\173\066\uffb7" +
    "\071\174\072\212\073\202\100\217\101\216\107\206\001" +
    "\002\000\004\066\uff84\001\002\000\026\005\uffc7\010\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\045\uffc7\046" +
    "\uffc7\105\uffc7\001\002\000\004\013\u011b\001\002\000\004" +
    "\007\u011c\001\002\000\032\005\175\010\uffb7\045\215\050" +
    "\211\062\205\065\173\071\174\072\212\073\202\100\217" +
    "\101\216\107\206\001\002\000\004\010\u011e\001\002\000" +
    "\026\005\uff6f\010\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f" +
    "\042\uff6f\045\uff6f\046\uff6f\105\uff6f\001\002\000\004\002" +
    "\ufffe\001\002\000\004\012\u0121\001\002\000\016\013\u0122" +
    "\036\050\037\044\040\047\041\051\042\046\001\002\000" +
    "\004\007\uffc1\001\002\000\006\011\u0129\013\uffbb\001\002" +
    "\000\004\005\u0128\001\002\000\004\013\u0127\001\002\000" +
    "\004\007\uffc4\001\002\000\004\007\uffc2\001\002\000\006" +
    "\011\uffb9\013\uffb9\001\002\000\014\036\050\037\044\040" +
    "\047\041\051\042\046\001\002\000\004\013\uffba\001\002" +
    "\000\026\005\071\012\066\014\061\015\060\016\074\017" +
    "\063\020\062\021\072\047\070\056\073\001\002\000\016" +
    "\013\u0122\036\050\037\044\040\047\041\051\042\046\001" +
    "\002\000\004\007\uffc3\001\002\000\004\044\u012f\001\002" +
    "\000\026\005\uffe6\010\uffe6\036\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\045\uffe6\046\uffe6\105\uffe6\001\002\000\004" +
    "\012\u0136\001\002\000\004\005\u0133\001\002\000\026\005" +
    "\ufff1\010\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1" +
    "\045\ufff1\046\ufff1\105\ufff1\001\002\000\004\012\u0134\001" +
    "\002\000\016\013\u0122\036\050\037\044\040\047\041\051" +
    "\042\046\001\002\000\004\007\uffc6\001\002\000\016\013" +
    "\u0122\036\050\037\044\040\047\041\051\042\046\001\002" +
    "\000\004\007\uffc5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\010\002\005\003\006\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\017\001" +
    "\001\000\002\001\001\000\024\007\032\010\041\011\024" +
    "\012\025\021\037\022\035\026\036\061\027\064\023\001" +
    "\001\000\006\012\u0131\061\u0130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\162\010\041\011\024\012" +
    "\025\021\037\022\035\026\036\061\027\064\023\001\001" +
    "\000\004\013\044\001\001\000\002\001\001\000\004\014" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\054\001\001\000" +
    "\002\001\001\000\004\014\161\001\001\000\002\001\001" +
    "\000\012\016\066\017\063\020\064\037\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\157\020\064\037\074\001\001\000\002" +
    "\001\001\000\010\017\155\020\064\037\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\075\020\064" +
    "\037\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\137\020\064\037\074\001\001" +
    "\000\010\017\136\020\064\037\074\001\001\000\010\017" +
    "\135\020\064\037\074\001\001\000\010\017\134\020\064" +
    "\037\074\001\001\000\010\017\133\020\064\037\074\001" +
    "\001\000\010\017\132\020\064\037\074\001\001\000\010" +
    "\017\131\020\064\037\074\001\001\000\010\017\130\020" +
    "\064\037\074\001\001\000\010\017\127\020\064\037\074" +
    "\001\001\000\010\017\126\020\064\037\074\001\001\000" +
    "\010\017\125\020\064\037\074\001\001\000\010\017\124" +
    "\020\064\037\074\001\001\000\010\017\123\020\064\037" +
    "\074\001\001\000\010\017\122\020\064\037\074\001\001" +
    "\000\010\017\121\020\064\037\074\001\001\000\010\017" +
    "\120\020\064\037\074\001\001\000\010\017\117\020\064" +
    "\037\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\146\063\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\154\063\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\027\175\030\213\031\203\032\212\035\166\037" +
    "\177\043\207\044\167\046\164\052\200\056\170\057\202" +
    "\060\165\065\206\066\176\071\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\027\175\030\213" +
    "\031\203\032\212\035\334\037\177\043\207\044\167\046" +
    "\164\052\200\056\170\057\202\060\165\065\206\066\176" +
    "\071\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\331\020\064\037\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\265\042\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\220\017\063\020" +
    "\064\037\074\001\001\000\002\001\001\000\012\016\222" +
    "\017\063\020\064\037\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\226\017\063" +
    "\020\064\037\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\233\001\001\000\004" +
    "\034\236\001\001\000\002\001\001\000\004\033\242\001" +
    "\001\000\012\016\240\017\063\020\064\037\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\027\175\030\213\031\203\032\212\035\245\037\177\043" +
    "\207\044\167\046\164\052\200\056\170\057\202\060\165" +
    "\065\206\066\176\071\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\252\020\064" +
    "\037\074\045\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\252" +
    "\020\064\037\074\045\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\027\175\030\213\031\203\032\212" +
    "\035\261\037\177\043\207\044\167\046\164\052\200\056" +
    "\170\057\202\060\165\065\206\066\176\071\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\267\001\001\000\002\001\001\000\042\027\175" +
    "\030\213\031\203\032\212\035\272\037\177\043\207\044" +
    "\167\046\164\052\200\056\170\057\202\060\165\065\206" +
    "\066\176\071\171\001\001\000\006\041\271\042\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\067\276\070\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\316\017\063\020\064\037\074\001\001\000\002\001" +
    "\001\000\012\016\320\017\063\020\064\037\074\001\001" +
    "\000\002\001\001\000\012\016\322\017\063\020\064\037" +
    "\074\001\001\000\002\001\001\000\012\017\252\020\064" +
    "\037\074\045\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\027\175\030\213\031\203\032\212\035\327" +
    "\037\177\043\207\044\167\046\164\052\200\056\170\057" +
    "\202\060\165\065\206\066\176\071\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\345\017\063\020\064\037\074\001\001\000" +
    "\002\001\001\000\004\036\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\054\353\055\352" +
    "\001\001\000\002\001\001\000\004\062\376\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\252\020\064\037\074\045\364\001\001\000\002\001" +
    "\001\000\004\053\367\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\027\175\030\213\031\203\032\212\035\374" +
    "\037\177\043\207\044\167\046\164\052\200\056\170\057" +
    "\202\060\165\065\206\066\176\071\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\050\u0107\051\u0106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\u010b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\027\175\030\213\031\203\032\212\035\u0112\037\177" +
    "\043\207\044\167\046\164\052\200\056\170\057\202\060" +
    "\165\065\206\066\176\071\171\001\001\000\002\001\001" +
    "\000\006\050\u0107\051\u0114\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\027\175\030\213\031\203\032\212" +
    "\035\u0117\037\177\043\207\044\167\046\164\052\200\056" +
    "\170\057\202\060\165\065\206\066\176\071\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\027\175\030\213\031\203\032\212" +
    "\035\u011c\037\177\043\207\044\167\046\164\052\200\056" +
    "\170\057\202\060\165\065\206\066\176\071\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\u0123\023\u0124\024\u0122\025\u0125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\u0123\023\u0129\024\u0122\001" +
    "\001\000\002\001\001\000\012\016\u012d\017\063\020\064" +
    "\037\074\001\001\000\012\013\u0123\023\u0124\024\u0122\025" +
    "\u012c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\u0123\023\u0124\024\u0122" +
    "\025\u0134\001\001\000\002\001\001\000\012\013\u0123\023" +
    "\u0124\024\u0122\025\u0136\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

        private TipoDato tipo;
        private Pista pista;
        private boolean asigna= false;
        private Operation instrOp;
        private ArrayList<ErrorSemantico> errorsSemanticos = new ArrayList<ErrorSemantico>();
        private ArrayList<Variable> parametros = new ArrayList<Variable>();
        private ArrayList<Dato> parametroLllmada = new ArrayList<>();


 /* Connect this parser to a scanner!*/
	public parser(LexerPista analizadorLexico) {
		super(analizadorLexico);
	}

       
        public ArrayList<ErrorSemantico> getErrorsSemanticos() {
                return errorsSemanticos;
        }

        public void setErrorsSemanticos(ArrayList<ErrorSemantico> errorsSemanticos) {
                this.errorsSemanticos = errorsSemanticos;
        }



        @Override
        public void syntax_error(Symbol tok) {
	    try{
	        Token token = (Token) tok.value;
	        report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
	    }catch(Exception e){
                e.printStackTrace();
	    }	
	}

/**
    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
             System.out.println("SE ESPERABA UNA LLAVE FINAL");  
        }else{
             Token token = (Token) cur_token.value;
	     report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
        }
    }
    
*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= def_pista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // def_pista ::= comodin_pista LLAVEA sentencias_global LLAVEC 
            {
              Object RESULT =null;
		pista.referenciarTablasPadres(); pista.tostringDAts();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_pista",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // comodin_pista ::= PISTA ID 
            {
              Object RESULT =null;
		int pistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token pist = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista = new Pista(pist.getLexeme(), new TablaSimbol(errorsSemanticos), errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comodin_pista ::= PISTA ID comodin_extiende 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comodin_extiende ::= EXTIENDE ID items_extiende 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_extiende",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // items_extiende ::= COMA ID items_extiende 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_extiende",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // items_extiende ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_extiende",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencias_global ::= sentencia_global sentencias_global 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencias_global ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia_global ::= def_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia_global ::= asignacion_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia_global ::= def_funciones 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.getFunciones().add((Funcion) fun);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia_global ::= def_fun_principal 
            {
              Object RESULT =null;
		int funPrinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funPrinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funPrin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setFunPrincipal((Funcion) funPrin); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_variable ::= variables 
            {
              Object RESULT =null;
		pista.carpturarVariablesGlobales(tipo,asigna, instrOp); asigna= false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_variable ::= KEEP variables 
            {
              Object RESULT =null;
		pista.carpturarVariablesGlobales(tipo,asigna, instrOp); asigna= false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables ::= VAR tipo items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // items_coma ::= ID items 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.getTableSimbolGoblal().capturarIds((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // items ::= IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // items ::= COMA items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // items ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= ENTERO 
            {
              Object RESULT =null;
		tipo=TipoDato.ENTERO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= DOBLE 
            {
              Object RESULT =null;
		tipo=TipoDato.DECIMAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		tipo=TipoDato.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= CADENA 
            {
              Object RESULT =null;
		tipo=TipoDato.CADENA;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo ::= CARACTER 
            {
              Object RESULT =null;
		tipo=TipoDato.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignacion_var ::= ID IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int operaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opera = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.capturarAsignacion(id, (Operation) opera);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignacion ::= operation 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation((NodoOperation) rootOp); instrOp =new Operation((NodoOperation) rootOp); asigna= true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operation ::= operation MAS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.SUMA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operation ::= operation MENOS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.RESTA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operation ::= operation POR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MULTIPLICACION, (NodoOperation) opLeft,(NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operation ::= operation DIVISION operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.DIVISION, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operation ::= operation MODULO operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MODULO, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operation ::= operation POTENCIA operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.POTENCIA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operation ::= operation MAYORQ operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operation ::= operation MENORQ operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= operation MAYOROI operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operation ::= operation MENOROI operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= operation NOTEQUALS operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= operation EQUALS operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= ISNULO operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation ::= NOT operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= operation OR operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= operation AND operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operation ::= operation NAND operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operation ::= operation NOR operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operation ::= operation XOR operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operation ::= terminal_casos 
            {
              Object RESULT =null;
		int nodoOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodoOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodoOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nodoOp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operation ::= PARENTESISA operation PARENTESISC 
            {
              Object RESULT =null;
		int nodoOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nodoOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = nodoOp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // terminal_casos ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // terminal_casos ::= llamada_metod 
            {
              Object RESULT =null;
		int nodFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.clear(); RESULT = nodFun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // terminal_casos ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // terminal_casos ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // terminal_casos ::= CONT_CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.CHAR));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // terminal_casos ::= CONT_CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.CADENA));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // terminal_casos ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // terminal_casos ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // def_funciones ::= comodin_fun LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Funcion funs = (Funcion) fun; funs.setInstruccions((ArrayList<Instruccions>) sent); parametros.clear(); RESULT = funs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funciones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comodin_fun ::= KEEP tipo_fun ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (TipoDato)tip); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comodin_fun ::= KEEP ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comodin_fun ::= tipo_fun ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (TipoDato)tip); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comodin_fun ::= ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cierre_fun ::= parametros PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_fun",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cierre_fun ::= PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_fun",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_fun ::= ENTERO 
            {
              Object RESULT =null;
		RESULT =TipoDato.ENTERO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_fun ::= DOBLE 
            {
              Object RESULT =null;
		RESULT =TipoDato.DECIMAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_fun ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT =TipoDato.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_fun ::= CADENA 
            {
              Object RESULT =null;
		RESULT =TipoDato.CADENA;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_fun ::= CARACTER 
            {
              Object RESULT =null;
		RESULT =TipoDato.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros ::= comodin_param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametros ::= comodin_param COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comodin_param ::= tipo ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parametros.add(new Variable((Token)id, tipo, "",false));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Instruccions> arr= (ArrayList<Instruccions>)array; arr.add(0,(Instruccions)sent); RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencias ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Instruccions>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= variables_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionVar((ArrayList<Variable>)array,asigna,(Operation) instrOp) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia ::= asignacion_var_fun 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = asig;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia ::= op_incremt_decremet_fun PUNTOCOMA 
            {
              Object RESULT =null;
		int decrIncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decrIncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decrInc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = decrInc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia ::= llamada_metod PUNTOCOMA 
            {
              Object RESULT =null;
		int metodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int metodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object metod = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parametroLllmada.clear(); RESULT = new LlamadaFuncion((NodoOperation) metod);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia ::= sentencias_bifuraciones 
            {
              Object RESULT =null;
		int sentbifuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentbifuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sentbifu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sentbifu;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia ::= RETORNA operation PUNTOCOMA 
            {
              Object RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaRetorna((Operation) op, (Token) tok, errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia ::= fun_mensaje 
            {
              Object RESULT =null;
		int funMjsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funMjsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funMjs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funMjs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencia ::= def_fun_reproducir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencia ::= def_fun_esperar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignacion_var_fun ::= ID IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Asignacion((Operation)op,(Token)id,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_var_fun",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variables_fun ::= VAR tipo items_coma_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT  = array;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables_fun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // items_coma_fun ::= ID items_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Variable> arryTmp = (ArrayList<Variable>) array; arryTmp.add( new Variable((Token)id,tipo, "", asigna)); RESULT = arryTmp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma_fun",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // items_fun ::= IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Variable>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // items_fun ::= COMA items_coma_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = array;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // items_fun ::= PUNTOCOMA 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Variable>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op_incremt_decremet_fun ::= ID SUMA_IMPLICITA terminales_increment_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, (NodoOperation) nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // op_incremt_decremet_fun ::= ID INCREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // op_incremt_decremet_fun ::= ID DECREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.RESTA, nodLeft, nodRight); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // terminales_increment_fun ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // terminales_increment_fun ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // terminales_increment_fun ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // llamada_metod ::= ID PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new NodoOperation((Token) id, parametroLllmada,pista);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metod",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametros_llamada ::= terminal_casos_param COMA parametros_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros_llamada ::= terminal_casos_param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros_llamada ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // terminal_casos_param ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.add(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // terminal_casos_param ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.add(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // terminal_casos_param ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.add(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // terminal_casos_param ::= CONT_CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.add(new Dato(true,(Token) val,TipoDato.CHAR));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // terminal_casos_param ::= CONT_CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.add(new Dato(true,(Token) val,TipoDato.CADENA));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // terminal_casos_param ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.add(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // terminal_casos_param ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.add(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencias_bifuraciones ::= def_if_complete 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencias_bifuraciones ::= def_switch 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencias_bifuraciones ::= def_for 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencias_bifuraciones ::= def_while 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencias_bifuraciones ::= def_do_while 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condition ::= operation 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation((NodoOperation) rootOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // def_if_complete ::= def_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = senIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // def_if_complete ::= def_if def_else 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senElse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElse((SentenciaElse) senElse); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // def_if_complete ::= def_if def_else_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senIfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIfs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElseIf((SentenciaIF) senIfs); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // def_if ::= SI PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaIF((ArrayList<Instruccions>) sent,(Operation)op, new TablaSimbol(errorsSemanticos) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // def_else ::= SINO LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaElse((ArrayList<Instruccions>) sent, new TablaSimbol(errorsSemanticos) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // def_else_if ::= SINO def_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = senIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // def_else_if ::= SINO def_if def_else 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senElse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElse((SentenciaElse) senElse); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // def_else_if ::= SINO def_if def_else_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senIfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIfs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElseIf((SentenciaIF) senIfs); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // def_switch ::= SWITCH PARENTESISA ID PARENTESISC LLAVEA cases LLAVEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arryCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arryCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arryC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaSwitch((ArrayList<CasoSwitch> ) arryC, new Variable((Token) id, TipoDato.ENTERO, "",false),  new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_switch",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cases ::= caso_sw SALIR cases 
            {
              Object RESULT =null;
		int cassleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cassright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cass = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arryCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arryCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arryC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<CasoSwitch> arr = (ArrayList<CasoSwitch>)arryC; arr.add(0,(CasoSwitch)cass); RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cases ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<CasoSwitch>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // caso_sw ::= CASO terminales_switch DOPUNTO sentencias 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoSwitch((ArrayList<Instruccions>)inst,(Dato) dat);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // caso_sw ::= DEFAULT DOPUNTO sentencias 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoSwitch((ArrayList<Instruccions>)inst,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // terminales_switch ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(false, (Token) val, TipoDato.ENTERO, val.getLexeme());;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // terminales_switch ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.ENTERO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // terminales_switch ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.DECIMAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // terminales_switch ::= CONT_CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.CADENA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // terminales_switch ::= CONT_CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.CHAR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // terminales_switch ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.BOOLEAN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // terminales_switch ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.BOOLEAN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // def_for ::= PARA PARENTESISA condition_for PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int forsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int forsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object fors = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		SentenciaFor senFor = (SentenciaFor)fors; senFor.setInstruccions((ArrayList<Instruccions>) instr); RESULT = senFor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_for",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // condition_for ::= var_iterador PUNTOCOMA condition PUNTOCOMA op_incremt_decremet_for 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object condi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int incremleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int incremright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object increm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaFor((Instruccions)inst,  new TablaSimbol(errorsSemanticos), (Asignacion)increm, (Operation) condi);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_for",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // var_iterador ::= ENTERO ID asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Variable> variables= new ArrayList<Variable>(); variables.add(new Variable((Token ) id, TipoDato.ENTERO, "", true)); RESULT = new DeclaracionVar(variables, true, (Operation)op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // var_iterador ::= DOBLE ID asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Variable> variables= new ArrayList<Variable>(); variables.add(new Variable((Token ) id, TipoDato.DECIMAL, "", true)); RESULT = new DeclaracionVar(variables, true, (Operation)op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // var_iterador ::= ID asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Asignacion((Operation) op, (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // asignacion_iterador ::= IGUAL ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // asignacion_iterador ::= IGUAL NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // asignacion_iterador ::= IGUAL DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // op_incremt_decremet_for ::= ID INCREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_for",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // op_incremt_decremet_for ::= ID DECREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.RESTA, nodLeft, nodRight); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_for",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // def_while ::= MIENTRAS PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaWhile((ArrayList<Instruccions> )sent, (Operation) cond, new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_while",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // def_do_while ::= HACER LLAVEA sentencias LLAVEC MIENTRAS PARENTESISA condition PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new SentenciaDoWhile((ArrayList<Instruccions> )sent, (Operation) cond, new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_do_while",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // fun_mensaje ::= MENSAJE PARENTESISA asignacion PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Mensaje((Operation) rootOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_mensaje",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // def_fun_principal ::= PRINCIPAL PARENTESISA PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (ArrayList<Instruccions>) inst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_principal",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // def_fun_reproducir ::= REPRODUCIR PARENTESISA def_sentencias_repro PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_reproducir",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // def_sentencias_repro ::= def_nota_musical COMA asignacion COMA asignacion COMA asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_sentencias_repro",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // def_nota_musical ::= NOTA_DO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // def_nota_musical ::= NOTA_DO_S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // def_nota_musical ::= NOTA_RE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // def_nota_musical ::= NOTA_RE_S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // def_nota_musical ::= NOTA_MI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // def_nota_musical ::= NOTA_FA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // def_nota_musical ::= NOTA_FA_S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // def_nota_musical ::= NOTA_SOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // def_nota_musical ::= NOTA_SOL_S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // def_nota_musical ::= NOTA_LA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // def_nota_musical ::= NOTA_LA_S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // def_nota_musical ::= NOTA_SI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // def_fun_esperar ::= ESPERAR PARENTESISA asignacion COMA asignacion PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_esperar",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
