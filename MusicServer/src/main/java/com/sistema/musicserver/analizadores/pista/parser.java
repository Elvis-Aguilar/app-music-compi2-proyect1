
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.sistema.musicserver.analizadores.pista;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.sistema.musicserver.pista.Pista;
import com.sistema.musicserver.tablaSimbol.TablaSimbol;
import com.sistema.musicserver.instrucciones.declaracionAsignacion.*;
import com.sistema.musicserver.errors.*;
import com.sistema.musicserver.tablaSimbol.Variable;
import com.sistema.musicserver.instrucciones.funciones.*;
import com.sistema.musicserver.instrucciones.Instruccions;
import com.sistema.musicserver.instrucciones.bifurcaciones.*;
import com.sistema.musicserver.instrucciones.music.SentenciaReproducir;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\326\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\002\003\000\002\003\006\000\002\003\004" +
    "\000\002\004\004\000\002\004\005\000\002\004\004\000" +
    "\002\005\005\000\002\005\004\000\002\006\005\000\002" +
    "\006\002\000\002\006\004\000\002\007\004\000\002\007" +
    "\002\000\002\007\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\004\000\002\011\003\000\002\011\004\000\002" +
    "\012\005\000\002\014\004\000\002\015\005\000\002\015" +
    "\004\000\002\015\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\021\006\000\002\016\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\004\000\002\017\004\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\017\005" +
    "\000\002\017\004\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\026\006\000\002\026\004\000\002\022\007" +
    "\000\002\022\006\000\002\022\006\000\002\022\005\000" +
    "\002\022\004\000\002\025\004\000\002\025\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\023\003\000\002\023\005" +
    "\000\002\023\004\000\002\024\004\000\002\035\004\000" +
    "\002\035\002\000\002\035\004\000\002\027\003\000\002" +
    "\027\003\000\002\027\004\000\002\027\004\000\002\027" +
    "\003\000\002\027\005\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\031\006\000\002" +
    "\031\004\000\002\030\005\000\002\033\004\000\002\034" +
    "\005\000\002\034\004\000\002\034\003\000\002\034\004" +
    "\000\002\032\005\000\002\032\004\000\002\032\004\000" +
    "\002\032\004\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\037\006\000\002\040\005\000\002\040" +
    "\003\000\002\040\002\000\002\040\004\000\002\063\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\045\003\000\002" +
    "\044\003\000\002\044\004\000\002\044\004\000\002\043" +
    "\011\000\002\042\006\000\002\041\004\000\002\041\005" +
    "\000\002\041\005\000\002\052\011\000\002\051\005\000" +
    "\002\051\002\000\002\051\004\000\002\050\006\000\002" +
    "\050\005\000\002\050\004\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\056\011\000" +
    "\002\055\007\000\002\055\004\000\002\054\005\000\002" +
    "\054\005\000\002\054\004\000\002\054\004\000\002\062" +
    "\004\000\002\062\004\000\002\062\004\000\002\053\004" +
    "\000\002\053\004\000\002\057\011\000\002\060\013\000" +
    "\002\065\007\000\002\064\010\000\002\066\007\000\002" +
    "\070\011\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\004\000\002\071\011\000\002\100\007\000\002\100" +
    "\005\000\002\077\007\000\002\077\004\000\002\101\005" +
    "\000\002\101\003\000\002\076\006\000\002\076\004\000" +
    "\002\076\004\000\002\075\005\000\002\075\003\000\002" +
    "\074\005\000\002\074\005\000\002\074\004\000\002\073" +
    "\007\000\002\073\005\000\002\072\005\000\002\072\003" +
    "\000\002\102\007\000\002\105\005\000\002\104\007\000" +
    "\002\103\005\000\002\103\003\000\002\106\010\000\002" +
    "\107\005\000\002\110\011\000\002\111\003\000\002\111" +
    "\003\000\002\111\003\000\002\111\003\000\002\111\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\010\002\uffff\003\005\004\006\001\002\000" +
    "\004\007\030\001\002\000\010\002\ufffe\007\027\010\026" +
    "\001\002\000\004\005\012\001\002\000\004\002\011\001" +
    "\002\000\004\002\000\001\002\000\004\002\001\001\002" +
    "\000\010\003\013\006\014\007\ufffb\001\002\000\004\007" +
    "\025\001\002\000\004\005\016\001\002\000\004\007\ufffa" +
    "\001\002\000\010\003\020\007\ufff5\011\017\001\002\000" +
    "\004\005\023\001\002\000\004\007\022\001\002\000\004" +
    "\007\ufff8\001\002\000\004\007\ufff4\001\002\000\010\003" +
    "\020\007\ufff5\011\017\001\002\000\004\007\ufff6\001\002" +
    "\000\004\007\ufff7\001\002\000\004\002\ufffc\001\002\000" +
    "\004\007\ufff9\001\002\000\030\003\050\005\037\010\ufff2" +
    "\036\052\037\045\040\041\041\032\042\042\045\055\046" +
    "\031\104\044\001\002\000\020\005\u0196\036\052\037\045" +
    "\040\041\041\032\042\042\045\u0195\001\002\000\004\005" +
    "\uffb1\001\002\000\030\003\uffed\005\uffed\010\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\045\uffed\046\uffed\104" +
    "\uffed\001\002\000\032\003\170\005\111\012\106\014\101" +
    "\015\100\016\114\017\103\020\102\021\113\047\110\056" +
    "\115\075\352\001\002\000\030\003\ufff0\005\ufff0\010\ufff0" +
    "\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\045\ufff0\046" +
    "\ufff0\104\ufff0\001\002\000\030\003\uffea\005\uffea\010\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\045\uffea\046" +
    "\uffea\104\uffea\001\002\000\006\012\u018b\043\u018a\001\002" +
    "\000\004\005\u017d\001\002\000\004\005\uffb2\001\002\000" +
    "\004\005\uffb0\001\002\000\004\010\u017c\001\002\000\004" +
    "\012\u0177\001\002\000\004\005\uffb3\001\002\000\004\007" +
    "\221\001\002\000\030\003\uffee\005\uffee\010\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\042\uffee\045\uffee\046\uffee\104" +
    "\uffee\001\002\000\036\003\216\005\037\007\214\010\213" +
    "\036\052\037\045\040\041\041\032\042\042\044\217\045" +
    "\055\046\031\075\215\104\044\001\002\000\030\003\uffef" +
    "\005\uffef\010\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042" +
    "\uffef\045\uffef\046\uffef\104\uffef\001\002\000\004\005\uffb4" +
    "\001\002\000\030\003\uffec\005\uffec\010\uffec\036\uffec\037" +
    "\uffec\040\uffec\041\uffec\042\uffec\045\uffec\046\uffec\104\uffec" +
    "\001\002\000\030\003\050\005\037\010\ufff2\036\052\037" +
    "\045\040\041\041\032\042\042\045\055\046\031\104\044" +
    "\001\002\000\014\036\063\037\056\040\061\041\062\042" +
    "\060\001\002\000\006\005\uffe2\076\uffe2\001\002\000\006" +
    "\005\064\076\066\001\002\000\006\005\uffdf\076\uffdf\001" +
    "\002\000\006\005\uffe1\076\uffe1\001\002\000\006\005\uffe0" +
    "\076\uffe0\001\002\000\006\005\uffe3\076\uffe3\001\002\000" +
    "\010\011\074\043\076\044\077\001\002\000\030\003\uffe8" +
    "\005\uffe8\010\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\045\uffe8\046\uffe8\104\uffe8\001\002\000\004\005\067" +
    "\001\002\000\006\011\072\074\uff45\001\002\000\004\074" +
    "\071\001\002\000\032\003\uff48\005\uff48\012\uff48\014\uff48" +
    "\015\uff48\016\uff48\017\uff48\020\uff48\021\uff48\047\uff48\056" +
    "\uff48\075\uff48\001\002\000\004\005\067\001\002\000\004" +
    "\074\uff46\001\002\000\004\005\064\001\002\000\030\003" +
    "\uffe7\005\uffe7\010\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\045\uffe7\046\uffe7\104\uffe7\001\002\000\030\003" +
    "\112\005\111\012\106\014\101\015\100\016\114\017\103" +
    "\020\102\021\113\047\110\056\115\001\002\000\030\003" +
    "\uffe4\005\uffe4\010\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\045\uffe4\046\uffe4\104\uffe4\001\002\000\056\010" +
    "\uffc3\011\uffc3\013\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\044\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\075\uffc3\001\002\000\056\010\uffc4\011\uffc4\013" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\044" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\075\uffc4" +
    "\001\002\000\056\010\uffc0\011\uffc0\013\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\044\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\075\uffc0\001\002\000\056" +
    "\010\uffc1\011\uffc1\013\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\044\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\075\uffc1\001\002\000\056\010\uffdd\011\uffdd" +
    "\013\uffdd\022\131\023\124\024\126\025\135\026\133\027" +
    "\123\030\141\031\130\032\127\033\132\034\125\035\136" +
    "\044\uffdd\051\140\052\122\053\137\054\121\055\134\075" +
    "\uffdd\001\002\000\056\010\uffc9\011\uffc9\013\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\044\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\055\uffc9\075\uffc9\001\002\000" +
    "\030\003\112\005\111\012\106\014\101\015\100\016\114" +
    "\017\103\020\102\021\113\047\110\056\115\001\002\000" +
    "\004\044\206\001\002\000\030\003\112\005\111\012\106" +
    "\014\101\015\100\016\114\017\103\020\102\021\113\047" +
    "\110\056\115\001\002\000\062\010\uffc6\011\uffc6\012\164" +
    "\013\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\044\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\074" +
    "\165\075\uffc6\001\002\000\004\044\163\001\002\000\056" +
    "\010\uffbf\011\uffbf\013\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\044\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\075\uffbf\001\002\000\056\010\uffc2\011\uffc2" +
    "\013\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\044\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\075" +
    "\uffc2\001\002\000\030\003\112\005\111\012\106\014\101" +
    "\015\100\016\114\017\103\020\102\021\113\047\110\056" +
    "\115\001\002\000\056\010\uffbe\011\uffbe\013\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\044\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\075\uffbe\001\002\000" +
    "\056\010\uffc5\011\uffc5\013\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\044\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\075\uffc5\001\002\000\056\010\uffcf\011" +
    "\uffcf\013\uffcf\022\131\023\124\024\126\025\135\026\133" +
    "\027\123\030\141\031\130\032\127\033\132\034\125\035" +
    "\136\044\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\075\uffcf\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\056\010\uffd6\011\uffd6\013\uffd6\022" +
    "\131\023\124\024\126\025\135\026\133\027\123\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\044\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\075\uffd6\001\002" +
    "\000\056\010\uffce\011\uffce\013\uffce\022\131\023\124\024" +
    "\126\025\135\026\133\027\123\030\141\031\130\032\127" +
    "\033\132\034\125\035\136\044\uffce\051\uffce\052\uffce\053" +
    "\uffce\054\121\055\134\075\uffce\001\002\000\056\010\uffcb" +
    "\011\uffcb\013\uffcb\022\131\023\124\024\126\025\135\026" +
    "\133\027\123\030\141\031\130\032\127\033\132\034\125" +
    "\035\136\044\uffcb\051\uffcb\052\uffcb\053\uffcb\054\121\055" +
    "\134\075\uffcb\001\002\000\056\010\uffd1\011\uffd1\013\uffd1" +
    "\022\131\023\124\024\126\025\135\026\133\027\123\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\044\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\075\uffd1\001" +
    "\002\000\056\010\uffd9\011\uffd9\013\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\123\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\044\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\075\uffd9\001\002\000\056\010" +
    "\uffcc\011\uffcc\013\uffcc\022\131\023\124\024\126\025\135" +
    "\026\133\027\123\030\141\031\130\032\127\033\132\034" +
    "\125\035\136\044\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\075\uffcc\001\002\000\056\010\uffd8\011\uffd8\013" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\123" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\044" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\075\uffd8" +
    "\001\002\000\056\010\uffd3\011\uffd3\013\uffd3\022\131\023" +
    "\124\024\126\025\135\026\133\027\123\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\044\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\075\uffd3\001\002\000\056" +
    "\010\uffdc\011\uffdc\013\uffdc\022\uffdc\023\uffdc\024\126\025" +
    "\135\026\133\027\123\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\044\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\075\uffdc\001\002\000\056\010\uffd5\011\uffd5" +
    "\013\uffd5\022\131\023\124\024\126\025\135\026\133\027" +
    "\123\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\044\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\075" +
    "\uffd5\001\002\000\056\010\uffd4\011\uffd4\013\uffd4\022\131" +
    "\023\124\024\126\025\135\026\133\027\123\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\044\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\075\uffd4\001\002\000" +
    "\056\010\uffda\011\uffda\013\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\123\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\044\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\075\uffda\001\002\000\056\010\uffd2\011" +
    "\uffd2\013\uffd2\022\131\023\124\024\126\025\135\026\133" +
    "\027\123\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\044\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2" +
    "\075\uffd2\001\002\000\056\010\uffdb\011\uffdb\013\uffdb\022" +
    "\uffdb\023\uffdb\024\126\025\135\026\133\027\123\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\044\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\075\uffdb\001\002" +
    "\000\056\010\uffd7\011\uffd7\013\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\044\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\055\uffd7\075\uffd7\001\002\000\056\010\uffca" +
    "\011\uffca\013\uffca\022\131\023\124\024\126\025\135\026" +
    "\133\027\123\030\141\031\130\032\127\033\132\034\125" +
    "\035\136\044\uffca\051\uffca\052\uffca\053\uffca\054\121\055" +
    "\134\075\uffca\001\002\000\056\010\uffcd\011\uffcd\013\uffcd" +
    "\022\131\023\124\024\126\025\135\026\133\027\123\030" +
    "\141\031\130\032\127\033\132\034\125\035\136\044\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\075\uffcd\001" +
    "\002\000\056\010\uffc7\011\uffc7\013\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\044\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\075\uffc7\001\002\000\032\003" +
    "\177\005\111\012\106\013\uff89\014\101\015\100\016\114" +
    "\017\103\020\102\021\113\047\110\056\115\001\002\000" +
    "\030\003\170\005\111\012\106\014\101\015\100\016\114" +
    "\017\103\020\102\021\113\047\110\056\115\001\002\000" +
    "\004\075\172\001\002\000\056\010\uff32\011\uff32\013\uff32" +
    "\022\uff32\023\uff32\024\uff32\025\uff32\026\uff32\027\uff32\030" +
    "\uff32\031\uff32\032\uff32\033\uff32\034\uff32\035\uff32\044\uff32" +
    "\051\uff32\052\uff32\053\uff32\054\uff32\055\uff32\075\uff32\001" +
    "\002\000\006\044\163\075\171\001\002\000\060\010\uff42" +
    "\011\uff42\013\uff42\022\uff42\023\uff42\024\uff42\025\uff42\026" +
    "\uff42\027\uff42\030\uff42\031\uff42\032\uff42\033\uff42\034\uff42" +
    "\035\uff42\043\uff42\044\uff42\051\uff42\052\uff42\053\uff42\054" +
    "\uff42\055\uff42\075\uff42\001\002\000\062\010\uff43\011\uff43" +
    "\013\uff43\022\uff43\023\uff43\024\uff43\025\uff43\026\uff43\027" +
    "\uff43\030\uff43\031\uff43\032\uff43\033\uff43\034\uff43\035\uff43" +
    "\043\uff43\044\uff43\051\uff43\052\uff43\053\uff43\054\uff43\055" +
    "\uff43\074\173\075\uff43\001\002\000\030\003\170\005\111" +
    "\012\106\014\101\015\100\016\114\017\103\020\102\021" +
    "\113\047\110\056\115\001\002\000\060\010\uff44\011\uff44" +
    "\013\uff44\022\uff44\023\uff44\024\uff44\025\uff44\026\uff44\027" +
    "\uff44\030\uff44\031\uff44\032\uff44\033\uff44\034\uff44\035\uff44" +
    "\043\uff44\044\uff44\051\uff44\052\uff44\053\uff44\054\uff44\055" +
    "\uff44\075\uff44\001\002\000\006\011\uff87\013\uff87\001\002" +
    "\000\004\013\204\001\002\000\006\013\203\044\163\001" +
    "\002\000\006\011\201\013\uff8a\001\002\000\032\003\177" +
    "\005\111\012\106\013\uff89\014\101\015\100\016\114\017" +
    "\103\020\102\021\113\047\110\056\115\001\002\000\004" +
    "\013\uff8b\001\002\000\004\013\uff88\001\002\000\056\010" +
    "\uff8c\011\uff8c\013\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c" +
    "\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034" +
    "\uff8c\035\uff8c\044\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\075\uff8c\001\002\000\056\010\uffd0\011\uffd0\013" +
    "\uffd0\022\131\023\124\024\126\025\135\026\133\027\123" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\044" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\075\uffd0" +
    "\001\002\000\030\003\uffe6\005\uffe6\010\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\045\uffe6\046\uffe6\104\uffe6" +
    "\001\002\000\046\013\210\022\131\023\124\024\126\025" +
    "\135\026\133\027\123\030\141\031\130\032\127\033\132" +
    "\034\125\035\136\051\140\052\122\053\137\054\121\055" +
    "\134\001\002\000\056\010\uffc8\011\uffc8\013\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\044\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\075\uffc8\001\002\000" +
    "\030\003\uffe5\005\uffe5\010\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\045\uffe5\046\uffe5\104\uffe5\001\002\000" +
    "\004\010\ufff3\001\002\000\030\003\uffbc\005\uffbc\010\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\045\uffbc\046" +
    "\uffbc\104\uffbc\001\002\000\004\007\uffb7\001\002\000\032" +
    "\003\uff47\005\uff47\012\uff47\014\uff47\015\uff47\016\uff47\017" +
    "\uff47\020\uff47\021\uff47\047\uff47\056\uff47\075\uff47\001\002" +
    "\000\034\003\216\005\037\007\214\010\213\036\052\037" +
    "\045\040\041\041\032\042\042\045\055\046\031\075\215" +
    "\104\044\001\002\000\004\010\ufff1\001\002\000\030\003" +
    "\uffeb\005\uffeb\010\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\045\uffeb\046\uffeb\104\uffeb\001\002\000\036\003" +
    "\251\005\233\010\uffaa\045\261\050\255\062\247\065\230" +
    "\071\232\072\256\073\243\077\263\100\262\101\240\106" +
    "\250\001\002\000\040\003\uffa4\005\uffa4\010\uffa4\045\uffa4" +
    "\050\uffa4\062\uffa4\065\uffa4\066\uffa4\071\uffa4\072\uffa4\073" +
    "\uffa4\077\uffa4\100\uffa4\101\uffa4\106\uffa4\001\002\000\040" +
    "\003\uff82\005\uff82\010\uff82\045\uff82\050\uff82\062\uff82\065" +
    "\uff82\066\uff82\071\uff82\072\uff82\073\uff82\077\uff82\100\uff82" +
    "\101\uff82\106\uff82\001\002\000\004\010\u0176\001\002\000" +
    "\040\003\uff86\005\uff86\010\uff86\045\uff86\050\uff86\062\uff86" +
    "\065\uff86\066\uff86\071\uff86\072\uff86\073\uff86\077\uff86\100" +
    "\uff86\101\uff86\106\uff86\001\002\000\040\003\uff84\005\uff84" +
    "\010\uff84\045\uff84\050\uff84\062\uff84\065\uff84\066\uff84\071" +
    "\uff84\072\uff84\073\uff84\077\uff84\100\uff84\101\uff84\106\uff84" +
    "\001\002\000\040\003\uffa0\005\uffa0\010\uffa0\045\uffa0\050" +
    "\uffa0\062\uffa0\065\uffa0\066\uffa0\071\uffa0\072\uffa0\073\uffa0" +
    "\077\uffa0\100\uffa0\101\uffa0\106\uffa0\001\002\000\004\012" +
    "\u015d\001\002\000\040\003\uff9c\005\uff9c\010\uff9c\045\uff9c" +
    "\050\uff9c\062\uff9c\065\uff9c\066\uff9c\071\uff9c\072\uff9c\073" +
    "\uff9c\077\uff9c\100\uff9c\101\uff9c\106\uff9c\001\002\000\004" +
    "\012\u0140\001\002\000\016\012\164\043\u0132\057\u0135\060" +
    "\u0133\061\u0131\074\u0134\001\002\000\040\003\251\005\233" +
    "\010\uffaa\045\261\050\255\062\247\065\230\066\uffaa\071" +
    "\232\072\256\073\243\077\263\100\262\101\240\106\250" +
    "\001\002\000\040\003\uff9f\005\uff9f\010\uff9f\045\uff9f\050" +
    "\uff9f\062\uff9f\065\uff9f\066\uff9f\071\uff9f\072\uff9f\073\uff9f" +
    "\077\uff9f\100\uff9f\101\uff9f\106\uff9f\001\002\000\040\003" +
    "\uffa1\005\uffa1\010\uffa1\045\uffa1\050\uffa1\062\uffa1\065\uffa1" +
    "\066\uffa1\071\uffa1\072\uffa1\073\uffa1\077\uffa1\100\uffa1\101" +
    "\uffa1\106\uffa1\001\002\000\004\044\u012f\001\002\000\004" +
    "\012\u0124\001\002\000\040\003\uff9e\005\uff9e\010\uff9e\045" +
    "\uff9e\050\uff9e\062\uff9e\065\uff9e\066\uff9e\071\uff9e\072\uff9e" +
    "\073\uff9e\077\uff9e\100\uff9e\101\uff9e\106\uff9e\001\002\000" +
    "\040\003\uff83\005\uff83\010\uff83\045\uff83\050\uff83\062\uff83" +
    "\065\uff83\066\uff83\071\uff83\072\uff83\073\uff83\077\uff83\100" +
    "\uff83\101\uff83\106\uff83\001\002\000\030\003\112\005\111" +
    "\012\106\014\101\015\100\016\114\017\103\020\102\021" +
    "\113\047\110\056\115\001\002\000\040\003\uff9d\005\uff9d" +
    "\010\uff9d\045\uff9d\050\uff9d\062\uff9d\065\uff9d\066\uff9d\071" +
    "\uff9d\072\uff9d\073\uff9d\077\uff9d\100\uff9d\101\uff9d\106\uff9d" +
    "\001\002\000\040\003\uff85\005\uff85\010\uff85\045\uff85\050" +
    "\uff85\062\uff85\065\uff85\066\uff85\071\uff85\072\uff85\073\uff85" +
    "\077\uff85\100\uff85\101\uff85\106\uff85\001\002\000\040\003" +
    "\uffa7\005\uffa7\010\uffa7\045\uffa7\050\uffa7\062\uffa7\065\uffa7" +
    "\066\uffa7\071\uffa7\072\uffa7\073\uffa7\077\uffa7\100\uffa7\101" +
    "\uffa7\106\uffa7\001\002\000\004\012\u011c\001\002\000\004" +
    "\012\u0103\001\002\000\042\003\251\005\233\010\uffaa\044" +
    "\u0102\045\261\050\255\062\247\065\230\066\uffaa\071\232" +
    "\072\256\073\243\077\263\100\262\101\240\106\250\001" +
    "\002\000\040\003\uffa2\005\uffa2\010\uffa2\045\uffa2\050\uffa2" +
    "\062\uffa2\065\uffa2\066\uffa2\071\uffa2\072\uffa2\073\uffa2\077" +
    "\uffa2\100\uffa2\101\uffa2\106\uffa2\001\002\000\032\003\170" +
    "\005\111\012\106\014\101\015\100\016\114\017\103\020" +
    "\102\021\113\047\110\056\115\075\352\001\002\000\042" +
    "\003\uff80\005\uff80\010\uff80\045\uff80\050\uff80\062\uff80\063" +
    "\341\065\uff80\066\uff80\071\uff80\072\uff80\073\uff80\077\uff80" +
    "\100\uff80\101\uff80\106\uff80\001\002\000\004\012\332\001" +
    "\002\000\004\007\321\001\002\000\040\003\uffa8\005\uffa8" +
    "\010\uffa8\045\uffa8\050\uffa8\062\uffa8\065\uffa8\066\uffa8\071" +
    "\uffa8\072\uffa8\073\uffa8\077\uffa8\100\uffa8\101\uffa8\106\uffa8" +
    "\001\002\000\004\044\320\001\002\000\014\036\063\037" +
    "\056\040\061\041\062\042\060\001\002\000\004\012\272" +
    "\001\002\000\004\012\264\001\002\000\030\003\112\005" +
    "\111\012\106\014\101\015\100\016\114\017\103\020\102" +
    "\021\113\047\110\056\115\001\002\000\004\011\266\001" +
    "\002\000\030\003\112\005\111\012\106\014\101\015\100" +
    "\016\114\017\103\020\102\021\113\047\110\056\115\001" +
    "\002\000\004\013\270\001\002\000\004\044\271\001\002" +
    "\000\040\003\uff4b\005\uff4b\010\uff4b\045\uff4b\050\uff4b\062" +
    "\uff4b\065\uff4b\066\uff4b\071\uff4b\072\uff4b\073\uff4b\077\uff4b" +
    "\100\uff4b\101\uff4b\106\uff4b\001\002\000\030\003\112\005" +
    "\111\012\106\014\101\015\100\016\114\017\103\020\102" +
    "\021\113\047\110\056\115\001\002\000\004\013\274\001" +
    "\002\000\004\044\275\001\002\000\040\003\uff5c\005\uff5c" +
    "\010\uff5c\045\uff5c\050\uff5c\062\uff5c\065\uff5c\066\uff5c\071" +
    "\uff5c\072\uff5c\073\uff5c\077\uff5c\100\uff5c\101\uff5c\106\uff5c" +
    "\001\002\000\006\005\277\076\301\001\002\000\012\003" +
    "\310\011\307\043\311\044\313\001\002\000\040\003\uff99" +
    "\005\uff99\010\uff99\045\uff99\050\uff99\062\uff99\065\uff99\066" +
    "\uff99\071\uff99\072\uff99\073\uff99\077\uff99\100\uff99\101\uff99" +
    "\106\uff99\001\002\000\004\005\302\001\002\000\006\011" +
    "\305\074\uff34\001\002\000\004\074\304\001\002\000\032" +
    "\003\uff36\005\uff36\012\uff36\014\uff36\015\uff36\016\uff36\017" +
    "\uff36\020\uff36\021\uff36\047\uff36\056\uff36\075\uff36\001\002" +
    "\000\004\005\067\001\002\000\004\074\uff35\001\002\000" +
    "\004\005\277\001\002\000\004\044\316\001\002\000\030" +
    "\003\112\005\111\012\106\014\101\015\100\016\114\017" +
    "\103\020\102\021\113\047\110\056\115\001\002\000\040" +
    "\003\uff98\005\uff98\010\uff98\045\uff98\050\uff98\062\uff98\065" +
    "\uff98\066\uff98\071\uff98\072\uff98\073\uff98\077\uff98\100\uff98" +
    "\101\uff98\106\uff98\001\002\000\040\003\uff95\005\uff95\010" +
    "\uff95\045\uff95\050\uff95\062\uff95\065\uff95\066\uff95\071\uff95" +
    "\072\uff95\073\uff95\077\uff95\100\uff95\101\uff95\106\uff95\001" +
    "\002\000\004\044\315\001\002\000\040\003\uff97\005\uff97" +
    "\010\uff97\045\uff97\050\uff97\062\uff97\065\uff97\066\uff97\071" +
    "\uff97\072\uff97\073\uff97\077\uff97\100\uff97\101\uff97\106\uff97" +
    "\001\002\000\040\003\uff94\005\uff94\010\uff94\045\uff94\050" +
    "\uff94\062\uff94\065\uff94\066\uff94\071\uff94\072\uff94\073\uff94" +
    "\077\uff94\100\uff94\101\uff94\106\uff94\001\002\000\040\003" +
    "\uff96\005\uff96\010\uff96\045\uff96\050\uff96\062\uff96\065\uff96" +
    "\066\uff96\071\uff96\072\uff96\073\uff96\077\uff96\100\uff96\101" +
    "\uff96\106\uff96\001\002\000\040\003\uffa6\005\uffa6\010\uffa6" +
    "\045\uffa6\050\uffa6\062\uffa6\065\uffa6\066\uffa6\071\uffa6\072" +
    "\uffa6\073\uffa6\077\uffa6\100\uffa6\101\uffa6\106\uffa6\001\002" +
    "\000\036\003\251\005\233\010\uffaa\045\261\050\255\062" +
    "\247\065\230\071\232\072\256\073\243\077\263\100\262" +
    "\101\240\106\250\001\002\000\004\010\323\001\002\000" +
    "\004\050\324\001\002\000\004\012\325\001\002\000\030" +
    "\003\112\005\111\012\106\014\101\015\100\016\114\017" +
    "\103\020\102\021\113\047\110\056\115\001\002\000\004" +
    "\013\330\001\002\000\050\013\uff81\022\131\023\124\024" +
    "\126\025\135\026\133\027\123\030\141\031\130\032\127" +
    "\033\132\034\125\035\136\044\uff81\051\140\052\122\053" +
    "\137\054\121\055\134\001\002\000\004\044\331\001\002" +
    "\000\040\003\uff5d\005\uff5d\010\uff5d\045\uff5d\050\uff5d\062" +
    "\uff5d\065\uff5d\066\uff5d\071\uff5d\072\uff5d\073\uff5d\077\uff5d" +
    "\100\uff5d\101\uff5d\106\uff5d\001\002\000\030\003\112\005" +
    "\111\012\106\014\101\015\100\016\114\017\103\020\102" +
    "\021\113\047\110\056\115\001\002\000\004\013\334\001" +
    "\002\000\004\007\335\001\002\000\036\003\251\005\233" +
    "\010\uffaa\045\261\050\255\062\247\065\230\071\232\072" +
    "\256\073\243\077\263\100\262\101\240\106\250\001\002" +
    "\000\004\010\337\001\002\000\040\003\uff5e\005\uff5e\010" +
    "\uff5e\045\uff5e\050\uff5e\062\uff5e\065\uff5e\066\uff5e\071\uff5e" +
    "\072\uff5e\073\uff5e\077\uff5e\100\uff5e\101\uff5e\106\uff5e\001" +
    "\002\000\040\003\uff7f\005\uff7f\010\uff7f\045\uff7f\050\uff7f" +
    "\062\uff7f\065\uff7f\066\uff7f\071\uff7f\072\uff7f\073\uff7f\077" +
    "\uff7f\100\uff7f\101\uff7f\106\uff7f\001\002\000\006\007\343" +
    "\062\247\001\002\000\040\003\uff7e\005\uff7e\010\uff7e\045" +
    "\uff7e\050\uff7e\062\uff7e\065\uff7e\066\uff7e\071\uff7e\072\uff7e" +
    "\073\uff7e\077\uff7e\100\uff7e\101\uff7e\106\uff7e\001\002\000" +
    "\036\003\251\005\233\010\uffaa\045\261\050\255\062\247" +
    "\065\230\071\232\072\256\073\243\077\263\100\262\101" +
    "\240\106\250\001\002\000\042\003\uff7b\005\uff7b\010\uff7b" +
    "\045\uff7b\050\uff7b\062\uff7b\063\341\065\uff7b\066\uff7b\071" +
    "\uff7b\072\uff7b\073\uff7b\077\uff7b\100\uff7b\101\uff7b\106\uff7b" +
    "\001\002\000\040\003\uff7a\005\uff7a\010\uff7a\045\uff7a\050" +
    "\uff7a\062\uff7a\065\uff7a\066\uff7a\071\uff7a\072\uff7a\073\uff7a" +
    "\077\uff7a\100\uff7a\101\uff7a\106\uff7a\001\002\000\040\003" +
    "\uff79\005\uff79\010\uff79\045\uff79\050\uff79\062\uff79\065\uff79" +
    "\066\uff79\071\uff79\072\uff79\073\uff79\077\uff79\100\uff79\101" +
    "\uff79\106\uff79\001\002\000\004\010\350\001\002\000\040" +
    "\003\uff7c\005\uff7c\010\uff7c\045\uff7c\050\uff7c\062\uff7c\065" +
    "\uff7c\066\uff7c\071\uff7c\072\uff7c\073\uff7c\077\uff7c\100\uff7c" +
    "\101\uff7c\106\uff7c\001\002\000\004\043\357\001\002\000" +
    "\006\043\uff40\074\355\001\002\000\004\044\354\001\002" +
    "\000\040\003\uff37\005\uff37\010\uff37\045\uff37\050\uff37\062" +
    "\uff37\065\uff37\066\uff37\071\uff37\072\uff37\073\uff37\077\uff37" +
    "\100\uff37\101\uff37\106\uff37\001\002\000\004\075\352\001" +
    "\002\000\004\043\uff41\001\002\000\006\003\360\007\361" +
    "\001\002\000\004\044\u0100\001\002\000\032\003\112\005" +
    "\111\007\365\012\106\014\101\015\100\016\114\017\103" +
    "\020\102\021\113\047\110\056\115\001\002\000\004\044" +
    "\363\001\002\000\040\003\uff38\005\uff38\010\uff38\045\uff38" +
    "\050\uff38\062\uff38\065\uff38\066\uff38\071\uff38\072\uff38\073" +
    "\uff38\077\uff38\100\uff38\101\uff38\106\uff38\001\002\000\004" +
    "\010\377\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\006\010\uff39\011\371\001\002\000" +
    "\004\010\370\001\002\000\004\044\uff3e\001\002\000\030" +
    "\003\112\005\111\012\106\014\101\015\100\016\114\017" +
    "\103\020\102\021\113\047\110\056\115\001\002\000\004" +
    "\010\uff3a\001\002\000\004\010\374\001\002\000\006\010" +
    "\uff3b\011\375\001\002\000\004\007\365\001\002\000\004" +
    "\010\uff3c\001\002\000\004\044\uff3f\001\002\000\004\044" +
    "\uff3d\001\002\000\006\010\uffa9\066\uffa9\001\002\000\042" +
    "\003\uff9a\005\uff9a\010\uff9a\044\uff90\045\uff9a\050\uff9a\062" +
    "\uff9a\065\uff9a\066\uff9a\071\uff9a\072\uff9a\073\uff9a\077\uff9a" +
    "\100\uff9a\101\uff9a\106\uff9a\001\002\000\034\003\u010d\062" +
    "\u0111\107\u0110\110\u010a\111\u0106\112\u010f\113\u0112\114\u010e" +
    "\115\u0104\116\u0107\117\u0109\120\u010c\121\u0108\001\002\000" +
    "\004\011\uff52\001\002\000\004\011\u0116\001\002\000\004" +
    "\011\uff56\001\002\000\004\011\uff51\001\002\000\004\011" +
    "\uff4e\001\002\000\004\011\uff50\001\002\000\004\011\uff57" +
    "\001\002\000\004\013\u0114\001\002\000\004\011\uff4f\001" +
    "\002\000\004\011\u0113\001\002\000\004\011\uff53\001\002" +
    "\000\004\011\uff55\001\002\000\004\011\uff58\001\002\000" +
    "\004\011\uff4d\001\002\000\004\011\uff54\001\002\000\004" +
    "\011\uff4c\001\002\000\004\044\u0115\001\002\000\040\003" +
    "\uff5a\005\uff5a\010\uff5a\045\uff5a\050\uff5a\062\uff5a\065\uff5a" +
    "\066\uff5a\071\uff5a\072\uff5a\073\uff5a\077\uff5a\100\uff5a\101" +
    "\uff5a\106\uff5a\001\002\000\030\003\112\005\111\012\106" +
    "\014\101\015\100\016\114\017\103\020\102\021\113\047" +
    "\110\056\115\001\002\000\004\011\u0118\001\002\000\030" +
    "\003\112\005\111\012\106\014\101\015\100\016\114\017" +
    "\103\020\102\021\113\047\110\056\115\001\002\000\004" +
    "\011\u011a\001\002\000\030\003\112\005\111\012\106\014" +
    "\101\015\100\016\114\017\103\020\102\021\113\047\110" +
    "\056\115\001\002\000\004\013\uff59\001\002\000\030\003" +
    "\112\005\111\012\106\014\101\015\100\016\114\017\103" +
    "\020\102\021\113\047\110\056\115\001\002\000\004\013" +
    "\u011e\001\002\000\004\007\u011f\001\002\000\036\003\251" +
    "\005\233\010\uffaa\045\261\050\255\062\247\065\230\071" +
    "\232\072\256\073\243\077\263\100\262\101\240\106\250" +
    "\001\002\000\004\010\u0121\001\002\000\042\003\uff7d\005" +
    "\uff7d\010\uff7d\045\uff7d\050\uff7d\062\uff7d\063\uff7d\065\uff7d" +
    "\066\uff7d\071\uff7d\072\uff7d\073\uff7d\077\uff7d\100\uff7d\101" +
    "\uff7d\106\uff7d\001\002\000\004\044\u0123\001\002\000\040" +
    "\003\uffa3\005\uffa3\010\uffa3\045\uffa3\050\uffa3\062\uffa3\065" +
    "\uffa3\066\uffa3\071\uffa3\072\uffa3\073\uffa3\077\uffa3\100\uffa3" +
    "\101\uffa3\106\uffa3\001\002\000\004\005\u0125\001\002\000" +
    "\004\011\u0126\001\002\000\014\122\u0127\123\u012b\124\u0128" +
    "\125\u012c\126\u0129\001\002\000\004\013\uff30\001\002\000" +
    "\004\013\uff2e\001\002\000\004\013\uff2c\001\002\000\004" +
    "\013\u012d\001\002\000\004\013\uff2f\001\002\000\004\013" +
    "\uff2d\001\002\000\004\044\u012e\001\002\000\040\003\uff31" +
    "\005\uff31\010\uff31\045\uff31\050\uff31\062\uff31\065\uff31\066" +
    "\uff31\071\uff31\072\uff31\073\uff31\077\uff31\100\uff31\101\uff31" +
    "\106\uff31\001\002\000\040\003\uffa5\005\uffa5\010\uffa5\045" +
    "\uffa5\050\uffa5\062\uffa5\065\uffa5\066\uffa5\071\uffa5\072\uffa5" +
    "\073\uffa5\077\uffa5\100\uffa5\101\uffa5\106\uffa5\001\002\000" +
    "\006\010\uffab\066\uffab\001\002\000\004\044\uff91\001\002" +
    "\000\030\003\112\005\111\012\106\014\101\015\100\016" +
    "\114\017\103\020\102\021\113\047\110\056\115\001\002" +
    "\000\004\044\uff92\001\002\000\030\003\170\005\111\012" +
    "\106\014\101\015\100\016\114\017\103\020\102\021\113" +
    "\047\110\056\115\001\002\000\010\005\u0136\014\u0137\015" +
    "\u0139\001\002\000\004\044\uff8f\001\002\000\004\044\uff8e" +
    "\001\002\000\004\044\uff93\001\002\000\004\044\uff8d\001" +
    "\002\000\004\043\u013b\001\002\000\030\003\112\005\111" +
    "\012\106\014\101\015\100\016\114\017\103\020\102\021" +
    "\113\047\110\056\115\001\002\000\004\044\u013d\001\002" +
    "\000\040\003\uff33\005\uff33\010\uff33\045\uff33\050\uff33\062" +
    "\uff33\065\uff33\066\uff33\071\uff33\072\uff33\073\uff33\077\uff33" +
    "\100\uff33\101\uff33\106\uff33\001\002\000\004\044\u013f\001" +
    "\002\000\040\003\uff9b\005\uff9b\010\uff9b\045\uff9b\050\uff9b" +
    "\062\uff9b\065\uff9b\066\uff9b\071\uff9b\072\uff9b\073\uff9b\077" +
    "\uff9b\100\uff9b\101\uff9b\106\uff9b\001\002\000\012\003\u0144" +
    "\005\u0142\036\u0146\037\u0141\001\002\000\004\005\u015b\001" +
    "\002\000\004\043\u0148\001\002\000\004\013\u0156\001\002" +
    "\000\006\013\u0154\044\u0155\001\002\000\004\044\u014d\001" +
    "\002\000\004\005\u0147\001\002\000\004\043\u0148\001\002" +
    "\000\010\005\u014a\014\u014b\015\u014c\001\002\000\004\044" +
    "\uff67\001\002\000\004\044\uff63\001\002\000\004\044\uff62" +
    "\001\002\000\004\044\uff61\001\002\000\030\003\112\005" +
    "\111\012\106\014\101\015\100\016\114\017\103\020\102" +
    "\021\113\047\110\056\115\001\002\000\004\044\u014f\001" +
    "\002\000\004\005\u0150\001\002\000\006\060\u0153\061\u0152" +
    "\001\002\000\004\013\uff69\001\002\000\004\013\uff5f\001" +
    "\002\000\004\013\uff60\001\002\000\004\013\uff68\001\002" +
    "\000\004\044\uff64\001\002\000\004\007\u0157\001\002\000" +
    "\036\003\251\005\233\010\uffaa\045\261\050\255\062\247" +
    "\065\230\071\232\072\256\073\243\077\263\100\262\101" +
    "\240\106\250\001\002\000\004\010\u0159\001\002\000\040" +
    "\003\uff6a\005\uff6a\010\uff6a\045\uff6a\050\uff6a\062\uff6a\065" +
    "\uff6a\066\uff6a\071\uff6a\072\uff6a\073\uff6a\077\uff6a\100\uff6a" +
    "\101\uff6a\106\uff6a\001\002\000\004\044\uff65\001\002\000" +
    "\004\043\u0148\001\002\000\004\044\uff66\001\002\000\004" +
    "\005\u015e\001\002\000\004\013\u015f\001\002\000\004\007" +
    "\u0160\001\002\000\012\003\u0162\010\uff76\067\u0165\070\u0161" +
    "\001\002\000\004\064\u0174\001\002\000\004\010\u0173\001" +
    "\002\000\004\010\u0172\001\002\000\004\066\u0170\001\002" +
    "\000\020\005\u0166\014\u0169\015\u016c\016\u0167\017\u016d\020" +
    "\u016a\021\u016b\001\002\000\004\064\uff71\001\002\000\004" +
    "\064\uff6e\001\002\000\004\064\u016e\001\002\000\004\064" +
    "\uff70\001\002\000\004\064\uff6c\001\002\000\004\064\uff6b" +
    "\001\002\000\004\064\uff6f\001\002\000\004\064\uff6d\001" +
    "\002\000\036\003\251\005\233\045\261\050\255\062\247" +
    "\065\230\066\uffaa\071\232\072\256\073\243\077\263\100" +
    "\262\101\240\106\250\001\002\000\004\066\uff74\001\002" +
    "\000\012\003\u0162\010\uff76\067\u0165\070\u0161\001\002\000" +
    "\004\010\uff77\001\002\000\040\003\uff78\005\uff78\010\uff78" +
    "\045\uff78\050\uff78\062\uff78\065\uff78\066\uff78\071\uff78\072" +
    "\uff78\073\uff78\077\uff78\100\uff78\101\uff78\106\uff78\001\002" +
    "\000\006\010\uff75\066\uff72\001\002\000\036\003\251\005" +
    "\233\045\261\050\255\062\247\065\230\066\uffaa\071\232" +
    "\072\256\073\243\077\263\100\262\101\240\106\250\001" +
    "\002\000\004\066\uff73\001\002\000\030\003\uffbd\005\uffbd" +
    "\010\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\045" +
    "\uffbd\046\uffbd\104\uffbd\001\002\000\004\013\u0178\001\002" +
    "\000\004\007\u0179\001\002\000\036\003\251\005\233\010" +
    "\uffaa\045\261\050\255\062\247\065\230\071\232\072\256" +
    "\073\243\077\263\100\262\101\240\106\250\001\002\000" +
    "\004\010\u017b\001\002\000\030\003\uff5b\005\uff5b\010\uff5b" +
    "\036\uff5b\037\uff5b\040\uff5b\041\uff5b\042\uff5b\045\uff5b\046" +
    "\uff5b\104\uff5b\001\002\000\004\002\ufffd\001\002\000\004" +
    "\012\u017e\001\002\000\020\003\u0181\013\u017f\036\063\037" +
    "\056\040\061\041\062\042\060\001\002\000\004\007\uffb5" +
    "\001\002\000\006\011\u0188\013\uffaf\001\002\000\004\010" +
    "\u0187\001\002\000\004\013\u0186\001\002\000\004\005\u0185" +
    "\001\002\000\004\007\uffb9\001\002\000\006\011\uffac\013" +
    "\uffac\001\002\000\004\007\uffb6\001\002\000\004\013\uffad" +
    "\001\002\000\016\003\u0181\036\063\037\056\040\061\041" +
    "\062\042\060\001\002\000\004\013\uffae\001\002\000\030" +
    "\003\112\005\111\012\106\014\101\015\100\016\114\017" +
    "\103\020\102\021\113\047\110\056\115\001\002\000\020" +
    "\003\u0181\013\u017f\036\063\037\056\040\061\041\062\042" +
    "\060\001\002\000\004\007\uffb8\001\002\000\004\044\u018e" +
    "\001\002\000\030\003\uffde\005\uffde\010\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\045\uffde\046\uffde\104\uffde" +
    "\001\002\000\004\043\u0192\001\002\000\004\044\u0191\001" +
    "\002\000\030\003\uff49\005\uff49\010\uff49\036\uff49\037\uff49" +
    "\040\uff49\041\uff49\042\uff49\045\uff49\046\uff49\104\uff49\001" +
    "\002\000\006\003\360\007\361\001\002\000\004\044\u0194" +
    "\001\002\000\030\003\uff4a\005\uff4a\010\uff4a\036\uff4a\037" +
    "\uff4a\040\uff4a\041\uff4a\042\uff4a\045\uff4a\046\uff4a\104\uff4a" +
    "\001\002\000\014\036\063\037\056\040\061\041\062\042" +
    "\060\001\002\000\004\012\u019c\001\002\000\004\005\u0199" +
    "\001\002\000\030\003\uffe9\005\uffe9\010\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\045\uffe9\046\uffe9\104\uffe9" +
    "\001\002\000\004\012\u019a\001\002\000\020\003\u0181\013" +
    "\u017f\036\063\037\056\040\061\041\062\042\060\001\002" +
    "\000\004\007\uffbb\001\002\000\020\003\u0181\013\u017f\036" +
    "\063\037\056\040\061\041\062\042\060\001\002\000\004" +
    "\007\uffba\001\002\000\004\005\064\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\010\002\006\003\007\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\042\010\053" +
    "\011\034\012\035\021\050\022\045\026\046\061\037\064" +
    "\032\077\033\100\052\001\001\000\006\012\u0197\061\u0196" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\165\017\103\020\104\037\116\075\u018e\076\u018f\107\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\010\217\011\034" +
    "\012\035\021\050\022\045\026\046\061\037\064\032\077" +
    "\033\100\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\007\211\010\053\011\034\012" +
    "\035\021\050\022\045\026\046\061\037\064\032\077\033" +
    "\100\052\001\001\000\004\013\056\001\001\000\002\001" +
    "\001\000\004\014\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\074\001\001\000\002\001\001\000\004\101\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\072\001\001\000\002\001\001\000\004\014\210" +
    "\001\001\000\002\001\001\000\014\016\106\017\103\020" +
    "\104\037\116\107\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\206" +
    "\020\104\037\116\107\115\001\001\000\002\001\001\000" +
    "\012\017\204\020\104\037\116\107\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\117\020\104\037\116\107\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\161\020\104\037\116\107\115\001\001\000\012" +
    "\017\160\020\104\037\116\107\115\001\001\000\012\017" +
    "\157\020\104\037\116\107\115\001\001\000\012\017\156" +
    "\020\104\037\116\107\115\001\001\000\012\017\155\020" +
    "\104\037\116\107\115\001\001\000\012\017\154\020\104" +
    "\037\116\107\115\001\001\000\012\017\153\020\104\037" +
    "\116\107\115\001\001\000\012\017\152\020\104\037\116" +
    "\107\115\001\001\000\012\017\151\020\104\037\116\107" +
    "\115\001\001\000\012\017\150\020\104\037\116\107\115" +
    "\001\001\000\012\017\147\020\104\037\116\107\115\001" +
    "\001\000\012\017\146\020\104\037\116\107\115\001\001" +
    "\000\012\017\145\020\104\037\116\107\115\001\001\000" +
    "\012\017\144\020\104\037\116\107\115\001\001\000\012" +
    "\017\143\020\104\037\116\107\115\001\001\000\012\017" +
    "\142\020\104\037\116\107\115\001\001\000\012\017\141" +
    "\020\104\037\116\107\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\174\017\103\020\104\037\116\040" +
    "\175\063\177\107\115\001\001\000\016\016\165\017\103" +
    "\020\104\037\116\076\166\107\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\165\017\103\020\104\037" +
    "\116\076\173\107\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\174\017\103\020\104\037\116\040\201" +
    "\063\177\107\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\010\217\011\034\012\035\021\050\022" +
    "\045\026\046\061\037\064\032\077\033\100\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\027\233\030" +
    "\256\031\245\032\257\035\223\037\236\043\253\044\224" +
    "\046\221\052\244\056\225\057\241\060\222\065\251\066" +
    "\235\071\226\102\234\104\252\105\240\106\243\110\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\027\233\030\256\031\245\032\257" +
    "\035\u012f\037\236\043\253\044\224\046\221\052\244\056" +
    "\225\057\241\060\222\065\251\066\235\071\226\102\234" +
    "\104\252\105\240\106\243\110\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\u0121\017" +
    "\103\020\104\037\116\107\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\027\233\030\256\031\245\032\257" +
    "\035\u0100\037\236\043\253\044\224\046\221\052\244\056" +
    "\225\057\241\060\222\065\251\066\235\071\226\102\234" +
    "\104\252\105\240\106\243\110\230\001\001\000\002\001" +
    "\001\000\020\016\165\017\103\020\104\037\116\075\350" +
    "\076\352\107\115\001\001\000\006\041\341\042\337\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\264\017\103\020\104" +
    "\037\116\107\115\001\001\000\002\001\001\000\014\016" +
    "\266\017\103\020\104\037\116\107\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\272\017\103\020\104\037\116\107\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\277\001\001\000\004\034\311\001\001\000\002\001\001" +
    "\000\004\103\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\101\305\001\001\000\002" +
    "\001\001\000\004\033\316\001\001\000\002\001\001\000" +
    "\014\016\313\017\103\020\104\037\116\107\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\027\233\030\256\031\245\032\257\035" +
    "\321\037\236\043\253\044\224\046\221\052\244\056\225" +
    "\057\241\060\222\065\251\066\235\071\226\102\234\104" +
    "\252\105\240\106\243\110\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\326\020" +
    "\104\037\116\045\325\107\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\326\020\104\037\116\045\332\107\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\027\233\030" +
    "\256\031\245\032\257\035\335\037\236\043\253\044\224" +
    "\046\221\052\244\056\225\057\241\060\222\065\251\066" +
    "\235\071\226\102\234\104\252\105\240\106\243\110\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\343\001\001\000\002\001\001\000\054" +
    "\027\233\030\256\031\245\032\257\035\346\037\236\043" +
    "\253\044\224\046\221\052\244\056\225\057\241\060\222" +
    "\065\251\066\235\071\226\102\234\104\252\105\240\106" +
    "\243\110\230\001\001\000\006\041\345\042\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\075\355\001\001\000" +
    "\002\001\001\000\004\074\361\001\001\000\002\001\001" +
    "\000\020\016\365\017\103\020\104\037\116\072\363\073" +
    "\366\107\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\365\017\103\020\104\037" +
    "\116\072\372\107\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\016\365\017\103\020" +
    "\104\037\116\072\371\107\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\375\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\067\u0104\070" +
    "\u010a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\u0116\017\103\020\104\037\116\107\115\001\001\000\002" +
    "\001\001\000\014\016\u0118\017\103\020\104\037\116\107" +
    "\115\001\001\000\002\001\001\000\014\016\u011a\017\103" +
    "\020\104\037\116\107\115\001\001\000\002\001\001\000" +
    "\014\017\326\020\104\037\116\045\u011c\107\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\027\233\030" +
    "\256\031\245\032\257\035\u011f\037\236\043\253\044\224" +
    "\046\221\052\244\056\225\057\241\060\222\065\251\066" +
    "\235\071\226\102\234\104\252\105\240\106\243\110\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\111\u0129\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\u013d\017\103\020\104\037\116\107\115\001\001\000" +
    "\002\001\001\000\016\016\165\017\103\020\104\037\116" +
    "\076\u0139\107\115\001\001\000\004\036\u0137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\u013b\017\103\020" +
    "\104\037\116\107\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\054" +
    "\u0144\055\u0142\001\001\000\002\001\001\000\004\062\u0159" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u0148\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\326\020\104\037\116" +
    "\045\u014d\107\115\001\001\000\002\001\001\000\004\053" +
    "\u0150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\027\233\030\256\031\245" +
    "\032\257\035\u0157\037\236\043\253\044\224\046\221\052" +
    "\244\056\225\057\241\060\222\065\251\066\235\071\226" +
    "\102\234\104\252\105\240\106\243\110\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u015b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\050\u0163\051\u0162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\u0167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\027\233\030\256\031\245\032" +
    "\257\035\u016e\037\236\043\253\044\224\046\221\052\244" +
    "\056\225\057\241\060\222\065\251\066\235\071\226\102" +
    "\234\104\252\105\240\106\243\110\230\001\001\000\002" +
    "\001\001\000\006\050\u0163\051\u0170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\027\233" +
    "\030\256\031\245\032\257\035\u0174\037\236\043\253\044" +
    "\224\046\221\052\244\056\225\057\241\060\222\065\251" +
    "\066\235\071\226\102\234\104\252\105\240\106\243\110" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\027\233\030\256\031" +
    "\245\032\257\035\u0179\037\236\043\253\044\224\046\221" +
    "\052\244\056\225\057\241\060\222\065\251\066\235\071" +
    "\226\102\234\104\252\105\240\106\243\110\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\u0182\023\u0181\024\u017f\025\u0183" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\u0182\023\u0188\024\u017f\001\001\000\002\001\001" +
    "\000\014\016\u018c\017\103\020\104\037\116\107\115\001" +
    "\001\000\012\013\u0182\023\u0181\024\u017f\025\u018b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\u0192\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u019d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\u0182\023" +
    "\u0181\024\u017f\025\u019a\001\001\000\002\001\001\000\012" +
    "\013\u0182\023\u0181\024\u017f\025\u019c\001\001\000\002\001" +
    "\001\000\004\014\064\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

        private TipoDato tipo;
        private Pista pista;
        private boolean asigna= false;
        private Operation instrOp;
        private ArrayList<ErrorSemantico> errorsSemanticos = new ArrayList<ErrorSemantico>();
        private ArrayList<Variable> parametros = new ArrayList<Variable>();
        private ArrayList<Operation> parametroLllmada = new ArrayList<>();
        private int cont = 0;
        private int contDimes=0;


 /* Connect this parser to a scanner!*/
	public parser(LexerPista analizadorLexico) {
		super(analizadorLexico);
	}


        public Pista getPista() {
                return pista;
        }
       
        public ArrayList<ErrorSemantico> getErrorsSemanticos() {
                return errorsSemanticos;
        }

        public void setErrorsSemanticos(ArrayList<ErrorSemantico> errorsSemanticos) {
                this.errorsSemanticos = errorsSemanticos;
        }



        @Override
        public void syntax_error(Symbol tok) {
                String esperado = "Terminales de sentencias: ), } o ;";
	    try{
                List<Integer> lista=expected_token_ids();
                if(!lista.isEmpty()){
                       if(lista.get(0)<=50){
                               esperado = sym.terminalNames[lista.get(0)];
                        } 
                }
	        Token token = (Token) tok.value;
                report_error("",null);
                ErroresSingleton.getInstance().getErroresSintacticos().add(new ErrorSintactico(token, "No pertenece a la gramatica, en su lugar se esperaba: "+ esperado));

            }catch(Exception e){
                Token token = (Token) tok.value;
                report_error("",null);
                ErroresSingleton.getInstance().getErroresSintacticos().add(new ErrorSintactico(token, "No pertenece a la gramatica, en su lugar se esperaba: "+ esperado));

	    }	
	}

         @Override
        public List<Integer> expected_token_ids() {
                return super.expected_token_ids();
        }


    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
             ErroresSingleton.getInstance().getErroresSintacticos().add(new ErrorSintactico(new Token("No recuperado", 1, 1), "Posiblemente no se encontro un ; o un ) o un } para la recuperacion adecuada"));
        }else{
             Token token = (Token) cur_token.value;
             report_error("",null);
             ErroresSingleton.getInstance().getErroresSintacticos().add(new ErrorSintactico(token, "Token no pertenece a la gramatica y su recuperacion es incierta"));

        }
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= def_pista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // def_pista ::= comodin_pista LLAVEA sentencias_global LLAVEC 
            {
              Object RESULT =null;
		pista.referenciarTablasPadres(); pista.realizarAccionesSemanticas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_pista",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def_pista ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_pista",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comodin_pista ::= PISTA ID 
            {
              Object RESULT =null;
		int pistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token pist = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista = new Pista(pist.getLexeme(), new TablaSimbol(errorsSemanticos), errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comodin_pista ::= PISTA ID comodin_extiende 
            {
              Object RESULT =null;
		int pistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token pist = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista = new Pista( (ArrayList<Token>)  array,pist.getLexeme(), new TablaSimbol(errorsSemanticos), errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comodin_pista ::= error LLAVEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comodin_extiende ::= EXTIENDE ID items_extiende 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Token> ids = (ArrayList<Token>) array; ids.add(id); RESULT = ids;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_extiende",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comodin_extiende ::= error LLAVEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_extiende",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // items_extiende ::= COMA ID items_extiende 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Token> ids = (ArrayList<Token>) array; ids.add(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_extiende",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // items_extiende ::= 
            {
              Object RESULT =null;
		RESULT= new ArrayList<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_extiende",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // items_extiende ::= error LLAVEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_extiende",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias_global ::= sentencia_global sentencias_global 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencias_global ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencias_global ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia_global ::= def_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia_global ::= asignacion_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia_global ::= def_funciones 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.getFunciones().add((Funcion) fun);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia_global ::= def_fun_principal 
            {
              Object RESULT =null;
		int funPrinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funPrinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funPrin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setFunPrincipal((Funcion) funPrin); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_global ::= def_fun_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_global ::= error sentencia_global 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // def_variable ::= variables 
            {
              Object RESULT =null;
		pista.carpturarVariablesGlobales(tipo,asigna, instrOp); asigna= false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // def_variable ::= KEEP variables 
            {
              Object RESULT =null;
		pista.carpturarVariablesGlobales(tipo,asigna, instrOp); asigna= false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variables ::= VAR tipo items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // items_coma ::= ID items 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.getTableSimbolGoblal().capturarIds((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // items ::= IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // items ::= COMA items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // items ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo ::= ENTERO 
            {
              Object RESULT =null;
		tipo=TipoDato.ENTERO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo ::= DOBLE 
            {
              Object RESULT =null;
		tipo=TipoDato.DECIMAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		tipo=TipoDato.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo ::= CADENA 
            {
              Object RESULT =null;
		tipo=TipoDato.CADENA;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo ::= CARACTER 
            {
              Object RESULT =null;
		tipo=TipoDato.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion_var ::= ID IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int operaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opera = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.capturarAsignacion(id, (Operation) opera);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion ::= operation 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation((NodoOperation) rootOp); instrOp =new Operation((NodoOperation) rootOp); asigna= true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= operation MAS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.SUMA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operation ::= operation MENOS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.RESTA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= operation POR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MULTIPLICACION, (NodoOperation) opLeft,(NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= operation DIVISION operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.DIVISION, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= operation MODULO operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MODULO, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation ::= operation POTENCIA operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.POTENCIA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= operation MAYORQ operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MAYORQ, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= operation MENORQ operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MENORQ, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operation ::= operation MAYOROI operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MAYOROI, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operation ::= operation MENOROI operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MENOROI, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operation ::= operation NOTEQUALS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.NOTEQUALS, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operation ::= operation EQUALS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.EQUALS, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operation ::= ISNULO operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operation ::= NOT operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operation ::= operation OR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.OR, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operation ::= operation AND operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.AND, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operation ::= operation NAND operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.NAND, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operation ::= operation NOR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.NOR, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operation ::= operation XOR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.XOR, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operation ::= terminal_casos 
            {
              Object RESULT =null;
		int nodoOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodoOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodoOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nodoOp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operation ::= PARENTESISA operation PARENTESISC 
            {
              Object RESULT =null;
		int nodoOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nodoOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = nodoOp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operation ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // terminal_casos ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // terminal_casos ::= llamada_metod 
            {
              Object RESULT =null;
		int nodFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.clear(); RESULT = nodFun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // terminal_casos ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // terminal_casos ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // terminal_casos ::= CONT_CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.CHAR));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // terminal_casos ::= CONT_CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.CADENA));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // terminal_casos ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // terminal_casos ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // terminal_casos ::= valor_arreglo 
            {
              Object RESULT =null;
		int valArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valArr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // def_funciones ::= comodin_fun LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Funcion funs = (Funcion) fun; funs.setInstruccions((ArrayList<Instruccions>) sent); parametros.clear(); RESULT = funs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funciones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // def_funciones ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funciones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comodin_fun ::= KEEP tipo_fun ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (TipoDato)tip); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comodin_fun ::= KEEP ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comodin_fun ::= tipo_fun ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (TipoDato)tip); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // comodin_fun ::= ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // comodin_fun ::= error LLAVEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cierre_fun ::= parametros PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_fun",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cierre_fun ::= PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_fun",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo_fun ::= ENTERO 
            {
              Object RESULT =null;
		RESULT =TipoDato.ENTERO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo_fun ::= DOBLE 
            {
              Object RESULT =null;
		RESULT =TipoDato.DECIMAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo_fun ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT =TipoDato.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipo_fun ::= CADENA 
            {
              Object RESULT =null;
		RESULT =TipoDato.CADENA;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipo_fun ::= CARACTER 
            {
              Object RESULT =null;
		RESULT =TipoDato.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametros ::= comodin_param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametros ::= comodin_param COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametros ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comodin_param ::= tipo ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parametros.add(new Variable((Token)id, tipo, "",false));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Instruccions> arr= (ArrayList<Instruccions>)array; arr.add(0,(Instruccions)sent); RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencias ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Instruccions>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencias ::= error sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia ::= variables_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionVar((ArrayList<Variable>)array,asigna,(Operation) instrOp) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia ::= asignacion_var_fun 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = asig;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia ::= op_incremt_decremet_fun PUNTOCOMA 
            {
              Object RESULT =null;
		int decrIncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decrIncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decrInc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = decrInc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia ::= llamada_metod PUNTOCOMA 
            {
              Object RESULT =null;
		int metodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int metodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object metod = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parametroLllmada.clear(); RESULT = new LlamadaFuncion((NodoOperation) metod);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencia ::= sentencias_bifuraciones 
            {
              Object RESULT =null;
		int sentbifuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentbifuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sentbifu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sentbifu;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencia ::= RETORNA asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaRetorna((Operation) op, (Token) tok, errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencia ::= fun_mensaje 
            {
              Object RESULT =null;
		int funMjsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funMjsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funMjs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funMjs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencia ::= def_fun_reproducir 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = repro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencia ::= def_fun_esperar 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = repro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencia ::= decla_array_inicializado 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setSizeArray(0); cont = 0; contDimes = 0; pista.getTableSimbolGoblal().getIds().clear(); RESULT = arreglo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencia ::= decla_arry 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setSizeArray(0); cont = 0; contDimes = 0; pista.getTableSimbolGoblal().getIds().clear(); RESULT = arreglo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencia ::= asig_arreglo 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = asig;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencia ::= def_fun_ordenar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // asignacion_var_fun ::= ID IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Asignacion((Operation)op,(Token)id,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_var_fun",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // asignacion_var_fun ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_var_fun",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variables_fun ::= VAR tipo items_coma_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT  = array;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables_fun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // items_coma_fun ::= ID items_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Variable> arryTmp = (ArrayList<Variable>) array; arryTmp.add( new Variable((Token)id,tipo, "", asigna)); RESULT = arryTmp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma_fun",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // items_fun ::= IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Variable>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // items_fun ::= COMA items_coma_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = array;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // items_fun ::= PUNTOCOMA 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Variable>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // items_fun ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // op_incremt_decremet_fun ::= ID SUMA_IMPLICITA terminales_increment_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, (NodoOperation) nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // op_incremt_decremet_fun ::= ID INCREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // op_incremt_decremet_fun ::= ID DECREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.RESTA, nodLeft, nodRight); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // op_incremt_decremet_fun ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // terminales_increment_fun ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // terminales_increment_fun ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // terminales_increment_fun ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // llamada_metod ::= ID PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new NodoOperation((Token) id, parametroLllmada,pista);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metod",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parametros_llamada ::= terminal_casos_param COMA parametros_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parametros_llamada ::= terminal_casos_param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametros_llamada ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parametros_llamada ::= error PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // terminal_casos_param ::= asignacion 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parametroLllmada.add((Operation) asig);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencias_bifuraciones ::= def_if_complete 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencias_bifuraciones ::= def_switch 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencias_bifuraciones ::= def_for 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencias_bifuraciones ::= def_while 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencias_bifuraciones ::= def_do_while 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // condition ::= operation 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation((NodoOperation) rootOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // def_if_complete ::= def_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = senIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // def_if_complete ::= def_if def_else 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senElse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElse((SentenciaElse) senElse); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // def_if_complete ::= def_if def_else_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senIfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIfs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElseIf((SentenciaIF) senIfs); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // def_if ::= SI PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaIF((ArrayList<Instruccions>) sent,(Operation)op, new TablaSimbol(errorsSemanticos) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // def_else ::= SINO LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaElse((ArrayList<Instruccions>) sent, new TablaSimbol(errorsSemanticos) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // def_else_if ::= SINO def_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = senIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // def_else_if ::= SINO def_if def_else 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senElse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElse((SentenciaElse) senElse); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // def_else_if ::= SINO def_if def_else_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senIfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIfs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElseIf((SentenciaIF) senIfs); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // def_switch ::= SWITCH PARENTESISA ID PARENTESISC LLAVEA cases LLAVEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arryCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arryCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arryC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaSwitch((ArrayList<CasoSwitch> ) arryC, new Variable((Token) id, TipoDato.ENTERO, "",false),  new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_switch",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cases ::= caso_sw SALIR cases 
            {
              Object RESULT =null;
		int cassleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cassright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cass = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arryCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arryCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arryC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<CasoSwitch> arr = (ArrayList<CasoSwitch>)arryC; arr.add(0,(CasoSwitch)cass); RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // cases ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<CasoSwitch>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // cases ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // caso_sw ::= CASO terminales_switch DOPUNTO sentencias 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoSwitch((ArrayList<Instruccions>)inst,(Dato) dat);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // caso_sw ::= DEFAULT DOPUNTO sentencias 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoSwitch((ArrayList<Instruccions>)inst,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // caso_sw ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // terminales_switch ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(false, (Token) val, TipoDato.ENTERO, val.getLexeme());;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // terminales_switch ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.ENTERO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // terminales_switch ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.DECIMAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // terminales_switch ::= CONT_CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.CADENA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // terminales_switch ::= CONT_CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.CHAR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // terminales_switch ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.BOOLEAN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // terminales_switch ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.BOOLEAN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // def_for ::= PARA PARENTESISA condition_for PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int forsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int forsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object fors = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		SentenciaFor senFor = (SentenciaFor)fors; senFor.setInstruccions((ArrayList<Instruccions>) instr); RESULT = senFor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_for",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // condition_for ::= var_iterador PUNTOCOMA condition PUNTOCOMA op_incremt_decremet_for 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object condi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int incremleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int incremright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object increm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaFor((Instruccions)inst,  new TablaSimbol(errorsSemanticos), (Asignacion)increm, (Operation) condi);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_for",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // condition_for ::= error PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_for",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // var_iterador ::= ENTERO ID asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Variable> variables= new ArrayList<Variable>(); variables.add(new Variable((Token ) id, TipoDato.ENTERO, "", true)); RESULT = new DeclaracionVar(variables, true, (Operation)op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // var_iterador ::= DOBLE ID asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Variable> variables= new ArrayList<Variable>(); variables.add(new Variable((Token ) id, TipoDato.DECIMAL, "", true)); RESULT = new DeclaracionVar(variables, true, (Operation)op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // var_iterador ::= ID asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Asignacion((Operation) op, (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // var_iterador ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // asignacion_iterador ::= IGUAL ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // asignacion_iterador ::= IGUAL NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // asignacion_iterador ::= IGUAL DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // op_incremt_decremet_for ::= ID INCREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_for",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // op_incremt_decremet_for ::= ID DECREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.RESTA, nodLeft, nodRight); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_for",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // def_while ::= MIENTRAS PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaWhile((ArrayList<Instruccions> )sent, (Operation) cond, new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_while",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // def_do_while ::= HACER LLAVEA sentencias LLAVEC MIENTRAS PARENTESISA condition PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new SentenciaDoWhile((ArrayList<Instruccions> )sent, (Operation) cond, new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_do_while",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // fun_mensaje ::= MENSAJE PARENTESISA asignacion PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Mensaje((Operation) rootOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_mensaje",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // def_fun_principal ::= PRINCIPAL PARENTESISA PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (ArrayList<Instruccions>) inst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_principal",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // def_fun_reproducir ::= REPRODUCIR PARENTESISA def_sentencias_repro PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;
		int reproleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reproright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object repro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = repro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_reproducir",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // def_sentencias_repro ::= def_nota_musical COMA asignacion COMA asignacion COMA asignacion 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int octleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int octright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object oct = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int milisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int milisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object milis = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int canleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int canright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object can = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaReproducir((String) not, (Operation) oct, (Operation) milis, (Operation) can) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_sentencias_repro",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // def_nota_musical ::= NOTA_DO 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // def_nota_musical ::= NOTA_DO_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // def_nota_musical ::= NOTA_RE 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // def_nota_musical ::= NOTA_RE_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // def_nota_musical ::= NOTA_MI 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // def_nota_musical ::= NOTA_FA 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // def_nota_musical ::= NOTA_FA_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // def_nota_musical ::= NOTA_SOL 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // def_nota_musical ::= NOTA_SOL_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // def_nota_musical ::= NOTA_LA 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // def_nota_musical ::= NOTA_LA_S 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // def_nota_musical ::= SI 
            {
              Object RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nota = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nota.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // def_nota_musical ::= error COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // def_fun_esperar ::= ESPERAR PARENTESISA asignacion COMA asignacion PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;
		int milisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int milisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object milis = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int canleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int canright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object can = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new SentenciaReproducir("Z", (Operation) milis, (Operation) can) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_esperar",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // def_fun_arreglo ::= def_tipo_arreglo def_sin_dimens IGUAL asignacion_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.capturarArregloGlobales(tipo, cont, contDimes, (ArrayList<Operation>)arrOp ); cont = 0; contDimes = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_arreglo",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // def_fun_arreglo ::= def_tipo_arreglo def_dimension_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.captruarDeclaracionArreglo(tipo, (ArrayList<Operation>) arrOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_arreglo",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // def_tipo_arreglo ::= VAR tipo ARREGLO ids CORCHETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_tipo_arreglo",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // def_tipo_arreglo ::= error CORCHETC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_tipo_arreglo",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ids ::= ID COMA ids 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		pista.getTableSimbolGoblal().capturarIdsArr((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ids ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.getTableSimbolGoblal().capturarIdsArr((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // def_dimension_arreglo ::= asignacion CORCHETC CORCHETA def_dimension_arreglo 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Operation> operations =( ArrayList<Operation>) arrs; operations.add(0,(Operation)op); RESULT = operations; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_dimension_arreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // def_dimension_arreglo ::= asignacion CORCHETC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ArrayList<Operation> operations = new ArrayList<>(); operations.add((Operation)op); RESULT = operations;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_dimension_arreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // def_dimension_arreglo ::= error CORCHETC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_dimension_arreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // def_sin_dimens ::= CORCHETC CORCHETA def_sin_dimens 
            {
              Object RESULT =null;
		cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_sin_dimens",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // def_sin_dimens ::= CORCHETC 
            {
              Object RESULT =null;
		cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_sin_dimens",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // asignacion_arreglo ::= LLAVEA asignaciones_recursivas LLAVEC 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		contDimes++; RESULT = arr ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // asignacion_arreglo ::= LLAVEA varios_dimensiones LLAVEC 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = arr ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // asignacion_arreglo ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // varios_dimensiones ::= LLAVEA asignaciones_recursivas LLAVEC COMA varios_dimensiones 
            {
              Object RESULT =null;
		int arr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object arr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		contDimes++; RESULT = pista.unirOperaciones((ArrayList<Operation>) arr1, (ArrayList<Operation>) arr2, (Token) tok);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varios_dimensiones",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // varios_dimensiones ::= LLAVEA asignaciones_recursivas LLAVEC 
            {
              Object RESULT =null;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		contDimes++; RESULT = arrs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varios_dimensiones",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // asignaciones_recursivas ::= asignacion COMA asignaciones_recursivas 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Operation> operations =( ArrayList<Operation>) arrs; operations.add(0,(Operation)op); RESULT = operations; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones_recursivas",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // asignaciones_recursivas ::= asignacion 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Operation> operations = new ArrayList<>(); operations.add((Operation)op); RESULT = operations;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones_recursivas",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // decla_array_inicializado ::= def_tipo_arreglo_fun def_sin_dimens IGUAL asignacion_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ManejadorArreglos(pista.getSizeArray(), (ArrayList<Operation>) arrOp, pista.getTableSimbolGoblal().getIds(), tipo, cont, contDimes, errorsSemanticos);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decla_array_inicializado",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // decla_arry ::= def_tipo_arreglo_fun def_dimension_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ManejadorArreglos(tipo, null, (ArrayList<Operation>) arrOp, pista.getTableSimbolGoblal().getIds());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decla_arry",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // def_tipo_arreglo_fun ::= VAR tipo ARREGLO ids_fun CORCHETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_tipo_arreglo_fun",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ids_fun ::= ID COMA ids 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		pista.getTableSimbolGoblal().capturarIdsFun((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids_fun",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ids_fun ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.getTableSimbolGoblal().capturarIdsFun((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids_fun",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // asig_arreglo ::= ID CORCHETA def_dimension_arreglo IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Asignacion((Operation) rootOp, (Token) id, (ArrayList<Operation>) arr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig_arreglo",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // valor_arreglo ::= ID CORCHETA def_dimension_arreglo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) id,TipoDato.ENTERO, (ArrayList<Operation>) arr));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_arreglo",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // def_fun_ordenar ::= ORDENAR PARENTESISA ID COMA formaOrdenar PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_ordenar",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // formaOrdenar ::= ASCENDENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // formaOrdenar ::= DESCENDENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // formaOrdenar ::= PARES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // formaOrdenar ::= IMPARES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // formaOrdenar ::= PRIMOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
