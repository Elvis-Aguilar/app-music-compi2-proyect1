
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.sistema.musicserver.analizadores.pista;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.sistema.musicserver.pista.Pista;
import com.sistema.musicserver.tablaSimbol.TablaSimbol;
import com.sistema.musicserver.instrucciones.declaracionAsignacion.*;
import com.sistema.musicserver.errors.ErrorSemantico;
import com.sistema.musicserver.tablaSimbol.Variable;
import com.sistema.musicserver.instrucciones.funciones.*;
import com.sistema.musicserver.instrucciones.Instruccions;
import com.sistema.musicserver.instrucciones.bifurcaciones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\305\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\112\004\000\002\112\003\000\002\003\006" +
    "\000\002\004\004\000\002\004\005\000\002\005\005\000" +
    "\002\006\005\000\002\006\002\000\002\007\004\000\002" +
    "\007\002\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\003" +
    "\000\002\011\004\000\002\012\005\000\002\014\004\000" +
    "\002\015\005\000\002\015\004\000\002\015\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\021\006\000\002\016\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\004" +
    "\000\002\017\004\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\003\000\002\017\005\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\026\006\000\002\022\007\000\002" +
    "\022\006\000\002\022\006\000\002\022\005\000\002\025" +
    "\004\000\002\025\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\023\003\000\002\023\005\000\002\024\004\000\002" +
    "\035\004\000\002\035\002\000\002\027\003\000\002\027" +
    "\003\000\002\027\004\000\002\027\004\000\002\027\003" +
    "\000\002\027\005\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\031\006\000\002\030" +
    "\005\000\002\033\004\000\002\034\005\000\002\034\004" +
    "\000\002\034\003\000\002\032\005\000\002\032\004\000" +
    "\002\032\004\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\037\006\000\002\040\005\000\002\040" +
    "\003\000\002\040\002\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\045" +
    "\003\000\002\044\003\000\002\044\004\000\002\044\004" +
    "\000\002\043\011\000\002\042\006\000\002\041\004\000" +
    "\002\041\005\000\002\041\005\000\002\052\011\000\002" +
    "\051\005\000\002\051\002\000\002\050\006\000\002\050" +
    "\005\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\056\011\000\002\055\007\000\002" +
    "\054\005\000\002\054\005\000\002\054\004\000\002\062" +
    "\004\000\002\062\004\000\002\062\004\000\002\053\004" +
    "\000\002\053\004\000\002\057\011\000\002\060\013\000" +
    "\002\065\007\000\002\064\010\000\002\066\007\000\002" +
    "\070\011\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\071\011\000\002\100\007\000\002\100\005\000\002\077" +
    "\007\000\002\101\005\000\002\101\003\000\002\076\006" +
    "\000\002\076\004\000\002\075\005\000\002\075\003\000" +
    "\002\074\005\000\002\074\005\000\002\073\007\000\002" +
    "\073\005\000\002\072\005\000\002\072\003\000\002\102" +
    "\007\000\002\105\005\000\002\104\007\000\002\103\005" +
    "\000\002\103\003\000\002\106\010\000\002\107\005\000" +
    "\002\110\011\000\002\111\003\000\002\111\003\000\002" +
    "\111\003\000\002\111\003\000\002\111\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017f\000\006\002\uffff\004\006\001\002\000\004\007" +
    "\023\001\002\000\004\002\000\001\002\000\004\005\013" +
    "\001\002\000\004\002\012\001\002\000\006\002\ufffd\004" +
    "\006\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002\000\006\006\014\007\ufffb\001\002\000\004\005" +
    "\016\001\002\000\004\007\ufffa\001\002\000\006\007\ufff7" +
    "\011\017\001\002\000\004\005\021\001\002\000\004\007" +
    "\ufff9\001\002\000\006\007\ufff7\011\017\001\002\000\004" +
    "\007\ufff8\001\002\000\026\005\032\010\ufff5\036\044\037" +
    "\040\040\036\041\025\042\035\045\047\046\024\104\037" +
    "\001\002\000\020\005\u0179\036\044\037\040\040\036\041" +
    "\025\042\035\045\u0178\001\002\000\004\005\uffb9\001\002" +
    "\000\026\005\ufff1\010\ufff1\036\ufff1\037\ufff1\040\ufff1\041" +
    "\ufff1\042\ufff1\045\ufff1\046\ufff1\104\ufff1\001\002\000\030" +
    "\005\103\012\100\014\073\015\072\016\105\017\075\020" +
    "\074\021\104\047\102\056\106\075\332\001\002\000\026" +
    "\005\ufff4\010\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\045\ufff4\046\ufff4\104\ufff4\001\002\000\026\005\uffef" +
    "\010\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\045" +
    "\uffef\046\uffef\104\uffef\001\002\000\006\012\u016e\043\u016d" +
    "\001\002\000\004\005\u0162\001\002\000\004\010\u0161\001" +
    "\002\000\004\005\uffb8\001\002\000\004\005\uffba\001\002" +
    "\000\004\012\u015c\001\002\000\004\005\uffbb\001\002\000" +
    "\004\007\204\001\002\000\026\005\ufff2\010\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\041\ufff2\042\ufff2\045\ufff2\046\ufff2\104" +
    "\ufff2\001\002\000\026\005\ufff3\010\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\045\ufff3\046\ufff3\104\ufff3\001" +
    "\002\000\004\005\uffbc\001\002\000\026\005\ufff0\010\ufff0" +
    "\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\045\ufff0\046" +
    "\ufff0\104\ufff0\001\002\000\026\005\032\010\ufff5\036\044" +
    "\037\040\040\036\041\025\042\035\045\047\046\024\104" +
    "\037\001\002\000\014\036\054\037\050\040\053\041\055" +
    "\042\052\001\002\000\006\005\uffe7\076\uffe7\001\002\000" +
    "\006\005\056\076\060\001\002\000\006\005\uffe4\076\uffe4" +
    "\001\002\000\006\005\uffe6\076\uffe6\001\002\000\006\005" +
    "\uffe8\076\uffe8\001\002\000\006\005\uffe5\076\uffe5\001\002" +
    "\000\010\011\066\043\070\044\071\001\002\000\026\005" +
    "\uffed\010\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\045\uffed\046\uffed\104\uffed\001\002\000\004\005\061\001" +
    "\002\000\006\011\064\074\uff54\001\002\000\004\074\063" +
    "\001\002\000\030\005\uff56\012\uff56\014\uff56\015\uff56\016" +
    "\uff56\017\uff56\020\uff56\021\uff56\047\uff56\056\uff56\075\uff56" +
    "\001\002\000\004\005\061\001\002\000\004\074\uff55\001" +
    "\002\000\004\005\056\001\002\000\026\005\uffec\010\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\045\uffec\046" +
    "\uffec\104\uffec\001\002\000\026\005\103\012\100\014\073" +
    "\015\072\016\105\017\075\020\074\021\104\047\102\056" +
    "\106\001\002\000\026\005\uffe9\010\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\045\uffe9\046\uffe9\104\uffe9\001" +
    "\002\000\056\010\uffc9\011\uffc9\013\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\044\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\055\uffc9\075\uffc9\001\002\000\056\010" +
    "\uffca\011\uffca\013\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\044\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\055\uffca\075\uffca\001\002\000\056\010\uffc6\011\uffc6\013" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\044" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\075\uffc6" +
    "\001\002\000\056\010\uffc7\011\uffc7\013\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\044\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\054\uffc7\055\uffc7\075\uffc7\001\002\000\056" +
    "\010\uffe2\011\uffe2\013\uffe2\022\122\023\115\024\117\025" +
    "\126\026\124\027\114\030\132\031\121\032\120\033\123" +
    "\034\116\035\127\044\uffe2\051\131\052\113\053\130\054" +
    "\112\055\125\075\uffe2\001\002\000\056\010\uffce\011\uffce" +
    "\013\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\044\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\075" +
    "\uffce\001\002\000\026\005\103\012\100\014\073\015\072" +
    "\016\105\017\075\020\074\021\104\047\102\056\106\001" +
    "\002\000\004\044\177\001\002\000\026\005\103\012\100" +
    "\014\073\015\072\016\105\017\075\020\074\021\104\047" +
    "\102\056\106\001\002\000\062\010\uffcc\011\uffcc\012\154" +
    "\013\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\044\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\074" +
    "\155\075\uffcc\001\002\000\056\010\uffc5\011\uffc5\013\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\044\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\075\uffc5\001" +
    "\002\000\056\010\uffc8\011\uffc8\013\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\044\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\075\uffc8\001\002\000\026\005" +
    "\103\012\100\014\073\015\072\016\105\017\075\020\074" +
    "\021\104\047\102\056\106\001\002\000\056\010\uffc4\011" +
    "\uffc4\013\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\044\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\075\uffc4\001\002\000\056\010\uffcb\011\uffcb\013\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\044\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\075\uffcb\001\002" +
    "\000\056\010\uffd4\011\uffd4\013\uffd4\022\122\023\115\024" +
    "\117\025\126\026\124\027\114\030\132\031\121\032\120" +
    "\033\123\034\116\035\127\044\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\075\uffd4\001\002\000\026\005\103" +
    "\012\100\014\073\015\072\016\105\017\075\020\074\021" +
    "\104\047\102\056\106\001\002\000\026\005\103\012\100" +
    "\014\073\015\072\016\105\017\075\020\074\021\104\047" +
    "\102\056\106\001\002\000\026\005\103\012\100\014\073" +
    "\015\072\016\105\017\075\020\074\021\104\047\102\056" +
    "\106\001\002\000\026\005\103\012\100\014\073\015\072" +
    "\016\105\017\075\020\074\021\104\047\102\056\106\001" +
    "\002\000\026\005\103\012\100\014\073\015\072\016\105" +
    "\017\075\020\074\021\104\047\102\056\106\001\002\000" +
    "\026\005\103\012\100\014\073\015\072\016\105\017\075" +
    "\020\074\021\104\047\102\056\106\001\002\000\026\005" +
    "\103\012\100\014\073\015\072\016\105\017\075\020\074" +
    "\021\104\047\102\056\106\001\002\000\026\005\103\012" +
    "\100\014\073\015\072\016\105\017\075\020\074\021\104" +
    "\047\102\056\106\001\002\000\026\005\103\012\100\014" +
    "\073\015\072\016\105\017\075\020\074\021\104\047\102" +
    "\056\106\001\002\000\026\005\103\012\100\014\073\015" +
    "\072\016\105\017\075\020\074\021\104\047\102\056\106" +
    "\001\002\000\026\005\103\012\100\014\073\015\072\016" +
    "\105\017\075\020\074\021\104\047\102\056\106\001\002" +
    "\000\026\005\103\012\100\014\073\015\072\016\105\017" +
    "\075\020\074\021\104\047\102\056\106\001\002\000\026" +
    "\005\103\012\100\014\073\015\072\016\105\017\075\020" +
    "\074\021\104\047\102\056\106\001\002\000\026\005\103" +
    "\012\100\014\073\015\072\016\105\017\075\020\074\021" +
    "\104\047\102\056\106\001\002\000\026\005\103\012\100" +
    "\014\073\015\072\016\105\017\075\020\074\021\104\047" +
    "\102\056\106\001\002\000\026\005\103\012\100\014\073" +
    "\015\072\016\105\017\075\020\074\021\104\047\102\056" +
    "\106\001\002\000\026\005\103\012\100\014\073\015\072" +
    "\016\105\017\075\020\074\021\104\047\102\056\106\001" +
    "\002\000\056\010\uffdb\011\uffdb\013\uffdb\022\122\023\115" +
    "\024\117\025\126\026\124\027\114\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\044\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\075\uffdb\001\002\000\056\010" +
    "\uffd3\011\uffd3\013\uffd3\022\122\023\115\024\117\025\126" +
    "\026\124\027\114\030\132\031\121\032\120\033\123\034" +
    "\116\035\127\044\uffd3\051\uffd3\052\uffd3\053\uffd3\054\112" +
    "\055\125\075\uffd3\001\002\000\056\010\uffd0\011\uffd0\013" +
    "\uffd0\022\122\023\115\024\117\025\126\026\124\027\114" +
    "\030\132\031\121\032\120\033\123\034\116\035\127\044" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\054\112\055\125\075\uffd0" +
    "\001\002\000\056\010\uffd6\011\uffd6\013\uffd6\022\122\023" +
    "\115\024\117\025\126\026\124\027\114\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\044\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\075\uffd6\001\002\000\056" +
    "\010\uffde\011\uffde\013\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\114\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\044\uffde\051\uffde\052\uffde\053\uffde\054" +
    "\uffde\055\uffde\075\uffde\001\002\000\056\010\uffd1\011\uffd1" +
    "\013\uffd1\022\122\023\115\024\117\025\126\026\124\027" +
    "\114\030\132\031\121\032\120\033\123\034\116\035\127" +
    "\044\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\075" +
    "\uffd1\001\002\000\056\010\uffdd\011\uffdd\013\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\114\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\044\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\054\uffdd\055\uffdd\075\uffdd\001\002\000" +
    "\056\010\uffd8\011\uffd8\013\uffd8\022\122\023\115\024\117" +
    "\025\126\026\124\027\114\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\044\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\075\uffd8\001\002\000\056\010\uffe1\011" +
    "\uffe1\013\uffe1\022\uffe1\023\uffe1\024\117\025\126\026\124" +
    "\027\114\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\044\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\075\uffe1\001\002\000\056\010\uffda\011\uffda\013\uffda\022" +
    "\122\023\115\024\117\025\126\026\124\027\114\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\044\uffda\051" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\075\uffda\001\002" +
    "\000\056\010\uffd9\011\uffd9\013\uffd9\022\122\023\115\024" +
    "\117\025\126\026\124\027\114\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\044\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\075\uffd9\001\002\000\056\010\uffdf" +
    "\011\uffdf\013\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\114\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\044\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\075\uffdf\001\002\000\056\010\uffd7\011\uffd7\013\uffd7" +
    "\022\122\023\115\024\117\025\126\026\124\027\114\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\044\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\075\uffd7\001" +
    "\002\000\056\010\uffe0\011\uffe0\013\uffe0\022\uffe0\023\uffe0" +
    "\024\117\025\126\026\124\027\114\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\044\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\075\uffe0\001\002\000\056\010" +
    "\uffdc\011\uffdc\013\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\044\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc" +
    "\055\uffdc\075\uffdc\001\002\000\056\010\uffcf\011\uffcf\013" +
    "\uffcf\022\122\023\115\024\117\025\126\026\124\027\114" +
    "\030\132\031\121\032\120\033\123\034\116\035\127\044" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\112\055\125\075\uffcf" +
    "\001\002\000\056\010\uffd2\011\uffd2\013\uffd2\022\122\023" +
    "\115\024\117\025\126\026\124\027\114\030\132\031\121" +
    "\032\120\033\123\034\116\035\127\044\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\075\uffd2\001\002\000\020" +
    "\013\uff96\014\165\015\172\016\164\017\171\020\166\021" +
    "\170\001\002\000\026\005\103\012\100\014\073\015\072" +
    "\016\105\017\075\020\074\021\104\047\102\056\106\001" +
    "\002\000\056\010\uff43\011\uff43\013\uff43\022\uff43\023\uff43" +
    "\024\uff43\025\uff43\026\uff43\027\uff43\030\uff43\031\uff43\032" +
    "\uff43\033\uff43\034\uff43\035\uff43\044\uff43\051\uff43\052\uff43" +
    "\053\uff43\054\uff43\055\uff43\075\uff43\001\002\000\004\075" +
    "\160\001\002\000\062\010\uff52\011\uff52\013\uff52\022\uff52" +
    "\023\uff52\024\uff52\025\uff52\026\uff52\027\uff52\030\uff52\031" +
    "\uff52\032\uff52\033\uff52\034\uff52\035\uff52\043\uff52\044\uff52" +
    "\051\uff52\052\uff52\053\uff52\054\uff52\055\uff52\074\161\075" +
    "\uff52\001\002\000\026\005\103\012\100\014\073\015\072" +
    "\016\105\017\075\020\074\021\104\047\102\056\106\001" +
    "\002\000\060\010\uff53\011\uff53\013\uff53\022\uff53\023\uff53" +
    "\024\uff53\025\uff53\026\uff53\027\uff53\030\uff53\031\uff53\032" +
    "\uff53\033\uff53\034\uff53\035\uff53\043\uff53\044\uff53\051\uff53" +
    "\052\uff53\053\uff53\054\uff53\055\uff53\075\uff53\001\002\000" +
    "\006\011\174\013\uff97\001\002\000\006\011\uff93\013\uff93" +
    "\001\002\000\006\011\uff95\013\uff95\001\002\000\006\011" +
    "\uff91\013\uff91\001\002\000\004\013\173\001\002\000\006" +
    "\011\uff90\013\uff90\001\002\000\006\011\uff92\013\uff92\001" +
    "\002\000\006\011\uff94\013\uff94\001\002\000\056\010\uff99" +
    "\011\uff99\013\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026" +
    "\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99" +
    "\035\uff99\044\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055" +
    "\uff99\075\uff99\001\002\000\020\013\uff96\014\165\015\172" +
    "\016\164\017\171\020\166\021\170\001\002\000\004\013" +
    "\uff98\001\002\000\056\010\uffd5\011\uffd5\013\uffd5\022\122" +
    "\023\115\024\117\025\126\026\124\027\114\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\044\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\075\uffd5\001\002\000" +
    "\026\005\uffeb\010\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\045\uffeb\046\uffeb\104\uffeb\001\002\000\046\013" +
    "\201\022\122\023\115\024\117\025\126\026\124\027\114" +
    "\030\132\031\121\032\120\033\123\034\116\035\127\051" +
    "\131\052\113\053\130\054\112\055\125\001\002\000\056" +
    "\010\uffcd\011\uffcd\013\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\044\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\075\uffcd\001\002\000\026\005\uffea\010\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\045\uffea\046" +
    "\uffea\104\uffea\001\002\000\004\010\ufff6\001\002\000\034" +
    "\005\216\010\uffb3\045\243\050\237\062\232\065\213\071" +
    "\215\072\240\073\227\077\245\100\244\101\223\106\233" +
    "\001\002\000\036\005\uffae\010\uffae\045\uffae\050\uffae\062" +
    "\uffae\065\uffae\066\uffae\071\uffae\072\uffae\073\uffae\077\uffae" +
    "\100\uffae\101\uffae\106\uffae\001\002\000\036\005\uff8b\010" +
    "\uff8b\045\uff8b\050\uff8b\062\uff8b\065\uff8b\066\uff8b\071\uff8b" +
    "\072\uff8b\073\uff8b\077\uff8b\100\uff8b\101\uff8b\106\uff8b\001" +
    "\002\000\004\010\u015b\001\002\000\036\005\uff8f\010\uff8f" +
    "\045\uff8f\050\uff8f\062\uff8f\065\uff8f\066\uff8f\071\uff8f\072" +
    "\uff8f\073\uff8f\077\uff8f\100\uff8f\101\uff8f\106\uff8f\001\002" +
    "\000\036\005\uff8d\010\uff8d\045\uff8d\050\uff8d\062\uff8d\065" +
    "\uff8d\066\uff8d\071\uff8d\072\uff8d\073\uff8d\077\uff8d\100\uff8d" +
    "\101\uff8d\106\uff8d\001\002\000\036\005\uffaa\010\uffaa\045" +
    "\uffaa\050\uffaa\062\uffaa\065\uffaa\066\uffaa\071\uffaa\072\uffaa" +
    "\073\uffaa\077\uffaa\100\uffaa\101\uffaa\106\uffaa\001\002\000" +
    "\004\012\u0144\001\002\000\036\005\uffa6\010\uffa6\045\uffa6" +
    "\050\uffa6\062\uffa6\065\uffa6\066\uffa6\071\uffa6\072\uffa6\073" +
    "\uffa6\077\uffa6\100\uffa6\101\uffa6\106\uffa6\001\002\000\004" +
    "\012\u012a\001\002\000\016\012\154\043\u011c\057\u011e\060" +
    "\u011d\061\u011b\074\u011f\001\002\000\036\005\216\010\uffb3" +
    "\045\243\050\237\062\232\065\213\066\uffb3\071\215\072" +
    "\240\073\227\077\245\100\244\101\223\106\233\001\002" +
    "\000\036\005\uffa9\010\uffa9\045\uffa9\050\uffa9\062\uffa9\065" +
    "\uffa9\066\uffa9\071\uffa9\072\uffa9\073\uffa9\077\uffa9\100\uffa9" +
    "\101\uffa9\106\uffa9\001\002\000\036\005\uffab\010\uffab\045" +
    "\uffab\050\uffab\062\uffab\065\uffab\066\uffab\071\uffab\072\uffab" +
    "\073\uffab\077\uffab\100\uffab\101\uffab\106\uffab\001\002\000" +
    "\004\044\u0119\001\002\000\004\012\u010e\001\002\000\036" +
    "\005\uffa7\010\uffa7\045\uffa7\050\uffa7\062\uffa7\065\uffa7\066" +
    "\uffa7\071\uffa7\072\uffa7\073\uffa7\077\uffa7\100\uffa7\101\uffa7" +
    "\106\uffa7\001\002\000\036\005\uff8c\010\uff8c\045\uff8c\050" +
    "\uff8c\062\uff8c\065\uff8c\066\uff8c\071\uff8c\072\uff8c\073\uff8c" +
    "\077\uff8c\100\uff8c\101\uff8c\106\uff8c\001\002\000\036\005" +
    "\uffa8\010\uffa8\045\uffa8\050\uffa8\062\uffa8\065\uffa8\066\uffa8" +
    "\071\uffa8\072\uffa8\073\uffa8\077\uffa8\100\uffa8\101\uffa8\106" +
    "\uffa8\001\002\000\026\005\103\012\100\014\073\015\072" +
    "\016\105\017\075\020\074\021\104\047\102\056\106\001" +
    "\002\000\036\005\uff8e\010\uff8e\045\uff8e\050\uff8e\062\uff8e" +
    "\065\uff8e\066\uff8e\071\uff8e\072\uff8e\073\uff8e\077\uff8e\100" +
    "\uff8e\101\uff8e\106\uff8e\001\002\000\036\005\uffb1\010\uffb1" +
    "\045\uffb1\050\uffb1\062\uffb1\065\uffb1\066\uffb1\071\uffb1\072" +
    "\uffb1\073\uffb1\077\uffb1\100\uffb1\101\uffb1\106\uffb1\001\002" +
    "\000\004\012\u0106\001\002\000\004\012\357\001\002\000" +
    "\036\005\uffac\010\uffac\045\uffac\050\uffac\062\uffac\065\uffac" +
    "\066\uffac\071\uffac\072\uffac\073\uffac\077\uffac\100\uffac\101" +
    "\uffac\106\uffac\001\002\000\030\005\103\012\100\014\073" +
    "\015\072\016\105\017\075\020\074\021\104\047\102\056" +
    "\106\075\332\001\002\000\040\005\uff89\010\uff89\045\uff89" +
    "\050\uff89\062\uff89\063\321\065\uff89\066\uff89\071\uff89\072" +
    "\uff89\073\uff89\077\uff89\100\uff89\101\uff89\106\uff89\001\002" +
    "\000\004\012\312\001\002\000\004\007\301\001\002\000" +
    "\004\044\300\001\002\000\036\005\uffb2\010\uffb2\045\uffb2" +
    "\050\uffb2\062\uffb2\065\uffb2\066\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\077\uffb2\100\uffb2\101\uffb2\106\uffb2\001\002\000\014" +
    "\036\054\037\050\040\053\041\055\042\052\001\002\000" +
    "\004\012\254\001\002\000\004\012\246\001\002\000\026" +
    "\005\103\012\100\014\073\015\072\016\105\017\075\020" +
    "\074\021\104\047\102\056\106\001\002\000\004\011\250" +
    "\001\002\000\026\005\103\012\100\014\073\015\072\016" +
    "\105\017\075\020\074\021\104\047\102\056\106\001\002" +
    "\000\004\013\252\001\002\000\004\044\253\001\002\000" +
    "\036\005\uff59\010\uff59\045\uff59\050\uff59\062\uff59\065\uff59" +
    "\066\uff59\071\uff59\072\uff59\073\uff59\077\uff59\100\uff59\101" +
    "\uff59\106\uff59\001\002\000\026\005\103\012\100\014\073" +
    "\015\072\016\105\017\075\020\074\021\104\047\102\056" +
    "\106\001\002\000\004\013\256\001\002\000\004\044\257" +
    "\001\002\000\036\005\uff69\010\uff69\045\uff69\050\uff69\062" +
    "\uff69\065\uff69\066\uff69\071\uff69\072\uff69\073\uff69\077\uff69" +
    "\100\uff69\101\uff69\106\uff69\001\002\000\006\005\261\076" +
    "\263\001\002\000\010\011\271\043\272\044\274\001\002" +
    "\000\036\005\uffa4\010\uffa4\045\uffa4\050\uffa4\062\uffa4\065" +
    "\uffa4\066\uffa4\071\uffa4\072\uffa4\073\uffa4\077\uffa4\100\uffa4" +
    "\101\uffa4\106\uffa4\001\002\000\004\005\264\001\002\000" +
    "\006\011\267\074\uff45\001\002\000\004\074\266\001\002" +
    "\000\030\005\uff47\012\uff47\014\uff47\015\uff47\016\uff47\017" +
    "\uff47\020\uff47\021\uff47\047\uff47\056\uff47\075\uff47\001\002" +
    "\000\004\005\061\001\002\000\004\074\uff46\001\002\000" +
    "\004\005\261\001\002\000\026\005\103\012\100\014\073" +
    "\015\072\016\105\017\075\020\074\021\104\047\102\056" +
    "\106\001\002\000\036\005\uffa3\010\uffa3\045\uffa3\050\uffa3" +
    "\062\uffa3\065\uffa3\066\uffa3\071\uffa3\072\uffa3\073\uffa3\077" +
    "\uffa3\100\uffa3\101\uffa3\106\uffa3\001\002\000\036\005\uffa0" +
    "\010\uffa0\045\uffa0\050\uffa0\062\uffa0\065\uffa0\066\uffa0\071" +
    "\uffa0\072\uffa0\073\uffa0\077\uffa0\100\uffa0\101\uffa0\106\uffa0" +
    "\001\002\000\004\044\276\001\002\000\036\005\uffa2\010" +
    "\uffa2\045\uffa2\050\uffa2\062\uffa2\065\uffa2\066\uffa2\071\uffa2" +
    "\072\uffa2\073\uffa2\077\uffa2\100\uffa2\101\uffa2\106\uffa2\001" +
    "\002\000\036\005\uffa1\010\uffa1\045\uffa1\050\uffa1\062\uffa1" +
    "\065\uffa1\066\uffa1\071\uffa1\072\uffa1\073\uffa1\077\uffa1\100" +
    "\uffa1\101\uffa1\106\uffa1\001\002\000\036\005\uffb0\010\uffb0" +
    "\045\uffb0\050\uffb0\062\uffb0\065\uffb0\066\uffb0\071\uffb0\072" +
    "\uffb0\073\uffb0\077\uffb0\100\uffb0\101\uffb0\106\uffb0\001\002" +
    "\000\034\005\216\010\uffb3\045\243\050\237\062\232\065" +
    "\213\071\215\072\240\073\227\077\245\100\244\101\223" +
    "\106\233\001\002\000\004\010\303\001\002\000\004\050" +
    "\304\001\002\000\004\012\305\001\002\000\026\005\103" +
    "\012\100\014\073\015\072\016\105\017\075\020\074\021" +
    "\104\047\102\056\106\001\002\000\004\013\310\001\002" +
    "\000\050\013\uff8a\022\122\023\115\024\117\025\126\026" +
    "\124\027\114\030\132\031\121\032\120\033\123\034\116" +
    "\035\127\044\uff8a\051\131\052\113\053\130\054\112\055" +
    "\125\001\002\000\004\044\311\001\002\000\036\005\uff6a" +
    "\010\uff6a\045\uff6a\050\uff6a\062\uff6a\065\uff6a\066\uff6a\071" +
    "\uff6a\072\uff6a\073\uff6a\077\uff6a\100\uff6a\101\uff6a\106\uff6a" +
    "\001\002\000\026\005\103\012\100\014\073\015\072\016" +
    "\105\017\075\020\074\021\104\047\102\056\106\001\002" +
    "\000\004\013\314\001\002\000\004\007\315\001\002\000" +
    "\034\005\216\010\uffb3\045\243\050\237\062\232\065\213" +
    "\071\215\072\240\073\227\077\245\100\244\101\223\106" +
    "\233\001\002\000\004\010\317\001\002\000\036\005\uff6b" +
    "\010\uff6b\045\uff6b\050\uff6b\062\uff6b\065\uff6b\066\uff6b\071" +
    "\uff6b\072\uff6b\073\uff6b\077\uff6b\100\uff6b\101\uff6b\106\uff6b" +
    "\001\002\000\036\005\uff88\010\uff88\045\uff88\050\uff88\062" +
    "\uff88\065\uff88\066\uff88\071\uff88\072\uff88\073\uff88\077\uff88" +
    "\100\uff88\101\uff88\106\uff88\001\002\000\006\007\323\062" +
    "\232\001\002\000\036\005\uff87\010\uff87\045\uff87\050\uff87" +
    "\062\uff87\065\uff87\066\uff87\071\uff87\072\uff87\073\uff87\077" +
    "\uff87\100\uff87\101\uff87\106\uff87\001\002\000\034\005\216" +
    "\010\uffb3\045\243\050\237\062\232\065\213\071\215\072" +
    "\240\073\227\077\245\100\244\101\223\106\233\001\002" +
    "\000\040\005\uff84\010\uff84\045\uff84\050\uff84\062\uff84\063" +
    "\321\065\uff84\066\uff84\071\uff84\072\uff84\073\uff84\077\uff84" +
    "\100\uff84\101\uff84\106\uff84\001\002\000\036\005\uff83\010" +
    "\uff83\045\uff83\050\uff83\062\uff83\065\uff83\066\uff83\071\uff83" +
    "\072\uff83\073\uff83\077\uff83\100\uff83\101\uff83\106\uff83\001" +
    "\002\000\036\005\uff82\010\uff82\045\uff82\050\uff82\062\uff82" +
    "\065\uff82\066\uff82\071\uff82\072\uff82\073\uff82\077\uff82\100" +
    "\uff82\101\uff82\106\uff82\001\002\000\004\010\330\001\002" +
    "\000\036\005\uff85\010\uff85\045\uff85\050\uff85\062\uff85\065" +
    "\uff85\066\uff85\071\uff85\072\uff85\073\uff85\077\uff85\100\uff85" +
    "\101\uff85\106\uff85\001\002\000\004\043\337\001\002\000" +
    "\006\043\uff50\074\335\001\002\000\004\044\334\001\002" +
    "\000\036\005\uff48\010\uff48\045\uff48\050\uff48\062\uff48\065" +
    "\uff48\066\uff48\071\uff48\072\uff48\073\uff48\077\uff48\100\uff48" +
    "\101\uff48\106\uff48\001\002\000\004\075\332\001\002\000" +
    "\004\043\uff51\001\002\000\004\007\340\001\002\000\030" +
    "\005\103\007\344\012\100\014\073\015\072\016\105\017" +
    "\075\020\074\021\104\047\102\056\106\001\002\000\004" +
    "\044\342\001\002\000\036\005\uff49\010\uff49\045\uff49\050" +
    "\uff49\062\uff49\065\uff49\066\uff49\071\uff49\072\uff49\073\uff49" +
    "\077\uff49\100\uff49\101\uff49\106\uff49\001\002\000\004\010" +
    "\356\001\002\000\026\005\103\012\100\014\073\015\072" +
    "\016\105\017\075\020\074\021\104\047\102\056\106\001" +
    "\002\000\006\010\uff4a\011\350\001\002\000\004\010\347" +
    "\001\002\000\004\044\uff4e\001\002\000\026\005\103\012" +
    "\100\014\073\015\072\016\105\017\075\020\074\021\104" +
    "\047\102\056\106\001\002\000\004\010\uff4b\001\002\000" +
    "\004\010\353\001\002\000\006\010\uff4c\011\354\001\002" +
    "\000\004\007\344\001\002\000\004\010\uff4d\001\002\000" +
    "\004\044\uff4f\001\002\000\032\062\374\107\373\110\367" +
    "\111\362\112\372\113\375\114\371\115\360\116\364\117" +
    "\363\120\370\121\365\001\002\000\004\011\uff5f\001\002" +
    "\000\004\011\u0100\001\002\000\004\011\uff63\001\002\000" +
    "\004\011\uff5d\001\002\000\004\011\uff5e\001\002\000\004" +
    "\011\uff5b\001\002\000\004\013\376\001\002\000\004\011" +
    "\uff64\001\002\000\004\011\uff5c\001\002\000\004\011\uff60" +
    "\001\002\000\004\011\uff62\001\002\000\004\011\uff65\001" +
    "\002\000\004\011\uff5a\001\002\000\004\011\uff61\001\002" +
    "\000\004\044\377\001\002\000\036\005\uff67\010\uff67\045" +
    "\uff67\050\uff67\062\uff67\065\uff67\066\uff67\071\uff67\072\uff67" +
    "\073\uff67\077\uff67\100\uff67\101\uff67\106\uff67\001\002\000" +
    "\026\005\103\012\100\014\073\015\072\016\105\017\075" +
    "\020\074\021\104\047\102\056\106\001\002\000\004\011" +
    "\u0102\001\002\000\026\005\103\012\100\014\073\015\072" +
    "\016\105\017\075\020\074\021\104\047\102\056\106\001" +
    "\002\000\004\011\u0104\001\002\000\026\005\103\012\100" +
    "\014\073\015\072\016\105\017\075\020\074\021\104\047" +
    "\102\056\106\001\002\000\004\013\uff66\001\002\000\026" +
    "\005\103\012\100\014\073\015\072\016\105\017\075\020" +
    "\074\021\104\047\102\056\106\001\002\000\004\013\u0108" +
    "\001\002\000\004\007\u0109\001\002\000\034\005\216\010" +
    "\uffb3\045\243\050\237\062\232\065\213\071\215\072\240" +
    "\073\227\077\245\100\244\101\223\106\233\001\002\000" +
    "\004\010\u010b\001\002\000\040\005\uff86\010\uff86\045\uff86" +
    "\050\uff86\062\uff86\063\uff86\065\uff86\066\uff86\071\uff86\072" +
    "\uff86\073\uff86\077\uff86\100\uff86\101\uff86\106\uff86\001\002" +
    "\000\004\044\u010d\001\002\000\036\005\uffad\010\uffad\045" +
    "\uffad\050\uffad\062\uffad\065\uffad\066\uffad\071\uffad\072\uffad" +
    "\073\uffad\077\uffad\100\uffad\101\uffad\106\uffad\001\002\000" +
    "\004\005\u010f\001\002\000\004\011\u0110\001\002\000\014" +
    "\122\u0112\123\u0115\124\u0111\125\u0116\126\u0113\001\002\000" +
    "\004\013\uff3f\001\002\000\004\013\uff41\001\002\000\004" +
    "\013\uff3d\001\002\000\004\013\u0117\001\002\000\004\013" +
    "\uff40\001\002\000\004\013\uff3e\001\002\000\004\044\u0118" +
    "\001\002\000\036\005\uff42\010\uff42\045\uff42\050\uff42\062" +
    "\uff42\065\uff42\066\uff42\071\uff42\072\uff42\073\uff42\077\uff42" +
    "\100\uff42\101\uff42\106\uff42\001\002\000\036\005\uffaf\010" +
    "\uffaf\045\uffaf\050\uffaf\062\uffaf\065\uffaf\066\uffaf\071\uffaf" +
    "\072\uffaf\073\uffaf\077\uffaf\100\uffaf\101\uffaf\106\uffaf\001" +
    "\002\000\006\010\uffb4\066\uffb4\001\002\000\004\044\uff9d" +
    "\001\002\000\026\005\103\012\100\014\073\015\072\016" +
    "\105\017\075\020\074\021\104\047\102\056\106\001\002" +
    "\000\004\044\uff9e\001\002\000\010\005\u0124\014\u0125\015" +
    "\u0127\001\002\000\026\005\103\012\100\014\073\015\072" +
    "\016\105\017\075\020\074\021\104\047\102\056\106\001" +
    "\002\000\004\043\u0121\001\002\000\026\005\103\012\100" +
    "\014\073\015\072\016\105\017\075\020\074\021\104\047" +
    "\102\056\106\001\002\000\004\044\u0123\001\002\000\036" +
    "\005\uff44\010\uff44\045\uff44\050\uff44\062\uff44\065\uff44\066" +
    "\uff44\071\uff44\072\uff44\073\uff44\077\uff44\100\uff44\101\uff44" +
    "\106\uff44\001\002\000\004\044\uff9c\001\002\000\004\044" +
    "\uff9b\001\002\000\004\044\uff9f\001\002\000\004\044\uff9a" +
    "\001\002\000\004\044\u0129\001\002\000\036\005\uffa5\010" +
    "\uffa5\045\uffa5\050\uffa5\062\uffa5\065\uffa5\066\uffa5\071\uffa5" +
    "\072\uffa5\073\uffa5\077\uffa5\100\uffa5\101\uffa5\106\uffa5\001" +
    "\002\000\010\005\u012c\036\u012f\037\u012b\001\002\000\004" +
    "\005\u0142\001\002\000\004\043\u0131\001\002\000\004\013" +
    "\u013d\001\002\000\004\044\u0136\001\002\000\004\005\u0130" +
    "\001\002\000\004\043\u0131\001\002\000\010\005\u0133\014" +
    "\u0134\015\u0135\001\002\000\004\044\uff73\001\002\000\004" +
    "\044\uff70\001\002\000\004\044\uff6f\001\002\000\004\044" +
    "\uff6e\001\002\000\026\005\103\012\100\014\073\015\072" +
    "\016\105\017\075\020\074\021\104\047\102\056\106\001" +
    "\002\000\004\044\u0138\001\002\000\004\005\u0139\001\002" +
    "\000\006\060\u013c\061\u013b\001\002\000\004\013\uff74\001" +
    "\002\000\004\013\uff6c\001\002\000\004\013\uff6d\001\002" +
    "\000\004\007\u013e\001\002\000\034\005\216\010\uffb3\045" +
    "\243\050\237\062\232\065\213\071\215\072\240\073\227" +
    "\077\245\100\244\101\223\106\233\001\002\000\004\010" +
    "\u0140\001\002\000\036\005\uff75\010\uff75\045\uff75\050\uff75" +
    "\062\uff75\065\uff75\066\uff75\071\uff75\072\uff75\073\uff75\077" +
    "\uff75\100\uff75\101\uff75\106\uff75\001\002\000\004\044\uff71" +
    "\001\002\000\004\043\u0131\001\002\000\004\044\uff72\001" +
    "\002\000\004\005\u0145\001\002\000\004\013\u0146\001\002" +
    "\000\004\007\u0147\001\002\000\010\010\uff7f\067\u014b\070" +
    "\u0148\001\002\000\004\064\u0159\001\002\000\004\010\u0158" +
    "\001\002\000\004\066\u0156\001\002\000\020\005\u014c\014" +
    "\u014f\015\u0152\016\u014d\017\u0153\020\u0150\021\u0151\001\002" +
    "\000\004\064\uff7c\001\002\000\004\064\uff79\001\002\000" +
    "\004\064\u0154\001\002\000\004\064\uff7b\001\002\000\004" +
    "\064\uff77\001\002\000\004\064\uff76\001\002\000\004\064" +
    "\uff7a\001\002\000\004\064\uff78\001\002\000\034\005\216" +
    "\045\243\050\237\062\232\065\213\066\uffb3\071\215\072" +
    "\240\073\227\077\245\100\244\101\223\106\233\001\002" +
    "\000\004\066\uff7e\001\002\000\010\010\uff7f\067\u014b\070" +
    "\u0148\001\002\000\004\010\uff80\001\002\000\036\005\uff81" +
    "\010\uff81\045\uff81\050\uff81\062\uff81\065\uff81\066\uff81\071" +
    "\uff81\072\uff81\073\uff81\077\uff81\100\uff81\101\uff81\106\uff81" +
    "\001\002\000\034\005\216\045\243\050\237\062\232\065" +
    "\213\066\uffb3\071\215\072\240\073\227\077\245\100\244" +
    "\101\223\106\233\001\002\000\004\066\uff7d\001\002\000" +
    "\026\005\uffc3\010\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\045\uffc3\046\uffc3\104\uffc3\001\002\000\004\013" +
    "\u015d\001\002\000\004\007\u015e\001\002\000\034\005\216" +
    "\010\uffb3\045\243\050\237\062\232\065\213\071\215\072" +
    "\240\073\227\077\245\100\244\101\223\106\233\001\002" +
    "\000\004\010\u0160\001\002\000\026\005\uff68\010\uff68\036" +
    "\uff68\037\uff68\040\uff68\041\uff68\042\uff68\045\uff68\046\uff68" +
    "\104\uff68\001\002\000\006\002\ufffc\004\ufffc\001\002\000" +
    "\004\012\u0163\001\002\000\016\013\u0164\036\054\037\050" +
    "\040\053\041\055\042\052\001\002\000\004\007\uffbd\001" +
    "\002\000\006\011\u016b\013\uffb7\001\002\000\004\005\u016a" +
    "\001\002\000\004\013\u0169\001\002\000\004\007\uffc0\001" +
    "\002\000\004\007\uffbe\001\002\000\006\011\uffb5\013\uffb5" +
    "\001\002\000\014\036\054\037\050\040\053\041\055\042" +
    "\052\001\002\000\004\013\uffb6\001\002\000\026\005\103" +
    "\012\100\014\073\015\072\016\105\017\075\020\074\021" +
    "\104\047\102\056\106\001\002\000\016\013\u0164\036\054" +
    "\037\050\040\053\041\055\042\052\001\002\000\004\007" +
    "\uffbf\001\002\000\004\044\u0171\001\002\000\026\005\uffe3" +
    "\010\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\045" +
    "\uffe3\046\uffe3\104\uffe3\001\002\000\004\043\u0175\001\002" +
    "\000\004\044\u0174\001\002\000\026\005\uff57\010\uff57\036" +
    "\uff57\037\uff57\040\uff57\041\uff57\042\uff57\045\uff57\046\uff57" +
    "\104\uff57\001\002\000\004\007\340\001\002\000\004\044" +
    "\u0177\001\002\000\026\005\uff58\010\uff58\036\uff58\037\uff58" +
    "\040\uff58\041\uff58\042\uff58\045\uff58\046\uff58\104\uff58\001" +
    "\002\000\014\036\054\037\050\040\053\041\055\042\052" +
    "\001\002\000\004\012\u017f\001\002\000\004\005\u017c\001" +
    "\002\000\026\005\uffee\010\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\045\uffee\046\uffee\104\uffee\001\002\000" +
    "\004\012\u017d\001\002\000\016\013\u0164\036\054\037\050" +
    "\040\053\041\055\042\052\001\002\000\004\007\uffc2\001" +
    "\002\000\016\013\u0164\036\054\037\050\040\053\041\055" +
    "\042\052\001\002\000\004\007\uffc1\001\002\000\004\005" +
    "\056\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017f\000\012\002\006\003\007\004\003\112\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\007\004\003\112\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\021\001\001\000\002\001\001\000\030\007\033\010" +
    "\045\011\027\012\030\021\042\022\040\026\041\061\032" +
    "\064\025\077\026\100\044\001\001\000\006\012\u017a\061" +
    "\u0179\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\156\017\075\020\076\037\107\075\u0171\076\u0172\107" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\202\010\045" +
    "\011\027\012\030\021\042\022\040\026\041\061\032\064" +
    "\025\077\026\100\044\001\001\000\004\013\050\001\001" +
    "\000\002\001\001\000\004\014\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\066\001\001\000\002\001\001\000\004\101" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\064\001\001\000\002\001\001\000" +
    "\004\014\201\001\001\000\002\001\001\000\014\016\100" +
    "\017\075\020\076\037\107\107\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\177\020\076\037\107\107\106\001\001\000\002" +
    "\001\001\000\012\017\175\020\076\037\107\107\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\110\020\076\037\107\107\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\152\020\076\037\107\107\106\001\001\000\012\017" +
    "\151\020\076\037\107\107\106\001\001\000\012\017\150" +
    "\020\076\037\107\107\106\001\001\000\012\017\147\020" +
    "\076\037\107\107\106\001\001\000\012\017\146\020\076" +
    "\037\107\107\106\001\001\000\012\017\145\020\076\037" +
    "\107\107\106\001\001\000\012\017\144\020\076\037\107" +
    "\107\106\001\001\000\012\017\143\020\076\037\107\107" +
    "\106\001\001\000\012\017\142\020\076\037\107\107\106" +
    "\001\001\000\012\017\141\020\076\037\107\107\106\001" +
    "\001\000\012\017\140\020\076\037\107\107\106\001\001" +
    "\000\012\017\137\020\076\037\107\107\106\001\001\000" +
    "\012\017\136\020\076\037\107\107\106\001\001\000\012" +
    "\017\135\020\076\037\107\107\106\001\001\000\012\017" +
    "\134\020\076\037\107\107\106\001\001\000\012\017\133" +
    "\020\076\037\107\107\106\001\001\000\012\017\132\020" +
    "\076\037\107\107\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\166\063\162\001\001\000\016\016\156\017\075\020\076" +
    "\037\107\076\155\107\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\016\156\017\075" +
    "\020\076\037\107\076\161\107\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\174\063\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\027\216\030" +
    "\241\031\230\032\240\035\206\037\221\043\235\044\207" +
    "\046\204\052\227\056\210\057\224\060\205\065\233\066" +
    "\220\071\211\102\217\104\234\105\225\106\223\110\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\027\216\030\241\031\230\032\240" +
    "\035\u0119\037\221\043\235\044\207\046\204\052\227\056" +
    "\210\057\224\060\205\065\233\066\220\071\211\102\217" +
    "\104\234\105\225\106\223\110\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\u010b\017\075\020\076\037\107\107\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\156\017\075" +
    "\020\076\037\107\075\330\076\332\107\106\001\001\000" +
    "\006\041\321\042\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\246\017\075\020\076\037\107\107\106\001\001\000" +
    "\002\001\001\000\014\016\250\017\075\020\076\037\107" +
    "\107\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\254\017\075\020\076\037\107" +
    "\107\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\261\001\001\000\004\034\272" +
    "\001\001\000\002\001\001\000\004\103\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\267\001\001\000\002\001\001\000\004\033\276\001" +
    "\001\000\014\016\274\017\075\020\076\037\107\107\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\027\216\030\241\031\230\032\240\035\301\037" +
    "\221\043\235\044\207\046\204\052\227\056\210\057\224" +
    "\060\205\065\233\066\220\071\211\102\217\104\234\105" +
    "\225\106\223\110\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\306\020\076\037" +
    "\107\045\305\107\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\306\020\076\037\107\045\312\107\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\027\216\030\241\031" +
    "\230\032\240\035\315\037\221\043\235\044\207\046\204" +
    "\052\227\056\210\057\224\060\205\065\233\066\220\071" +
    "\211\102\217\104\234\105\225\106\223\110\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\323\001\001\000\002\001\001\000\054\027\216" +
    "\030\241\031\230\032\240\035\326\037\221\043\235\044" +
    "\207\046\204\052\227\056\210\057\224\060\205\065\233" +
    "\066\220\071\211\102\217\104\234\105\225\106\223\110" +
    "\213\001\001\000\006\041\325\042\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\075\335\001\001\000\002\001" +
    "\001\000\004\074\340\001\001\000\020\016\344\017\075" +
    "\020\076\037\107\072\342\073\345\107\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\344\017\075\020\076\037\107\072\351\107\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\016\344\017\075\020\076\037\107\072\350\107" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\073\354\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\067\360\070\365\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\u0100\017\075\020\076\037\107\107\106\001\001\000\002" +
    "\001\001\000\014\016\u0102\017\075\020\076\037\107\107" +
    "\106\001\001\000\002\001\001\000\014\016\u0104\017\075" +
    "\020\076\037\107\107\106\001\001\000\002\001\001\000" +
    "\014\017\306\020\076\037\107\045\u0106\107\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\027\216\030" +
    "\241\031\230\032\240\035\u0109\037\221\043\235\044\207" +
    "\046\204\052\227\056\210\057\224\060\205\065\233\066" +
    "\220\071\211\102\217\104\234\105\225\106\223\110\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\111\u0113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\u0127\017\075\020\076\037\107\107\106\001\001\000" +
    "\002\001\001\000\004\036\u0125\001\001\000\016\016\156" +
    "\017\075\020\076\037\107\076\u011f\107\106\001\001\000" +
    "\002\001\001\000\014\016\u0121\017\075\020\076\037\107" +
    "\107\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\054" +
    "\u012d\055\u012c\001\001\000\002\001\001\000\004\062\u0140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\306\020\076\037\107\045\u0136\107\106" +
    "\001\001\000\002\001\001\000\004\053\u0139\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\027\216\030\241\031" +
    "\230\032\240\035\u013e\037\221\043\235\044\207\046\204" +
    "\052\227\056\210\057\224\060\205\065\233\066\220\071" +
    "\211\102\217\104\234\105\225\106\223\110\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\u0142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\050\u0149\051" +
    "\u0148\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\u014d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\027\216\030\241\031\230\032\240\035\u0154" +
    "\037\221\043\235\044\207\046\204\052\227\056\210\057" +
    "\224\060\205\065\233\066\220\071\211\102\217\104\234" +
    "\105\225\106\223\110\213\001\001\000\002\001\001\000" +
    "\006\050\u0149\051\u0156\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\027\216\030\241\031\230\032\240\035" +
    "\u0159\037\221\043\235\044\207\046\204\052\227\056\210" +
    "\057\224\060\205\065\233\066\220\071\211\102\217\104" +
    "\234\105\225\106\223\110\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\027\216\030\241\031\230\032\240\035\u015e\037\221" +
    "\043\235\044\207\046\204\052\227\056\210\057\224\060" +
    "\205\065\233\066\220\071\211\102\217\104\234\105\225" +
    "\106\223\110\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\u0165" +
    "\023\u0166\024\u0164\025\u0167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\u0165\023\u016b\024\u0164\001\001\000\002\001\001\000\014" +
    "\016\u016f\017\075\020\076\037\107\107\106\001\001\000" +
    "\012\013\u0165\023\u0166\024\u0164\025\u016e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\074\u0175" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0180\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\u0165\023\u0166\024" +
    "\u0164\025\u017d\001\001\000\002\001\001\000\012\013\u0165" +
    "\023\u0166\024\u0164\025\u017f\001\001\000\002\001\001\000" +
    "\004\014\056\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

        private TipoDato tipo;
        private Pista pista;
        private boolean asigna= false;
        private Operation instrOp;
        private ArrayList<ErrorSemantico> errorsSemanticos = new ArrayList<ErrorSemantico>();
        private ArrayList<Variable> parametros = new ArrayList<Variable>();
        private ArrayList<Dato> parametroLllmada = new ArrayList<>();
        private int cont = 0;
        private int contDimes=0;


 /* Connect this parser to a scanner!*/
	public parser(LexerPista analizadorLexico) {
		super(analizadorLexico);
	}

       
        public ArrayList<ErrorSemantico> getErrorsSemanticos() {
                return errorsSemanticos;
        }

        public void setErrorsSemanticos(ArrayList<ErrorSemantico> errorsSemanticos) {
                this.errorsSemanticos = errorsSemanticos;
        }



        @Override
        public void syntax_error(Symbol tok) {
	    try{
	        Token token = (Token) tok.value;
	        report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
	    }catch(Exception e){
                e.printStackTrace();
	    }	
	}

/**
    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
             System.out.println("SE ESPERABA UNA LLAVE FINAL");  
        }else{
             Token token = (Token) cur_token.value;
	     report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
        }
    }
    
*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= comodin_pista_recu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // comodin_pista_recu ::= def_pista comodin_pista_recu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista_recu",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // comodin_pista_recu ::= def_pista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista_recu",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def_pista ::= comodin_pista LLAVEA sentencias_global LLAVEC 
            {
              Object RESULT =null;
		pista.referenciarTablasPadres(); pista.tostringDAts();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_pista",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comodin_pista ::= PISTA ID 
            {
              Object RESULT =null;
		int pistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token pist = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista = new Pista(pist.getLexeme(), new TablaSimbol(errorsSemanticos), errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comodin_pista ::= PISTA ID comodin_extiende 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_pista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comodin_extiende ::= EXTIENDE ID items_extiende 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_extiende",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // items_extiende ::= COMA ID items_extiende 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_extiende",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // items_extiende ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_extiende",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencias_global ::= sentencia_global sentencias_global 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencias_global ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia_global ::= def_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia_global ::= asignacion_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia_global ::= def_funciones 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.getFunciones().add((Funcion) fun);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia_global ::= def_fun_principal 
            {
              Object RESULT =null;
		int funPrinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funPrinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funPrin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setFunPrincipal((Funcion) funPrin); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia_global ::= def_fun_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // def_variable ::= variables 
            {
              Object RESULT =null;
		pista.carpturarVariablesGlobales(tipo,asigna, instrOp); asigna= false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_variable ::= KEEP variables 
            {
              Object RESULT =null;
		pista.carpturarVariablesGlobales(tipo,asigna, instrOp); asigna= false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variables ::= VAR tipo items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // items_coma ::= ID items 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.getTableSimbolGoblal().capturarIds((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // items ::= IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // items ::= COMA items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // items ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= ENTERO 
            {
              Object RESULT =null;
		tipo=TipoDato.ENTERO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo ::= DOBLE 
            {
              Object RESULT =null;
		tipo=TipoDato.DECIMAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		tipo=TipoDato.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= CADENA 
            {
              Object RESULT =null;
		tipo=TipoDato.CADENA;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= CARACTER 
            {
              Object RESULT =null;
		tipo=TipoDato.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignacion_var ::= ID IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int operaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opera = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.capturarAsignacion(id, (Operation) opera);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignacion ::= operation 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation((NodoOperation) rootOp); instrOp =new Operation((NodoOperation) rootOp); asigna= true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operation ::= operation MAS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.SUMA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operation ::= operation MENOS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.RESTA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operation ::= operation POR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MULTIPLICACION, (NodoOperation) opLeft,(NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operation ::= operation DIVISION operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.DIVISION, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operation ::= operation MODULO operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MODULO, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= operation POTENCIA operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.POTENCIA, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operation ::= operation MAYORQ operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MAYORQ, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= operation MENORQ operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MENORQ, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= operation MAYOROI operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MAYOROI, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= operation MENOROI operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.MENOROI, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation ::= operation NOTEQUALS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.NOTEQUALS, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= operation EQUALS operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.EQUALS, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= ISNULO operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operation ::= NOT operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operation ::= operation OR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.OR, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operation ::= operation AND operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.AND, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operation ::= operation NAND operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.NAND, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operation ::= operation NOR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.NOR, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operation ::= operation XOR operation 
            {
              Object RESULT =null;
		int opLeftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opLeftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opLeft = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(TipoOperacion.XOR, (NodoOperation) opLeft, (NodoOperation) opRight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operation ::= terminal_casos 
            {
              Object RESULT =null;
		int nodoOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodoOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodoOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = nodoOp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operation ::= PARENTESISA operation PARENTESISC 
            {
              Object RESULT =null;
		int nodoOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nodoOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = nodoOp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // terminal_casos ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // terminal_casos ::= llamada_metod 
            {
              Object RESULT =null;
		int nodFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.clear(); RESULT = nodFun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // terminal_casos ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // terminal_casos ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // terminal_casos ::= CONT_CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.CHAR));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // terminal_casos ::= CONT_CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.CADENA));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // terminal_casos ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // terminal_casos ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // terminal_casos ::= valor_arreglo 
            {
              Object RESULT =null;
		int valArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valArr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // def_funciones ::= comodin_fun LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Funcion funs = (Funcion) fun; funs.setInstruccions((ArrayList<Instruccions>) sent); parametros.clear(); RESULT = funs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_funciones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comodin_fun ::= KEEP tipo_fun ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (TipoDato)tip); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comodin_fun ::= KEEP ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comodin_fun ::= tipo_fun ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (TipoDato)tip); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comodin_fun ::= ID PARENTESISA cierre_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_fun",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cierre_fun ::= parametros PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_fun",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cierre_fun ::= PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_fun",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_fun ::= ENTERO 
            {
              Object RESULT =null;
		RESULT =TipoDato.ENTERO;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_fun ::= DOBLE 
            {
              Object RESULT =null;
		RESULT =TipoDato.DECIMAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_fun ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT =TipoDato.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo_fun ::= CADENA 
            {
              Object RESULT =null;
		RESULT =TipoDato.CADENA;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo_fun ::= CARACTER 
            {
              Object RESULT =null;
		RESULT =TipoDato.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_fun",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros ::= comodin_param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros ::= comodin_param COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // comodin_param ::= tipo ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parametros.add(new Variable((Token)id, tipo, "",false));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Instruccions> arr= (ArrayList<Instruccions>)array; arr.add(0,(Instruccions)sent); RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencias ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Instruccions>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia ::= variables_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionVar((ArrayList<Variable>)array,asigna,(Operation) instrOp) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia ::= asignacion_var_fun 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = asig;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia ::= op_incremt_decremet_fun PUNTOCOMA 
            {
              Object RESULT =null;
		int decrIncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decrIncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decrInc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = decrInc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencia ::= llamada_metod PUNTOCOMA 
            {
              Object RESULT =null;
		int metodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int metodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object metod = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parametroLllmada.clear(); RESULT = new LlamadaFuncion((NodoOperation) metod);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencia ::= sentencias_bifuraciones 
            {
              Object RESULT =null;
		int sentbifuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentbifuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sentbifu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sentbifu;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencia ::= RETORNA asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaRetorna((Operation) op, (Token) tok, errorsSemanticos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia ::= fun_mensaje 
            {
              Object RESULT =null;
		int funMjsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funMjsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funMjs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funMjs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia ::= def_fun_reproducir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia ::= def_fun_esperar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia ::= decla_array_inicializado 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setSizeArray(0); cont = 0; contDimes = 0; pista.getTableSimbolGoblal().getIds().clear(); RESULT = arreglo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia ::= decla_arry 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.setSizeArray(0); cont = 0; contDimes = 0; pista.getTableSimbolGoblal().getIds().clear(); RESULT = arreglo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia ::= asig_arreglo 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = asig;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia ::= def_fun_ordenar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // asignacion_var_fun ::= ID IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Asignacion((Operation)op,(Token)id,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_var_fun",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variables_fun ::= VAR tipo items_coma_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT  = array;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables_fun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // items_coma_fun ::= ID items_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Variable> arryTmp = (ArrayList<Variable>) array; arryTmp.add( new Variable((Token)id,tipo, "", asigna)); RESULT = arryTmp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma_fun",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // items_fun ::= IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Variable>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // items_fun ::= COMA items_coma_fun 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = array;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // items_fun ::= PUNTOCOMA 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Variable>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_fun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // op_incremt_decremet_fun ::= ID SUMA_IMPLICITA terminales_increment_fun 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodRightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodRightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodRight = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, (NodoOperation) nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // op_incremt_decremet_fun ::= ID INCREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // op_incremt_decremet_fun ::= ID DECREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.RESTA, nodLeft, nodRight); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_fun",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // terminales_increment_fun ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // terminales_increment_fun ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // terminales_increment_fun ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_increment_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // llamada_metod ::= ID PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new NodoOperation((Token) id, parametroLllmada,pista);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metod",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametros_llamada ::= terminal_casos_param COMA parametros_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parametros_llamada ::= terminal_casos_param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parametros_llamada ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // terminal_casos_param ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.add(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // terminal_casos_param ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.add(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // terminal_casos_param ::= CONT_CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.add(new Dato(true,(Token) val,TipoDato.CHAR));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // terminal_casos_param ::= CONT_CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.add(new Dato(true,(Token) val,TipoDato.CADENA));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // terminal_casos_param ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.add(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // terminal_casos_param ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parametroLllmada.add(new Dato(true,(Token) val,TipoDato.BOOLEAN));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos_param",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencias_bifuraciones ::= def_if_complete 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencias_bifuraciones ::= def_switch 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencias_bifuraciones ::= def_for 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencias_bifuraciones ::= def_while 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencias_bifuraciones ::= def_do_while 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_bifuraciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // condition ::= operation 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation((NodoOperation) rootOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // def_if_complete ::= def_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = senIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // def_if_complete ::= def_if def_else 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senElse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElse((SentenciaElse) senElse); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // def_if_complete ::= def_if def_else_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senIfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIfs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElseIf((SentenciaIF) senIfs); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_complete",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // def_if ::= SI PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaIF((ArrayList<Instruccions>) sent,(Operation)op, new TablaSimbol(errorsSemanticos) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // def_else ::= SINO LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaElse((ArrayList<Instruccions>) sent, new TablaSimbol(errorsSemanticos) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // def_else_if ::= SINO def_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = senIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // def_else_if ::= SINO def_if def_else 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senElse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElse((SentenciaElse) senElse); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // def_else_if ::= SINO def_if def_else_if 
            {
              Object RESULT =null;
		int senIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object senIf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senIfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senIfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object senIfs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SentenciaIF nIf = (SentenciaIF) senIf; nIf.setSentenciaElseIf((SentenciaIF) senIfs); RESULT = nIf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_else_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // def_switch ::= SWITCH PARENTESISA ID PARENTESISC LLAVEA cases LLAVEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arryCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arryCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arryC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaSwitch((ArrayList<CasoSwitch> ) arryC, new Variable((Token) id, TipoDato.ENTERO, "",false),  new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_switch",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // cases ::= caso_sw SALIR cases 
            {
              Object RESULT =null;
		int cassleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cassright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cass = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arryCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arryCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arryC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<CasoSwitch> arr = (ArrayList<CasoSwitch>)arryC; arr.add(0,(CasoSwitch)cass); RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // cases ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<CasoSwitch>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // caso_sw ::= CASO terminales_switch DOPUNTO sentencias 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoSwitch((ArrayList<Instruccions>)inst,(Dato) dat);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // caso_sw ::= DEFAULT DOPUNTO sentencias 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoSwitch((ArrayList<Instruccions>)inst,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // terminales_switch ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(false, (Token) val, TipoDato.ENTERO, val.getLexeme());;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // terminales_switch ::= NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.ENTERO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // terminales_switch ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.DECIMAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // terminales_switch ::= CONT_CARACTER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.CADENA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // terminales_switch ::= CONT_CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.CHAR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // terminales_switch ::= FALSO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.BOOLEAN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // terminales_switch ::= VERDADERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(true, (Token) val, TipoDato.BOOLEAN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales_switch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // def_for ::= PARA PARENTESISA condition_for PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int forsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int forsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object fors = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		SentenciaFor senFor = (SentenciaFor)fors; senFor.setInstruccions((ArrayList<Instruccions>) instr); RESULT = senFor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_for",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // condition_for ::= var_iterador PUNTOCOMA condition PUNTOCOMA op_incremt_decremet_for 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object condi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int incremleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int incremright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object increm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaFor((Instruccions)inst,  new TablaSimbol(errorsSemanticos), (Asignacion)increm, (Operation) condi);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_for",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // var_iterador ::= ENTERO ID asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Variable> variables= new ArrayList<Variable>(); variables.add(new Variable((Token ) id, TipoDato.ENTERO, "", true)); RESULT = new DeclaracionVar(variables, true, (Operation)op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // var_iterador ::= DOBLE ID asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Variable> variables= new ArrayList<Variable>(); variables.add(new Variable((Token ) id, TipoDato.DECIMAL, "", true)); RESULT = new DeclaracionVar(variables, true, (Operation)op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // var_iterador ::= ID asignacion_iterador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Asignacion((Operation) op, (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // asignacion_iterador ::= IGUAL ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(false,(Token) val,TipoDato.ENTERO,val.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // asignacion_iterador ::= IGUAL NUM_ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(true,(Token) val,TipoDato.ENTERO));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // asignacion_iterador ::= IGUAL DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operation(new Dato(true,(Token) val,TipoDato.DECIMAL));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // op_incremt_decremet_for ::= ID INCREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.SUMA, nodLeft, nodRight ); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_for",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // op_incremt_decremet_for ::= ID DECREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodoOperation nodLeft = new NodoOperation(new Dato(false, (Token) id, TipoDato.ENTERO, id.getLexeme())); NodoOperation nodRight = new NodoOperation(new Dato(true, 1, TipoDato.ENTERO)); NodoOperation root = new NodoOperation(TipoOperacion.RESTA, nodLeft, nodRight); RESULT = new Asignacion(new Operation(root), (Token) id, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_incremt_decremet_for",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // def_while ::= MIENTRAS PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SentenciaWhile((ArrayList<Instruccions> )sent, (Operation) cond, new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_while",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // def_do_while ::= HACER LLAVEA sentencias LLAVEC MIENTRAS PARENTESISA condition PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new SentenciaDoWhile((ArrayList<Instruccions> )sent, (Operation) cond, new TablaSimbol(errorsSemanticos));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_do_while",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // fun_mensaje ::= MENSAJE PARENTESISA asignacion PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Mensaje((Operation) rootOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_mensaje",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // def_fun_principal ::= PRINCIPAL PARENTESISA PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Funcion(parametros, new TablaSimbol(errorsSemanticos, true),id.getLexeme(),(Token) id, (ArrayList<Instruccions>) inst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_principal",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // def_fun_reproducir ::= REPRODUCIR PARENTESISA def_sentencias_repro PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_reproducir",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // def_sentencias_repro ::= def_nota_musical COMA asignacion COMA asignacion COMA asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_sentencias_repro",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // def_nota_musical ::= NOTA_DO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // def_nota_musical ::= NOTA_DO_S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // def_nota_musical ::= NOTA_RE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // def_nota_musical ::= NOTA_RE_S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // def_nota_musical ::= NOTA_MI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // def_nota_musical ::= NOTA_FA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // def_nota_musical ::= NOTA_FA_S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // def_nota_musical ::= NOTA_SOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // def_nota_musical ::= NOTA_SOL_S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // def_nota_musical ::= NOTA_LA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // def_nota_musical ::= NOTA_LA_S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // def_nota_musical ::= SI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_nota_musical",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // def_fun_esperar ::= ESPERAR PARENTESISA asignacion COMA asignacion PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_esperar",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // def_fun_arreglo ::= def_tipo_arreglo def_sin_dimens IGUAL asignacion_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.capturarArregloGlobales(tipo, cont, contDimes, (ArrayList<Operation>)arrOp ); cont = 0; contDimes = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_arreglo",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // def_fun_arreglo ::= def_tipo_arreglo def_dimension_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		pista.captruarDeclaracionArreglo(tipo, (ArrayList<Operation>) arrOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_arreglo",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // def_tipo_arreglo ::= VAR tipo ARREGLO ids CORCHETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_tipo_arreglo",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ids ::= ID COMA ids 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		pista.getTableSimbolGoblal().capturarIdsArr((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ids ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.getTableSimbolGoblal().capturarIdsArr((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // def_dimension_arreglo ::= asignacion CORCHETC CORCHETA def_dimension_arreglo 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Operation> operations =( ArrayList<Operation>) arrs; operations.add(0,(Operation)op); RESULT = operations; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_dimension_arreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // def_dimension_arreglo ::= asignacion CORCHETC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ArrayList<Operation> operations = new ArrayList<>(); operations.add((Operation)op); RESULT = operations;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_dimension_arreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // def_sin_dimens ::= CORCHETC CORCHETA def_sin_dimens 
            {
              Object RESULT =null;
		cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_sin_dimens",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // def_sin_dimens ::= CORCHETC 
            {
              Object RESULT =null;
		cont++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_sin_dimens",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // asignacion_arreglo ::= LLAVEA asignaciones_recursivas LLAVEC 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		contDimes++; RESULT = arr ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // asignacion_arreglo ::= LLAVEA varios_dimensiones LLAVEC 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = arr ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // varios_dimensiones ::= LLAVEA asignaciones_recursivas LLAVEC COMA varios_dimensiones 
            {
              Object RESULT =null;
		int arr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object arr1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		contDimes++; RESULT = pista.unirOperaciones((ArrayList<Operation>) arr1, (ArrayList<Operation>) arr2, (Token) tok);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varios_dimensiones",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // varios_dimensiones ::= LLAVEA asignaciones_recursivas LLAVEC 
            {
              Object RESULT =null;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		contDimes++; RESULT = arrs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varios_dimensiones",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // asignaciones_recursivas ::= asignacion COMA asignaciones_recursivas 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Operation> operations =( ArrayList<Operation>) arrs; operations.add(0,(Operation)op); RESULT = operations; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones_recursivas",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // asignaciones_recursivas ::= asignacion 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Operation> operations = new ArrayList<>(); operations.add((Operation)op); RESULT = operations;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones_recursivas",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // decla_array_inicializado ::= def_tipo_arreglo_fun def_sin_dimens IGUAL asignacion_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ManejadorArreglos(pista.getSizeArray(), (ArrayList<Operation>) arrOp, pista.getTableSimbolGoblal().getIds(), tipo, cont, contDimes, errorsSemanticos);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decla_array_inicializado",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // decla_arry ::= def_tipo_arreglo_fun def_dimension_arreglo PUNTOCOMA 
            {
              Object RESULT =null;
		int arrOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ManejadorArreglos(tipo, null, (ArrayList<Operation>) arrOp, pista.getTableSimbolGoblal().getIds());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decla_arry",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // def_tipo_arreglo_fun ::= VAR tipo ARREGLO ids_fun CORCHETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_tipo_arreglo_fun",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ids_fun ::= ID COMA ids 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		pista.getTableSimbolGoblal().capturarIdsFun((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids_fun",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ids_fun ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pista.getTableSimbolGoblal().capturarIdsFun((Token) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids_fun",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // asig_arreglo ::= ID CORCHETA def_dimension_arreglo IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rootOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rootOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rootOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Asignacion((Operation) rootOp, (Token) id, (ArrayList<Operation>) arr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig_arreglo",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // valor_arreglo ::= ID CORCHETA def_dimension_arreglo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoOperation(new Dato(false,(Token) id,TipoDato.ENTERO, (ArrayList<Operation>) arr));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_arreglo",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // def_fun_ordenar ::= ORDENAR PARENTESISA ID COMA formaOrdenar PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_fun_ordenar",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // formaOrdenar ::= ASCENDENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // formaOrdenar ::= DESCENDENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // formaOrdenar ::= PARES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // formaOrdenar ::= IMPARES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // formaOrdenar ::= PRIMOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
